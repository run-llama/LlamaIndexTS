{
  "openapi": "3.1.0",
  "info": {
    "title": "Llama Platform",
    "version": "0.1.0"
  },
  "paths": {
    "/api/v1/api-keys": {
      "post": {
        "tags": ["API Keys"],
        "summary": "Generate Key",
        "description": "Generate a new API Key.",
        "operationId": "generate_key_api_v1_api_keys_post",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/APIKeyCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIKey"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["API Keys"],
        "summary": "List Keys",
        "description": "List API Keys for a user.",
        "operationId": "list_keys_api_v1_api_keys_get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/APIKey"
                  },
                  "title": "Response List Keys Api V1 Api Keys Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/api-keys/{api_key_id}": {
      "delete": {
        "tags": ["API Keys"],
        "summary": "Delete Api Key",
        "description": "Delete an API Key by ID.",
        "operationId": "delete_api_key_api_v1_api_keys__api_key_id__delete",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "api_key_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Api Key Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["API Keys"],
        "summary": "Update Existing Api Key",
        "description": "Update name of an existing API Key.",
        "operationId": "update_existing_api_key_api_v1_api_keys__api_key_id__put",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "api_key_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Api Key Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/APIKeyUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIKey"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/validate-integrations/validate-embedding-connection": {
      "post": {
        "tags": ["Validation"],
        "summary": "Validate Embedding Connection",
        "description": "Validate an embedding connection.\n\nArgs:\n    embedding_config: The embedding configuration to validate.\n    pipeline_id: If provided, the embedding connection will be validated for the pipeline.\n    user: The user to validate the embedding connection for.\n    db: The database session.\n\nReturns:\n    A BaseConnectionValidation object indicating the result of the validation.",
        "operationId": "validate_embedding_connection_api_v1_validate_integrations_validate_embedding_connection_post",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "pipeline_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Pipeline Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/AzureOpenAIEmbeddingConfig"
                  },
                  {
                    "$ref": "#/components/schemas/CohereEmbeddingConfig"
                  },
                  {
                    "$ref": "#/components/schemas/GeminiEmbeddingConfig"
                  },
                  {
                    "$ref": "#/components/schemas/HuggingFaceInferenceAPIEmbeddingConfig"
                  },
                  {
                    "$ref": "#/components/schemas/OpenAIEmbeddingConfig"
                  },
                  {
                    "$ref": "#/components/schemas/VertexAIEmbeddingConfig"
                  },
                  {
                    "$ref": "#/components/schemas/BedrockEmbeddingConfig"
                  }
                ],
                "discriminator": {
                  "propertyName": "type",
                  "mapping": {
                    "AZURE_EMBEDDING": "#/components/schemas/AzureOpenAIEmbeddingConfig",
                    "COHERE_EMBEDDING": "#/components/schemas/CohereEmbeddingConfig",
                    "GEMINI_EMBEDDING": "#/components/schemas/GeminiEmbeddingConfig",
                    "HUGGINGFACE_API_EMBEDDING": "#/components/schemas/HuggingFaceInferenceAPIEmbeddingConfig",
                    "OPENAI_EMBEDDING": "#/components/schemas/OpenAIEmbeddingConfig",
                    "VERTEXAI_EMBEDDING": "#/components/schemas/VertexAIEmbeddingConfig",
                    "BEDROCK_EMBEDDING": "#/components/schemas/BedrockEmbeddingConfig"
                  }
                },
                "title": "Embedding Config"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseConnectionValidation"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/validate-integrations/validate-data-source-connection": {
      "post": {
        "tags": ["Validation"],
        "summary": "Validate Data Source Connection",
        "description": "Validate a data source connection.",
        "operationId": "validate_data_source_connection_api_v1_validate_integrations_validate_data_source_connection_post",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "existing_data_source_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Existing Data Source Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataSourceCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseConnectionValidation"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/validate-integrations/validate-data-sink-connection": {
      "post": {
        "tags": ["Validation"],
        "summary": "Validate Data Sink Connection",
        "description": "Validate a data sink connection.",
        "operationId": "validate_data_sink_connection_api_v1_validate_integrations_validate_data_sink_connection_post",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataSinkCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseConnectionValidation"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/data-sinks": {
      "get": {
        "tags": ["Data Sinks"],
        "summary": "List Data Sinks",
        "description": "List data sinks for a given project.",
        "operationId": "list_data_sinks_api_v1_data_sinks_get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            }
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataSink"
                  },
                  "title": "Response List Data Sinks Api V1 Data Sinks Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Data Sinks"],
        "summary": "Create Data Sink",
        "description": "Create a new data sink.",
        "operationId": "create_data_sink_api_v1_data_sinks_post",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            }
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataSinkCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSink"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Data Sinks"],
        "summary": "Upsert Data Sink",
        "description": "Upserts a data sink.\nUpdates if a data sink with the same name and project_id already exists. Otherwise, creates a new data sink.",
        "operationId": "upsert_data_sink_api_v1_data_sinks_put",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            }
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataSinkCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSink"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/data-sinks/{data_sink_id}": {
      "get": {
        "tags": ["Data Sinks"],
        "summary": "Get Data Sink",
        "description": "Get a data sink by ID.",
        "operationId": "get_data_sink_api_v1_data_sinks__data_sink_id__get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "data_sink_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Data Sink Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSink"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Data Sinks"],
        "summary": "Update Data Sink",
        "description": "Update a data sink by ID.",
        "operationId": "update_data_sink_api_v1_data_sinks__data_sink_id__put",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "data_sink_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Data Sink Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataSinkUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSink"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Data Sinks"],
        "summary": "Delete Data Sink",
        "description": "Delete a data sink by ID.",
        "operationId": "delete_data_sink_api_v1_data_sinks__data_sink_id__delete",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "data_sink_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Data Sink Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/data-sources": {
      "get": {
        "tags": ["Data Sources"],
        "summary": "List Data Sources",
        "description": "List data sources for a given project.\nIf project_id is not provided, uses the default project.",
        "operationId": "list_data_sources_api_v1_data_sources_get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            }
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataSource"
                  },
                  "title": "Response List Data Sources Api V1 Data Sources Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Data Sources"],
        "summary": "Create Data Source",
        "description": "Create a new data source.",
        "operationId": "create_data_source_api_v1_data_sources_post",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            }
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataSourceCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSource"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Data Sources"],
        "summary": "Upsert Data Source",
        "description": "Upserts a data source.\nUpdates if a data source with the same name and project_id already exists. Otherwise, creates a new data source.",
        "operationId": "upsert_data_source_api_v1_data_sources_put",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            }
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataSourceCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSource"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/data-sources/{data_source_id}": {
      "get": {
        "tags": ["Data Sources"],
        "summary": "Get Data Source",
        "description": "Get a data source by ID.",
        "operationId": "get_data_source_api_v1_data_sources__data_source_id__get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "data_source_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Data Source Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSource"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Data Sources"],
        "summary": "Update Data Source",
        "description": "Update a data source by ID.",
        "operationId": "update_data_source_api_v1_data_sources__data_source_id__put",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "data_source_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Data Source Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataSourceUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSource"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Data Sources"],
        "summary": "Delete Data Source",
        "description": "Delete a data source by ID.",
        "operationId": "delete_data_source_api_v1_data_sources__data_source_id__delete",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "data_source_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Data Source Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/embedding-model-configs": {
      "get": {
        "tags": ["Embedding Model Configs"],
        "summary": "List Embedding Model Configs",
        "operationId": "list_embedding_model_configs_api_v1_embedding_model_configs_get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Project Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmbeddingModelConfig"
                  },
                  "title": "Response List Embedding Model Configs Api V1 Embedding Model Configs Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Embedding Model Configs"],
        "summary": "Create a new Embedding Model Configuration",
        "description": "Create a new embedding model configuration within a specified project.",
        "operationId": "create_embedding_model_config_api_v1_embedding_model_configs_post",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmbeddingModelConfigCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmbeddingModelConfig"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Embedding Model Configs"],
        "summary": "Upsert Embedding Model Config",
        "description": "Upserts an embedding model config.\nUpdates if an embedding model config with the same name and project_id already exists. Otherwise, creates a new embedding model config.",
        "operationId": "upsert_embedding_model_config_api_v1_embedding_model_configs_put",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            }
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmbeddingModelConfigUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmbeddingModelConfig"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/embedding-model-configs/{embedding_model_config_id}": {
      "put": {
        "tags": ["Embedding Model Configs"],
        "summary": "Update Embedding Model Config",
        "description": "Update an embedding model config by ID.",
        "operationId": "update_embedding_model_config_api_v1_embedding_model_configs__embedding_model_config_id__put",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "embedding_model_config_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Embedding Model Config Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmbeddingModelConfigUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmbeddingModelConfig"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Embedding Model Configs"],
        "summary": "Delete Embedding Model Config",
        "description": "Delete an embedding model config by ID.",
        "operationId": "delete_embedding_model_config_api_v1_embedding_model_configs__embedding_model_config_id__delete",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "embedding_model_config_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Embedding Model Config Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/organizations": {
      "post": {
        "tags": ["Organizations"],
        "summary": "Create Organization",
        "description": "Create a new organization.",
        "operationId": "create_organization_api_v1_organizations_post",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Organizations"],
        "summary": "Upsert Organization",
        "description": "Upsert a new organization.",
        "operationId": "upsert_organization_api_v1_organizations_put",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Organizations"],
        "summary": "List Organizations",
        "description": "List organizations for a user.",
        "operationId": "list_organizations_api_v1_organizations_get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organization"
                  },
                  "title": "Response List Organizations Api V1 Organizations Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/organizations/default": {
      "put": {
        "tags": ["Organizations"],
        "summary": "Set Default Organization",
        "description": "Set the default organization for the user.",
        "operationId": "set_default_organization_api_v1_organizations_default_put",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DefaultOrganizationUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Organizations"],
        "summary": "Get Default Organization",
        "description": "Get the default organization for the user.",
        "operationId": "get_default_organization_api_v1_organizations_default_get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/organizations/{organization_id}": {
      "get": {
        "tags": ["Organizations"],
        "summary": "Get Organization",
        "description": "Get an organization by ID.",
        "operationId": "get_organization_api_v1_organizations__organization_id__get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Organizations"],
        "summary": "Update Organization",
        "description": "Update an existing organization.",
        "operationId": "update_organization_api_v1_organizations__organization_id__put",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Organizations"],
        "summary": "Delete Organization",
        "description": "Delete an organization by ID.",
        "operationId": "delete_organization_api_v1_organizations__organization_id__delete",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/organizations/{organization_id}/usage": {
      "get": {
        "tags": ["Organizations"],
        "summary": "Get Organization Usage",
        "description": "Get usage for a project",
        "operationId": "get_organization_usage_api_v1_organizations__organization_id__usage_get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntervalUsageAndPlan"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/organizations/{organization_id}/users": {
      "get": {
        "tags": ["Organizations"],
        "summary": "List Organization Users",
        "description": "Get all users in an organization.",
        "operationId": "list_organization_users_api_v1_organizations__organization_id__users_get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserOrganization"
                  },
                  "title": "Response List Organization Users Api V1 Organizations  Organization Id  Users Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Organizations"],
        "summary": "Add Users To Organization",
        "description": "Add a user to an organization.",
        "operationId": "add_users_to_organization_api_v1_organizations__organization_id__users_put",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserOrganizationCreate"
                },
                "title": "Payload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserOrganization"
                  },
                  "title": "Response Add Users To Organization Api V1 Organizations  Organization Id  Users Put"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/organizations/{organization_id}/users/{member_user_id}": {
      "delete": {
        "tags": ["Organizations"],
        "summary": "Remove Users From Organization",
        "description": "Remove users from an organization by email.",
        "operationId": "remove_users_from_organization_api_v1_organizations__organization_id__users__member_user_id__delete",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Organization Id"
            }
          },
          {
            "name": "member_user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Member User Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/organizations/{organization_id}/users/remove": {
      "put": {
        "tags": ["Organizations"],
        "summary": "Batch Remove Users From Organization",
        "description": "Remove a batch of users from an organization.",
        "operationId": "batch_remove_users_from_organization_api_v1_organizations__organization_id__users_remove_put",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserOrganizationDelete"
                },
                "title": "Payload"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/organizations/{organization_id}/roles": {
      "get": {
        "tags": ["Organizations"],
        "summary": "List Roles",
        "description": "List all roles in an organization.",
        "operationId": "list_roles_api_v1_organizations__organization_id__roles_get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Role"
                  },
                  "title": "Response List Roles Api V1 Organizations  Organization Id  Roles Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/organizations/{organization_id}/users/roles": {
      "put": {
        "tags": ["Organizations"],
        "summary": "Assign Role To User In Organization",
        "description": "Assign a role to a user in an organization.",
        "operationId": "assign_role_to_user_in_organization_api_v1_organizations__organization_id__users_roles_put",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserOrganizationRoleCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserOrganizationRole"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Organizations"],
        "summary": "Get User Role",
        "description": "Get the role of a user in an organization.",
        "operationId": "get_user_role_api_v1_organizations__organization_id__users_roles_get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/UserOrganizationRole"
                    },
                    {
                      "type": "null"
                    }
                  ],
                  "title": "Response Get User Role Api V1 Organizations  Organization Id  Users Roles Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/organizations/{organization_id}/users/{user_id}/projects": {
      "get": {
        "tags": ["Organizations"],
        "summary": "List Projects By User",
        "description": "List all projects for a user in an organization.",
        "operationId": "list_projects_by_user_api_v1_organizations__organization_id__users__user_id__projects_get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Organization Id"
            }
          },
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "User Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Project"
                  },
                  "title": "Response List Projects By User Api V1 Organizations  Organization Id  Users  User Id  Projects Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Organizations"],
        "summary": "Add User To Project",
        "description": "Add a user to a project.",
        "operationId": "add_user_to_project_api_v1_organizations__organization_id__users__user_id__projects_put",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "User Id"
            }
          },
          {
            "name": "project_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/organizations/{organization_id}/users/{user_id}/projects/{project_id}": {
      "delete": {
        "tags": ["Organizations"],
        "summary": "Remove User From Project",
        "description": "Remove a user from a project.",
        "operationId": "remove_user_from_project_api_v1_organizations__organization_id__users__user_id__projects__project_id__delete",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Organization Id"
            }
          },
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "User Id"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/projects": {
      "get": {
        "tags": ["Projects"],
        "summary": "List Projects",
        "description": "List projects or get one by name",
        "operationId": "list_projects_api_v1_projects_get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "project_name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Name"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Project"
                  },
                  "title": "Response List Projects Api V1 Projects Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Projects"],
        "summary": "Create Project",
        "description": "Create a new project.",
        "operationId": "create_project_api_v1_projects_post",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Projects"],
        "summary": "Upsert Project",
        "description": "Upsert a project.\nUpdates if a project with the same name already exists. Otherwise, creates a new project.",
        "operationId": "upsert_project_api_v1_projects_put",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}": {
      "delete": {
        "tags": ["Projects"],
        "summary": "Delete Project",
        "description": "Delete a project by ID.",
        "operationId": "delete_project_api_v1_projects__project_id__delete",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            }
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Projects"],
        "summary": "Get Project",
        "description": "Get a project by ID.",
        "operationId": "get_project_api_v1_projects__project_id__get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            }
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Projects"],
        "summary": "Update Existing Project",
        "description": "Update an existing project.",
        "operationId": "update_existing_project_api_v1_projects__project_id__put",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            }
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/usage": {
      "get": {
        "tags": ["Projects"],
        "summary": "Get Project Usage",
        "description": "Get usage for a project",
        "operationId": "get_project_usage_api_v1_projects__project_id__usage_get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            }
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntervalUsageAndPlan"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/eval/dataset": {
      "post": {
        "tags": ["Projects"],
        "summary": "Create Eval Dataset For Project",
        "description": "Create a new eval dataset for a project.",
        "operationId": "create_eval_dataset_for_project_api_v1_projects__project_id__eval_dataset_post",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            }
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EvalDatasetCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvalDataset"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Projects"],
        "summary": "List Datasets For Project",
        "description": "List eval datasets for a project.",
        "operationId": "list_datasets_for_project_api_v1_projects__project_id__eval_dataset_get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            }
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EvalDataset"
                  },
                  "title": "Response List Datasets For Project Api V1 Projects  Project Id  Eval Dataset Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/localevalset": {
      "post": {
        "tags": ["Projects"],
        "summary": "Create Local Eval Set For Project",
        "description": "Create a new local eval set.",
        "operationId": "create_local_eval_set_for_project_api_v1_projects__project_id__localevalset_post",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            }
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LocalEvalSetCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LocalEvalResults"
                  },
                  "title": "Response Create Local Eval Set For Project Api V1 Projects  Project Id  Localevalset Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/localeval": {
      "get": {
        "tags": ["Projects"],
        "summary": "List Local Evals For Project",
        "description": "List local eval results for a project.",
        "operationId": "list_local_evals_for_project_api_v1_projects__project_id__localeval_get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            }
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LocalEvalResults"
                  },
                  "title": "Response List Local Evals For Project Api V1 Projects  Project Id  Localeval Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/localevalsets": {
      "get": {
        "tags": ["Projects"],
        "summary": "List Local Eval Sets For Project",
        "description": "List local eval sets for a project.",
        "operationId": "list_local_eval_sets_for_project_api_v1_projects__project_id__localevalsets_get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            }
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LocalEvalSets"
                  },
                  "title": "Response List Local Eval Sets For Project Api V1 Projects  Project Id  Localevalsets Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/localevalset/{local_eval_set_id}": {
      "delete": {
        "tags": ["Projects"],
        "summary": "Delete Local Eval Set",
        "description": "Delete a local eval set.",
        "operationId": "delete_local_eval_set_api_v1_projects__project_id__localevalset__local_eval_set_id__delete",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            }
          },
          {
            "name": "local_eval_set_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Local Eval Set Id"
            }
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/prompts": {
      "post": {
        "tags": ["Projects"],
        "summary": "Create Prompt Mixin Prompts",
        "description": "Create a new PromptMixin prompt set.",
        "operationId": "create_prompt_mixin_prompts_api_v1_projects__project_id__prompts_post",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            }
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PromptMixinPrompts"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromptMixinPrompts"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Projects"],
        "summary": "List Promptmixin Prompts",
        "description": "List PromptMixin prompt sets for a project.",
        "operationId": "list_promptmixin_prompts_api_v1_projects__project_id__prompts_get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            }
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PromptMixinPrompts"
                  },
                  "title": "Response List Promptmixin Prompts Api V1 Projects  Project Id  Prompts Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/projects/{project_id}/prompts/{prompt_set_id}": {
      "put": {
        "tags": ["Projects"],
        "summary": "Update Promptmixin Prompts",
        "description": "Update a PromptMixin prompt set.",
        "operationId": "update_promptmixin_prompts_api_v1_projects__project_id__prompts__prompt_set_id__put",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            }
          },
          {
            "name": "prompt_set_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Prompt Set Id"
            }
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PromptMixinPrompts"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromptMixinPrompts"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Projects"],
        "summary": "Delete Prompt Mixin Prompts",
        "description": "Delete a PromptMixin prompt set.",
        "operationId": "delete_prompt_mixin_prompts_api_v1_projects__project_id__prompts__prompt_set_id__delete",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            }
          },
          {
            "name": "prompt_set_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Prompt Set Id"
            }
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/files/{id}": {
      "get": {
        "tags": ["Files"],
        "summary": "Get File",
        "description": "Read File metadata objects.",
        "operationId": "get_file_api_v1_files__id__get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          },
          {
            "name": "project_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            }
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Files"],
        "summary": "Delete File",
        "description": "Delete the file from S3.",
        "operationId": "delete_file_api_v1_files__id__delete",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          },
          {
            "name": "project_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            }
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/files": {
      "get": {
        "tags": ["Files"],
        "summary": "List Files",
        "description": "Read File metadata objects.",
        "operationId": "list_files_api_v1_files_get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            }
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/File"
                  },
                  "title": "Response List Files Api V1 Files Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Files"],
        "summary": "Generate Presigned Url",
        "description": "Create a presigned url for uploading a file.",
        "operationId": "generate_presigned_url_api_v1_files_put",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "expires_at_seconds",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Expires At Seconds"
            }
          },
          {
            "name": "project_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            }
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PresignedUrl"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Files"],
        "summary": "Upload File",
        "description": "Upload a file to S3.",
        "operationId": "upload_file_api_v1_files_post",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "external_file_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "External File Id"
            }
          },
          {
            "name": "project_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            }
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_upload_file_api_v1_files_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/files/sync": {
      "put": {
        "tags": ["Files"],
        "summary": "Sync Files",
        "description": "Sync Files API against file contents uploaded via S3 presigned urls.",
        "operationId": "sync_files_api_v1_files_sync_put",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            }
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/File"
                  },
                  "title": "Response Sync Files Api V1 Files Sync Put"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/files/upload_from_url": {
      "put": {
        "tags": ["Files"],
        "summary": "Upload File From Url",
        "description": "Upload a file to S3 from a URL.",
        "operationId": "upload_file_from_url_api_v1_files_upload_from_url_put",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            }
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileCreateFromUrl"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/files/{id}/content": {
      "get": {
        "tags": ["Files"],
        "summary": "Read File Content",
        "description": "Returns a presigned url to read the file content.",
        "operationId": "read_file_content_api_v1_files__id__content_get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          },
          {
            "name": "expires_at_seconds",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Expires At Seconds"
            }
          },
          {
            "name": "project_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            }
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PresignedUrl"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/files/{id}/page_screenshots": {
      "get": {
        "tags": ["Files"],
        "summary": "List File Page Screenshots",
        "description": "List metadata for all screenshots of pages from a file.",
        "operationId": "list_file_page_screenshots_api_v1_files__id__page_screenshots_get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          },
          {
            "name": "project_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            }
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PageScreenshotMetadata"
                  },
                  "title": "Response List File Page Screenshots Api V1 Files  Id  Page Screenshots Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/files/{id}/page_screenshots/{page_index}": {
      "get": {
        "tags": ["Files"],
        "summary": "Get File Page Screenshot",
        "description": "Get screenshot of a page from a file.",
        "operationId": "get_file_page_screenshot_api_v1_files__id__page_screenshots__page_index__get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          },
          {
            "name": "page_index",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Page Index"
            }
          },
          {
            "name": "project_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            }
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/files/{id}/page-figures": {
      "get": {
        "tags": ["Files"],
        "summary": "List File Pages Figures",
        "operationId": "list_file_pages_figures_api_v1_files__id__page_figures_get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          },
          {
            "name": "project_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            }
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PageFigureMetadata"
                  },
                  "title": "Response List File Pages Figures Api V1 Files  Id  Page Figures Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/files/{id}/page-figures/{page_index}": {
      "get": {
        "tags": ["Files"],
        "summary": "List File Page Figures",
        "operationId": "list_file_page_figures_api_v1_files__id__page_figures__page_index__get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          },
          {
            "name": "page_index",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Page Index"
            }
          },
          {
            "name": "project_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            }
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PageFigureMetadata"
                  },
                  "title": "Response List File Page Figures Api V1 Files  Id  Page Figures  Page Index  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/files/{id}/page-figures/{page_index}/{figure_name}": {
      "get": {
        "tags": ["Files"],
        "summary": "Get File Page Figure",
        "operationId": "get_file_page_figure_api_v1_files__id__page_figures__page_index___figure_name__get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          },
          {
            "name": "page_index",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Page Index"
            }
          },
          {
            "name": "figure_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Figure Name"
            }
          },
          {
            "name": "project_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            }
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/pipelines": {
      "get": {
        "tags": ["Pipelines"],
        "summary": "Search Pipelines",
        "description": "Search for pipelines by various parameters.",
        "operationId": "search_pipelines_api_v1_pipelines_get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            }
          },
          {
            "name": "project_name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Name"
            }
          },
          {
            "name": "pipeline_name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Pipeline Name"
            }
          },
          {
            "name": "pipeline_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/PipelineType"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Pipeline Type"
            }
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pipeline"
                  },
                  "title": "Response Search Pipelines Api V1 Pipelines Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Pipelines"],
        "summary": "Create Pipeline",
        "description": "Create a new pipeline for a project.",
        "operationId": "create_pipeline_api_v1_pipelines_post",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            }
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PipelineCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pipeline"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Pipelines"],
        "summary": "Upsert Pipeline",
        "description": "Upsert a pipeline for a project.\nUpdates if a pipeline with the same name and project_id already exists. Otherwise, creates a new pipeline.",
        "operationId": "upsert_pipeline_api_v1_pipelines_put",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            }
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PipelineCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pipeline"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/pipelines/{pipeline_id}": {
      "get": {
        "tags": ["Pipelines"],
        "summary": "Get Pipeline",
        "description": "Get a pipeline by ID for a given project.",
        "operationId": "get_pipeline_api_v1_pipelines__pipeline_id__get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "pipeline_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Pipeline Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pipeline"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Pipelines"],
        "summary": "Update Existing Pipeline",
        "description": "Update an existing pipeline for a project.",
        "operationId": "update_existing_pipeline_api_v1_pipelines__pipeline_id__put",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "pipeline_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Pipeline Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PipelineUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pipeline"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Pipelines"],
        "summary": "Delete Pipeline",
        "description": "Delete a pipeline by ID.",
        "operationId": "delete_pipeline_api_v1_pipelines__pipeline_id__delete",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "pipeline_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Pipeline Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/pipelines/{pipeline_id}/status": {
      "get": {
        "tags": ["Pipelines"],
        "summary": "Get Pipeline Status",
        "description": "Get the status of a pipeline by ID.",
        "operationId": "get_pipeline_status_api_v1_pipelines__pipeline_id__status_get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "pipeline_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Pipeline Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagedIngestionStatusResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/pipelines/{pipeline_id}/sync": {
      "post": {
        "tags": ["Pipelines"],
        "summary": "Sync Pipeline",
        "description": "Run ingestion for the pipeline by incrementally updating the data-sink with upstream changes from data-sources & files.",
        "operationId": "sync_pipeline_api_v1_pipelines__pipeline_id__sync_post",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "pipeline_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Pipeline Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pipeline"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/pipelines/{pipeline_id}/sync/cancel": {
      "post": {
        "tags": ["Pipelines"],
        "summary": "Cancel Pipeline Sync",
        "operationId": "cancel_pipeline_sync_api_v1_pipelines__pipeline_id__sync_cancel_post",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "pipeline_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Pipeline Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pipeline"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/pipelines/{pipeline_id}/copy": {
      "post": {
        "tags": ["Pipelines"],
        "summary": "Copy Pipeline",
        "description": "Copy a pipeline by ID.",
        "operationId": "copy_pipeline_api_v1_pipelines__pipeline_id__copy_post",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "pipeline_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Pipeline Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pipeline"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/pipelines/{pipeline_id}/eval-datasets/{eval_dataset_id}/execute": {
      "post": {
        "tags": ["Pipelines"],
        "summary": "Execute Eval Dataset",
        "description": "Execute a dataset.",
        "operationId": "execute_eval_dataset_api_v1_pipelines__pipeline_id__eval_datasets__eval_dataset_id__execute_post",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "eval_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Eval Dataset Id"
            }
          },
          {
            "name": "pipeline_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Pipeline Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EvalExecutionCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvalDatasetJobRecord"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Pipelines"],
        "summary": "Get Eval Dataset Executions",
        "description": "Get the status of an EvalDatasetExecution.",
        "operationId": "get_eval_dataset_executions_api_v1_pipelines__pipeline_id__eval_datasets__eval_dataset_id__execute_get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "eval_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Eval Dataset Id"
            }
          },
          {
            "name": "pipeline_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Pipeline Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EvalDatasetJobRecord"
                  },
                  "title": "Response Get Eval Dataset Executions Api V1 Pipelines  Pipeline Id  Eval Datasets  Eval Dataset Id  Execute Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/pipelines/{pipeline_id}/eval-datasets/{eval_dataset_id}/execute/result": {
      "get": {
        "tags": ["Pipelines"],
        "summary": "Get Eval Dataset Execution Result",
        "description": "Get the result of an EvalDatasetExecution.\nIf eval_question_ids is specified, only the results for the specified\nquestions will be returned.\nIf any of the specified questions do not have a result, they will be ignored.",
        "operationId": "get_eval_dataset_execution_result_api_v1_pipelines__pipeline_id__eval_datasets__eval_dataset_id__execute_result_get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "eval_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Eval Dataset Id"
            }
          },
          {
            "name": "pipeline_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Pipeline Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EvalQuestionResult"
                  },
                  "title": "Response Get Eval Dataset Execution Result Api V1 Pipelines  Pipeline Id  Eval Datasets  Eval Dataset Id  Execute Result Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/pipelines/{pipeline_id}/eval-datasets/{eval_dataset_id}/execute/{eval_dataset_execution_id}": {
      "get": {
        "tags": ["Pipelines"],
        "summary": "Get Eval Dataset Execution",
        "description": "Get the status of an EvalDatasetExecution.",
        "operationId": "get_eval_dataset_execution_api_v1_pipelines__pipeline_id__eval_datasets__eval_dataset_id__execute__eval_dataset_execution_id__get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "eval_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Eval Dataset Id"
            }
          },
          {
            "name": "eval_dataset_execution_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Eval Dataset Execution Id"
            }
          },
          {
            "name": "pipeline_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Pipeline Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvalDatasetJobRecord"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/pipelines/{pipeline_id}/files": {
      "get": {
        "tags": ["Pipelines"],
        "summary": "List Pipeline Files",
        "description": "Get files for a pipeline.",
        "operationId": "list_pipeline_files_api_v1_pipelines__pipeline_id__files_get",
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "pipeline_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Pipeline Id"
            }
          },
          {
            "name": "data_source_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Data Source Id"
            }
          },
          {
            "name": "only_manually_uploaded",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Only Manually Uploaded"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PipelineFile"
                  },
                  "title": "Response List Pipeline Files Api V1 Pipelines  Pipeline Id  Files Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Pipelines"],
        "summary": "Add Files To Pipeline",
        "description": "Add files to a pipeline.",
        "operationId": "add_files_to_pipeline_api_v1_pipelines__pipeline_id__files_put",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "pipeline_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Pipeline Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PipelineFileCreate"
                },
                "title": "Pipeline File Creates"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PipelineFile"
                  },
                  "title": "Response Add Files To Pipeline Api V1 Pipelines  Pipeline Id  Files Put"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/pipelines/{pipeline_id}/files2": {
      "get": {
        "tags": ["Pipelines"],
        "summary": "List Pipeline Files2",
        "description": "Get files for a pipeline.",
        "operationId": "list_pipeline_files2_api_v1_pipelines__pipeline_id__files2_get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "pipeline_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Pipeline Id"
            }
          },
          {
            "name": "data_source_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Data Source Id"
            }
          },
          {
            "name": "only_manually_uploaded",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Only Manually Uploaded"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Offset"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListPipelineFilesResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/pipelines/{pipeline_id}/files/{file_id}/status": {
      "get": {
        "tags": ["Pipelines"],
        "summary": "Get Pipeline File Status",
        "description": "Get status of a file for a pipeline.",
        "operationId": "get_pipeline_file_status_api_v1_pipelines__pipeline_id__files__file_id__status_get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "file_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "File Id"
            }
          },
          {
            "name": "pipeline_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Pipeline Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagedIngestionStatusResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/pipelines/{pipeline_id}/files/{file_id}": {
      "put": {
        "tags": ["Pipelines"],
        "summary": "Update Pipeline File",
        "description": "Update a file for a pipeline.",
        "operationId": "update_pipeline_file_api_v1_pipelines__pipeline_id__files__file_id__put",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "file_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "File Id"
            }
          },
          {
            "name": "pipeline_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Pipeline Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PipelineFileUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFile"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Pipelines"],
        "summary": "Delete Pipeline File",
        "description": "Delete a file from a pipeline.",
        "operationId": "delete_pipeline_file_api_v1_pipelines__pipeline_id__files__file_id__delete",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "file_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "File Id"
            }
          },
          {
            "name": "pipeline_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Pipeline Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/pipelines/{pipeline_id}/metadata": {
      "put": {
        "tags": ["Pipelines"],
        "summary": "Import Pipeline Metadata",
        "description": "Import metadata for a pipeline.",
        "operationId": "import_pipeline_metadata_api_v1_pipelines__pipeline_id__metadata_put",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "pipeline_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Pipeline Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_import_pipeline_metadata_api_v1_pipelines__pipeline_id__metadata_put"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "title": "Response Import Pipeline Metadata Api V1 Pipelines  Pipeline Id  Metadata Put"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Pipelines"],
        "summary": "Delete Pipeline Files Metadata",
        "description": "Delete metadata for all files in a pipeline.",
        "operationId": "delete_pipeline_files_metadata_api_v1_pipelines__pipeline_id__metadata_delete",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "pipeline_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Pipeline Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/pipelines/{pipeline_id}/data-sources": {
      "get": {
        "tags": ["Pipelines"],
        "summary": "List Pipeline Data Sources",
        "description": "Get data sources for a pipeline.",
        "operationId": "list_pipeline_data_sources_api_v1_pipelines__pipeline_id__data_sources_get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "pipeline_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Pipeline Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PipelineDataSource"
                  },
                  "title": "Response List Pipeline Data Sources Api V1 Pipelines  Pipeline Id  Data Sources Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Pipelines"],
        "summary": "Add Data Sources To Pipeline",
        "description": "Add data sources to a pipeline.",
        "operationId": "add_data_sources_to_pipeline_api_v1_pipelines__pipeline_id__data_sources_put",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "pipeline_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Pipeline Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PipelineDataSourceCreate"
                },
                "title": "Pipeline Data Source Creates"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PipelineDataSource"
                  },
                  "title": "Response Add Data Sources To Pipeline Api V1 Pipelines  Pipeline Id  Data Sources Put"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/pipelines/{pipeline_id}/data-sources/{data_source_id}": {
      "put": {
        "tags": ["Pipelines"],
        "summary": "Update Pipeline Data Source",
        "description": "Update the configuration of a data source in a pipeline.",
        "operationId": "update_pipeline_data_source_api_v1_pipelines__pipeline_id__data_sources__data_source_id__put",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "data_source_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Data Source Id"
            }
          },
          {
            "name": "pipeline_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Pipeline Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PipelineDataSourceUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineDataSource"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Pipelines"],
        "summary": "Delete Pipeline Data Source",
        "description": "Delete a data source from a pipeline.",
        "operationId": "delete_pipeline_data_source_api_v1_pipelines__pipeline_id__data_sources__data_source_id__delete",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "data_source_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Data Source Id"
            }
          },
          {
            "name": "pipeline_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Pipeline Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/pipelines/{pipeline_id}/data-sources/{data_source_id}/sync": {
      "post": {
        "tags": ["Pipelines"],
        "summary": "Sync Pipeline Data Source",
        "description": "Run ingestion for the pipeline data source by incrementally updating the data-sink with upstream changes from data-source.",
        "operationId": "sync_pipeline_data_source_api_v1_pipelines__pipeline_id__data_sources__data_source_id__sync_post",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "data_source_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Data Source Id"
            }
          },
          {
            "name": "pipeline_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Pipeline Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pipeline"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/pipelines/{pipeline_id}/data-sources/{data_source_id}/status": {
      "get": {
        "tags": ["Pipelines"],
        "summary": "Get Pipeline Data Source Status",
        "description": "Get the status of a data source for a pipeline.",
        "operationId": "get_pipeline_data_source_status_api_v1_pipelines__pipeline_id__data_sources__data_source_id__status_get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "data_source_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Data Source Id"
            }
          },
          {
            "name": "pipeline_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Pipeline Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagedIngestionStatusResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/pipelines/{pipeline_id}/retrieve": {
      "post": {
        "tags": ["Pipelines"],
        "summary": "Run Search",
        "description": "Get retrieval results for a managed pipeline and a query",
        "operationId": "run_search_api_v1_pipelines__pipeline_id__retrieve_post",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "pipeline_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Pipeline Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RetrievalParams"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RetrieveResults"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/pipelines/{pipeline_id}/jobs": {
      "get": {
        "tags": ["Pipelines"],
        "summary": "List Pipeline Jobs",
        "description": "Get jobs for a pipeline.",
        "operationId": "list_pipeline_jobs_api_v1_pipelines__pipeline_id__jobs_get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "pipeline_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Pipeline Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PipelineDeployment"
                  },
                  "title": "Response List Pipeline Jobs Api V1 Pipelines  Pipeline Id  Jobs Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/pipelines/{pipeline_id}/jobs/{job_id}": {
      "get": {
        "tags": ["Pipelines"],
        "summary": "Get Pipeline Job",
        "description": "Get a job for a pipeline.",
        "operationId": "get_pipeline_job_api_v1_pipelines__pipeline_id__jobs__job_id__get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Job Id"
            }
          },
          {
            "name": "pipeline_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Pipeline Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineDeployment"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/pipelines/{pipeline_id}/playground-session": {
      "get": {
        "tags": ["Pipelines"],
        "summary": "Get Playground Session",
        "description": "Get a playground session for a user and pipeline.",
        "operationId": "get_playground_session_api_v1_pipelines__pipeline_id__playground_session_get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "pipeline_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Pipeline Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaygroundSession"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/pipelines/{pipeline_id}/chat": {
      "post": {
        "tags": ["Pipelines"],
        "summary": "Chat",
        "description": "Make a retrieval query + chat completion for a managed pipeline.",
        "operationId": "chat_api_v1_pipelines__pipeline_id__chat_post",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "pipeline_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Pipeline Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatInputParams"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/pipelines/{pipeline_id}/documents": {
      "post": {
        "tags": ["Pipelines"],
        "summary": "Create Batch Pipeline Documents",
        "description": "Batch create documents for a pipeline.",
        "operationId": "create_batch_pipeline_documents_api_v1_pipelines__pipeline_id__documents_post",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "pipeline_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Pipeline Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CloudDocumentCreate"
                },
                "title": "Documents"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CloudDocument"
                  },
                  "title": "Response Create Batch Pipeline Documents Api V1 Pipelines  Pipeline Id  Documents Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Pipelines"],
        "summary": "List Pipeline Documents",
        "description": "Return a list of documents for a pipeline.",
        "operationId": "list_pipeline_documents_api_v1_pipelines__pipeline_id__documents_get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "pipeline_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Pipeline Id"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Skip"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 10,
              "title": "Limit"
            }
          },
          {
            "name": "file_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "File Id"
            }
          },
          {
            "name": "only_direct_upload",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "default": false,
              "title": "Only Direct Upload"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CloudDocument"
                  },
                  "title": "Response List Pipeline Documents Api V1 Pipelines  Pipeline Id  Documents Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Pipelines"],
        "summary": "Upsert Batch Pipeline Documents",
        "description": "Batch create or update a document for a pipeline.",
        "operationId": "upsert_batch_pipeline_documents_api_v1_pipelines__pipeline_id__documents_put",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "pipeline_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Pipeline Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CloudDocumentCreate"
                },
                "title": "Documents"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CloudDocument"
                  },
                  "title": "Response Upsert Batch Pipeline Documents Api V1 Pipelines  Pipeline Id  Documents Put"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/pipelines/{pipeline_id}/documents/{document_id}": {
      "get": {
        "tags": ["Pipelines"],
        "summary": "Get Pipeline Document",
        "description": "Return a single document for a pipeline.",
        "operationId": "get_pipeline_document_api_v1_pipelines__pipeline_id__documents__document_id__get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "document_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Document Id"
            }
          },
          {
            "name": "pipeline_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Pipeline Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CloudDocument"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Pipelines"],
        "summary": "Delete Pipeline Document",
        "description": "Delete a document for a pipeline.",
        "operationId": "delete_pipeline_document_api_v1_pipelines__pipeline_id__documents__document_id__delete",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "document_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Document Id"
            }
          },
          {
            "name": "pipeline_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Pipeline Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/pipelines/{pipeline_id}/documents/{document_id}/status": {
      "get": {
        "tags": ["Pipelines"],
        "summary": "Get Pipeline Document Status",
        "description": "Return a single document for a pipeline.",
        "operationId": "get_pipeline_document_status_api_v1_pipelines__pipeline_id__documents__document_id__status_get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "document_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Document Id"
            }
          },
          {
            "name": "pipeline_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Pipeline Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagedIngestionStatusResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/pipelines/{pipeline_id}/documents/{document_id}/chunks": {
      "get": {
        "tags": ["Pipelines"],
        "summary": "List Pipeline Document Chunks",
        "description": "Return a list of chunks for a pipeline document.",
        "operationId": "list_pipeline_document_chunks_api_v1_pipelines__pipeline_id__documents__document_id__chunks_get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "document_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Document Id"
            }
          },
          {
            "name": "pipeline_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Pipeline Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TextNode"
                  },
                  "title": "Response List Pipeline Document Chunks Api V1 Pipelines  Pipeline Id  Documents  Document Id  Chunks Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/retrievers": {
      "post": {
        "tags": ["Retrievers"],
        "summary": "Create Retriever",
        "description": "Create a new Retriever.",
        "operationId": "create_retriever_api_v1_retrievers_post",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            }
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RetrieverCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Retriever"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Retrievers"],
        "summary": "Upsert Retriever",
        "description": "Upsert a new Retriever.",
        "operationId": "upsert_retriever_api_v1_retrievers_put",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            }
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RetrieverCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Retriever"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Retrievers"],
        "summary": "List Retrievers",
        "description": "List Retrievers for a project.",
        "operationId": "list_retrievers_api_v1_retrievers_get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Name"
            }
          },
          {
            "name": "project_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            }
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Retriever"
                  },
                  "title": "Response List Retrievers Api V1 Retrievers Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/retrievers/{retriever_id}": {
      "get": {
        "tags": ["Retrievers"],
        "summary": "Get Retriever",
        "description": "Get a Retriever by ID.",
        "operationId": "get_retriever_api_v1_retrievers__retriever_id__get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "retriever_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Retriever Id"
            }
          },
          {
            "name": "project_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            }
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Retriever"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Retrievers"],
        "summary": "Update Retriever",
        "description": "Update an existing Retriever.",
        "operationId": "update_retriever_api_v1_retrievers__retriever_id__put",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "retriever_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Retriever Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RetrieverUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Retriever"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Retrievers"],
        "summary": "Delete Retriever",
        "description": "Delete a Retriever by ID.",
        "operationId": "delete_retriever_api_v1_retrievers__retriever_id__delete",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "retriever_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Retriever Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/retrievers/{retriever_id}/retrieve": {
      "post": {
        "tags": ["Retrievers"],
        "summary": "Retrieve",
        "description": "Retrieve data using a Retriever.",
        "operationId": "retrieve_api_v1_retrievers__retriever_id__retrieve_post",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "retriever_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Retriever Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompositeRetrievalParams"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompositeRetrievalResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/jobs/": {
      "get": {
        "tags": ["Jobs"],
        "summary": "Get Jobs",
        "description": "Get jobs for a project.",
        "operationId": "get_jobs_api_v1_jobs__get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "job_name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Job Name"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "default": 50,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          },
          {
            "name": "include_usage_metrics",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Include Usage Metrics"
            }
          },
          {
            "name": "project_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            }
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedJobsHistoryWithMetrics"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/evals/datasets/{dataset_id}": {
      "get": {
        "tags": ["Evals"],
        "summary": "Get Dataset",
        "description": "Get a dataset by ID.",
        "operationId": "get_dataset_api_v1_evals_datasets__dataset_id__get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Dataset Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvalDataset"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Evals"],
        "summary": "Update Dataset",
        "description": "Update a dataset.",
        "operationId": "update_dataset_api_v1_evals_datasets__dataset_id__put",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Dataset Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EvalDatasetUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvalDataset"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Evals"],
        "summary": "Delete Dataset",
        "description": "Delete a dataset.",
        "operationId": "delete_dataset_api_v1_evals_datasets__dataset_id__delete",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Dataset Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/evals/datasets/{dataset_id}/question": {
      "post": {
        "tags": ["Evals"],
        "summary": "Create Question",
        "description": "Create a new question.",
        "operationId": "create_question_api_v1_evals_datasets__dataset_id__question_post",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Dataset Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EvalQuestionCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvalQuestion"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Evals"],
        "summary": "List Questions",
        "description": "List questions for a dataset.",
        "operationId": "list_questions_api_v1_evals_datasets__dataset_id__question_get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Dataset Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EvalQuestion"
                  },
                  "title": "Response List Questions Api V1 Evals Datasets  Dataset Id  Question Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/evals/datasets/{dataset_id}/questions": {
      "post": {
        "tags": ["Evals"],
        "summary": "Create Questions",
        "description": "Create a new question.",
        "operationId": "create_questions_api_v1_evals_datasets__dataset_id__questions_post",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Dataset Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EvalQuestionCreate"
                },
                "title": "Payload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EvalQuestion"
                  },
                  "title": "Response Create Questions Api V1 Evals Datasets  Dataset Id  Questions Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/evals/questions/{question_id}": {
      "get": {
        "tags": ["Evals"],
        "summary": "Get Question",
        "description": "Get a question by ID.",
        "operationId": "get_question_api_v1_evals_questions__question_id__get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "question_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Question Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvalQuestion"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Evals"],
        "summary": "Replace Question",
        "description": "Replace a question.",
        "operationId": "replace_question_api_v1_evals_questions__question_id__put",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "question_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Question Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EvalQuestionCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvalQuestion"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Evals"],
        "summary": "Delete Question",
        "description": "Delete a question.",
        "operationId": "delete_question_api_v1_evals_questions__question_id__delete",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "question_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Question Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/evals/models": {
      "get": {
        "tags": ["Evals"],
        "summary": "List Supported Models",
        "description": "List supported models.",
        "operationId": "list_supported_models_api_v1_evals_models_get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SupportedLLMModel"
                  },
                  "title": "Response List Supported Models Api V1 Evals Models Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/parsing/job/{job_id}/result/image/{name}": {
      "get": {
        "tags": ["Parsing"],
        "summary": "Get Job Image Result",
        "description": "Get a job by id",
        "operationId": "get_job_image_result_api_v1_parsing_job__job_id__result_image__name__get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Job Id"
            }
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Name"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "image/jpeg": {}
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/parsing/supported_file_extensions": {
      "get": {
        "tags": ["Parsing"],
        "summary": "Get Supported File Extensions",
        "description": "Get a list of supported file extensions",
        "operationId": "get_supported_file_extensions_api_v1_parsing_supported_file_extensions_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/LlamaParseSupportedFileExtensions"
                  },
                  "type": "array",
                  "title": "Response Get Supported File Extensions Api V1 Parsing Supported File Extensions Get"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/parsing/screenshot": {
      "post": {
        "tags": ["Parsing"],
        "summary": "Screenshot",
        "operationId": "screenshot_api_v1_parsing_screenshot_post",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "project_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_screenshot_api_v1_parsing_screenshot_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParsingJob"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/parsing/upload": {
      "post": {
        "tags": ["Parsing"],
        "summary": "Upload File",
        "description": "Upload a file to s3 and create a job. return a job id",
        "operationId": "upload_file_api_v1_parsing_upload_post",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "project_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_upload_file_api_v1_parsing_upload_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParsingJob"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/parsing/usage": {
      "get": {
        "tags": ["Parsing"],
        "summary": "Usage",
        "description": "DEPRECATED: use either /organizations/{organization_id}/usage or /projects/{project_id}/usage instead\nGet parsing usage for user",
        "operationId": "usage_api_v1_parsing_usage_get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParsingUsage"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/parsing/job/{job_id}": {
      "get": {
        "tags": ["Parsing"],
        "summary": "Get Job",
        "description": "Get a job by id",
        "operationId": "get_job_api_v1_parsing_job__job_id__get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Job Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParsingJob"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/parsing/job/{job_id}/details": {
      "get": {
        "tags": ["Parsing"],
        "summary": "Get Parsing Job Details",
        "description": "Get a job by id",
        "operationId": "get_parsing_job_details_api_v1_parsing_job__job_id__details_get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Job Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get Parsing Job Details Api V1 Parsing Job  Job Id  Details Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/parsing/job/{job_id}/result/text": {
      "get": {
        "tags": ["Parsing"],
        "summary": "Get Job Text Result",
        "description": "Get a job by id",
        "operationId": "get_job_text_result_api_v1_parsing_job__job_id__result_text_get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Job Id"
            }
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParsingJobTextResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/parsing/job/{job_id}/result/raw/text": {
      "get": {
        "tags": ["Parsing"],
        "summary": "Get Job Raw Text Result",
        "description": "Get a job by id",
        "operationId": "get_job_raw_text_result_api_v1_parsing_job__job_id__result_raw_text_get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Job Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/parsing/job/{job_id}/result/pdf": {
      "get": {
        "tags": ["Parsing"],
        "summary": "Get Job Raw Text Result",
        "description": "Get a job by id",
        "operationId": "get_job_raw_text_result_api_v1_parsing_job__job_id__result_pdf_get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Job Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/parsing/job/{job_id}/result/raw/pdf": {
      "get": {
        "tags": ["Parsing"],
        "summary": "Get Job Raw Text Result",
        "description": "Get a job by id",
        "operationId": "get_job_raw_text_result_api_v1_parsing_job__job_id__result_raw_pdf_get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Job Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/parsing/job/{job_id}/result/structured": {
      "get": {
        "tags": ["Parsing"],
        "summary": "Get Job Structured Result",
        "description": "Get a job by id",
        "operationId": "get_job_structured_result_api_v1_parsing_job__job_id__result_structured_get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Job Id"
            }
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParsingJobStructuredResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/parsing/job/{job_id}/result/raw/structured": {
      "get": {
        "tags": ["Parsing"],
        "summary": "Get Job Raw Structured Result",
        "description": "Get a job by id",
        "operationId": "get_job_raw_structured_result_api_v1_parsing_job__job_id__result_raw_structured_get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Job Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/parsing/job/{job_id}/result/xlsx": {
      "get": {
        "tags": ["Parsing"],
        "summary": "Get Job Raw Xlsx Result",
        "description": "Get a job by id",
        "operationId": "get_job_raw_xlsx_result_api_v1_parsing_job__job_id__result_xlsx_get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Job Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/parsing/job/{job_id}/result/raw/xlsx": {
      "get": {
        "tags": ["Parsing"],
        "summary": "Get Job Raw Xlsx Result",
        "description": "Get a job by id",
        "operationId": "get_job_raw_xlsx_result_api_v1_parsing_job__job_id__result_raw_xlsx_get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Job Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/parsing/job/{job_id}/result/markdown": {
      "get": {
        "tags": ["Parsing"],
        "summary": "Get Job Result",
        "description": "Get a job by id",
        "operationId": "get_job_result_api_v1_parsing_job__job_id__result_markdown_get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Job Id"
            }
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParsingJobMarkdownResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/parsing/job/{job_id}/result/raw/markdown": {
      "get": {
        "tags": ["Parsing"],
        "summary": "Get Job Raw Md Result",
        "description": "Get a job by id",
        "operationId": "get_job_raw_md_result_api_v1_parsing_job__job_id__result_raw_markdown_get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Job Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/parsing/job/{job_id}/result/json": {
      "get": {
        "tags": ["Parsing"],
        "summary": "Get Job Json Result",
        "description": "Get a job by id",
        "operationId": "get_job_json_result_api_v1_parsing_job__job_id__result_json_get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Job Id"
            }
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParsingJobJsonResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/parsing/job/{job_id}/result/raw/json": {
      "get": {
        "tags": ["Parsing"],
        "summary": "Get Job Json Raw Result",
        "description": "Get a job by id",
        "operationId": "get_job_json_raw_result_api_v1_parsing_job__job_id__result_raw_json_get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Job Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/parsing/history": {
      "get": {
        "tags": ["Parsing"],
        "summary": "Get Parsing History Result",
        "description": "Get parsing history for user",
        "operationId": "get_parsing_history_result_api_v1_parsing_history_get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ParsingHistoryItem"
                  },
                  "title": "Response Get Parsing History Result Api V1 Parsing History Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/parsing/job/{job_id}/read/{filename}": {
      "get": {
        "tags": ["Parsing"],
        "summary": "Generate Presigned Url",
        "description": "Generate a presigned URL for a job",
        "operationId": "generate_presigned_url_api_v1_parsing_job__job_id__read__filename__get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Job Id"
            }
          },
          {
            "name": "filename",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Filename"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PresignedUrl"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/component-definition/configurable-transformations": {
      "get": {
        "tags": ["Component Definitions"],
        "summary": "List Transformation Definitions",
        "description": "List transformation component definitions.",
        "operationId": "list_transformation_definitions_api_v1_component_definition_configurable_transformations_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ConfigurableTransformationDefinition"
                  },
                  "type": "array",
                  "title": "Response List Transformation Definitions Api V1 Component Definition Configurable Transformations Get"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/component-definition/data-sources": {
      "get": {
        "tags": ["Component Definitions"],
        "summary": "List Data Source Definitions",
        "description": "List data source component definitions.",
        "operationId": "list_data_source_definitions_api_v1_component_definition_data_sources_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DataSourceDefinition"
                  },
                  "type": "array",
                  "title": "Response List Data Source Definitions Api V1 Component Definition Data Sources Get"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/component-definition/data-sinks": {
      "get": {
        "tags": ["Component Definitions"],
        "summary": "List Data Sink Definitions",
        "description": "List data sink component definitions.",
        "operationId": "list_data_sink_definitions_api_v1_component_definition_data_sinks_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DataSinkDefinition"
                  },
                  "type": "array",
                  "title": "Response List Data Sink Definitions Api V1 Component Definition Data Sinks Get"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/apps/": {
      "post": {
        "tags": ["Chat Apps"],
        "summary": "Create Chat App",
        "description": "Create a new chat app.",
        "operationId": "create_chat_app_api_v1_apps__post",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            }
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatAppCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatApp"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Chat Apps"],
        "summary": "Get Chat Apps",
        "operationId": "get_chat_apps_api_v1_apps__get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            }
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChatAppResponse"
                  },
                  "title": "Response Get Chat Apps Api V1 Apps  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/apps/{id}": {
      "get": {
        "tags": ["Chat Apps"],
        "summary": "Get Chat App",
        "description": "Get a chat app by ID.",
        "operationId": "get_chat_app_api_v1_apps__id__get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatApp"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Chat Apps"],
        "summary": "Update Chat App",
        "description": "Update a chat app.",
        "operationId": "update_chat_app_api_v1_apps__id__put",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          },
          {
            "name": "project_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            }
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatAppUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatApp"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Chat Apps"],
        "summary": "Delete Chat App",
        "operationId": "delete_chat_app_api_v1_apps__id__delete",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/apps/{id}/chat": {
      "post": {
        "tags": ["Chat Apps"],
        "summary": "Chat With Chat App",
        "description": "Chat with a chat app.",
        "operationId": "chat_with_chat_app_api_v1_apps__id__chat_post",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppChatInputParams"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/billing/checkout-session": {
      "post": {
        "tags": ["Billing"],
        "summary": "Create Checkout Session",
        "description": "Create a new checkout session.",
        "operationId": "create_checkout_session_api_v1_billing_checkout_session_post",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckoutSessionCreatePayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Create Checkout Session Api V1 Billing Checkout Session Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/billing/customer-portal-session": {
      "post": {
        "tags": ["Billing"],
        "summary": "Create Customer Portal Session",
        "description": "Create a new customer portal session.",
        "operationId": "create_customer_portal_session_api_v1_billing_customer_portal_session_post",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerPortalSessionCreatePayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Create Customer Portal Session Api V1 Billing Customer Portal Session Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/billing/webhook": {
      "post": {
        "tags": ["Billing"],
        "summary": "Stripe Webhook",
        "description": "Stripe webhook endpoint.",
        "operationId": "stripe_webhook_api_v1_billing_webhook_post",
        "parameters": [
          {
            "name": "stripe-signature",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Stripe-Signature"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "const": "success",
                    "type": "string"
                  },
                  "propertyNames": {
                    "const": "status"
                  },
                  "title": "Response Stripe Webhook Api V1 Billing Webhook Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/billing/downgrade-plan": {
      "post": {
        "tags": ["Billing"],
        "summary": "Downgrade Plan",
        "operationId": "downgrade_plan_api_v1_billing_downgrade_plan_post",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "const": "success",
                    "type": "string"
                  },
                  "propertyNames": {
                    "const": "status"
                  },
                  "title": "Response Downgrade Plan Api V1 Billing Downgrade Plan Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/billing/create-intent-and-customer-session": {
      "post": {
        "tags": ["Billing"],
        "summary": "Create Intent And Customer Session",
        "description": "Create a new setup intent and and a customer session.\n\nSee https://docs.stripe.com/payments/existing-customers?platform=web&ui=elements",
        "operationId": "create_intent_and_customer_session_api_v1_billing_create_intent_and_customer_session_post",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateIntentAndCustomerSessionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/extractionv2/extraction-agents": {
      "post": {
        "tags": ["LlamaExtract"],
        "summary": "Create Extraction Agent",
        "operationId": "create_extraction_agent_api_v1_extractionv2_extraction_agents_post",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            }
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExtractAgentCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtractAgent"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["LlamaExtract"],
        "summary": "List Extraction Agents",
        "operationId": "list_extraction_agents_api_v1_extractionv2_extraction_agents_get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExtractAgent"
                  },
                  "title": "Response List Extraction Agents Api V1 Extractionv2 Extraction Agents Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/extractionv2/extraction-agents/schema/validation": {
      "post": {
        "tags": ["LlamaExtract"],
        "summary": "Validate Extraction Schema",
        "description": "Validates an extraction agent's schema definition.\nReturns the normalized and validated schema if valid, otherwise raises an HTTP 400.",
        "operationId": "validate_extraction_schema_api_v1_extractionv2_extraction_agents_schema_validation_post",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExtractSchemaValidateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtractSchemaValidateResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/extractionv2/extraction-agents/by-name/{name}": {
      "get": {
        "tags": ["LlamaExtract"],
        "summary": "Get Extraction Agent By Name",
        "operationId": "get_extraction_agent_by_name_api_v1_extractionv2_extraction_agents_by_name__name__get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Name"
            }
          },
          {
            "name": "project_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtractAgent"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/extractionv2/extraction-agents/{extraction_agent_id}": {
      "get": {
        "tags": ["LlamaExtract"],
        "summary": "Get Extraction Agent",
        "operationId": "get_extraction_agent_api_v1_extractionv2_extraction_agents__extraction_agent_id__get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "extraction_agent_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Extraction Agent Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtractAgent"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["LlamaExtract"],
        "summary": "Delete Extraction Agent",
        "operationId": "delete_extraction_agent_api_v1_extractionv2_extraction_agents__extraction_agent_id__delete",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "extraction_agent_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Extraction Agent Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["LlamaExtract"],
        "summary": "Update Extraction Agent",
        "operationId": "update_extraction_agent_api_v1_extractionv2_extraction_agents__extraction_agent_id__put",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "extraction_agent_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Extraction Agent Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExtractAgentUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtractAgent"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/extractionv2/jobs": {
      "get": {
        "tags": ["LlamaExtract"],
        "summary": "List Jobs",
        "operationId": "list_jobs_api_v1_extractionv2_jobs_get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "extraction_agent_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Extraction Agent Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExtractJob"
                  },
                  "title": "Response List Jobs Api V1 Extractionv2 Jobs Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["LlamaExtract"],
        "summary": "Run Job",
        "operationId": "run_job_api_v1_extractionv2_jobs_post",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExtractJobCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtractJob"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/extractionv2/jobs/{job_id}": {
      "get": {
        "tags": ["LlamaExtract"],
        "summary": "Get Job",
        "operationId": "get_job_api_v1_extractionv2_jobs__job_id__get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Job Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtractJob"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/extractionv2/jobs/parsed/test": {
      "post": {
        "tags": ["LlamaExtract"],
        "summary": "Run Job With Parsed File Test",
        "operationId": "run_job_with_parsed_file_test_api_v1_extractionv2_jobs_parsed_test_post",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_run_job_with_parsed_file_test_api_v1_extractionv2_jobs_parsed_test_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtractResultset"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/extractionv2/jobs/parsed": {
      "post": {
        "tags": ["LlamaExtract"],
        "summary": "Run Job With Parsed File",
        "operationId": "run_job_with_parsed_file_api_v1_extractionv2_jobs_parsed_post",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExtractJobCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtractResultset"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/extractionv2/jobs/test": {
      "post": {
        "tags": ["LlamaExtract"],
        "summary": "Run Job Test User",
        "operationId": "run_job_test_user_api_v1_extractionv2_jobs_test_post",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_run_job_test_user_api_v1_extractionv2_jobs_test_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtractJob"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/extractionv2/jobs/{job_id}/result": {
      "get": {
        "tags": ["LlamaExtract"],
        "summary": "Get Job Result",
        "operationId": "get_job_result_api_v1_extractionv2_jobs__job_id__result_get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Job Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtractResultset"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/extractionv2/runs": {
      "get": {
        "tags": ["LlamaExtract"],
        "summary": "List Extract Runs",
        "operationId": "list_extract_runs_api_v1_extractionv2_runs_get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "extraction_agent_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Extraction Agent Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExtractRun"
                  },
                  "title": "Response List Extract Runs Api V1 Extractionv2 Runs Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/extractionv2/runs/by-job/{job_id}": {
      "get": {
        "tags": ["LlamaExtract"],
        "summary": "Get Run By Job Id",
        "operationId": "get_run_by_job_id_api_v1_extractionv2_runs_by_job__job_id__get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Job Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtractRun"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/extractionv2/runs/{run_id}": {
      "get": {
        "tags": ["LlamaExtract"],
        "summary": "Get Run",
        "operationId": "get_run_api_v1_extractionv2_runs__run_id__get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "run_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Run Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtractRun"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/reports/": {
      "post": {
        "tags": ["Reports"],
        "summary": "Create Report",
        "description": "Create a new report.",
        "operationId": "create_report_api_v1_reports__post",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            }
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_create_report_api_v1_reports__post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportCreateResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/reports/list": {
      "get": {
        "tags": ["Reports"],
        "summary": "List Reports",
        "description": "List all reports for a project.",
        "operationId": "list_reports_api_v1_reports_list_get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "state",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ReportState"
                },
                {
                  "type": "null"
                }
              ],
              "title": "State"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "title": "Offset"
            }
          },
          {
            "name": "project_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            }
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedReportResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/reports/{report_id}": {
      "get": {
        "tags": ["Reports"],
        "summary": "Get Report",
        "description": "Get a specific report.",
        "operationId": "get_report_api_v1_reports__report_id__get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "report_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Report Id"
            }
          },
          {
            "name": "version",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Version"
            }
          },
          {
            "name": "project_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            }
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Reports"],
        "summary": "Update Report Metadata",
        "description": "Update metadata for a report.",
        "operationId": "update_report_metadata_api_v1_reports__report_id__post",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "report_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Report Id"
            }
          },
          {
            "name": "project_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            }
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportNameUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportMetadata"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Reports"],
        "summary": "Update Report",
        "description": "Update a report's content.",
        "operationId": "update_report_api_v1_reports__report_id__patch",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "report_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Report Id"
            }
          },
          {
            "name": "project_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            }
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportVersionPatch"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Reports"],
        "summary": "Delete Report",
        "description": "Delete a report.",
        "operationId": "delete_report_api_v1_reports__report_id__delete",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "report_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Report Id"
            }
          },
          {
            "name": "cascade_delete",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Whether to delete associated retriever and pipeline data",
              "default": false,
              "title": "Cascade Delete"
            },
            "description": "Whether to delete associated retriever and pipeline data"
          },
          {
            "name": "project_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            }
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/reports/{report_id}/plan": {
      "get": {
        "tags": ["Reports"],
        "summary": "Get Report Plan",
        "description": "Get the plan for a report.",
        "operationId": "get_report_plan_api_v1_reports__report_id__plan_get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "report_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Report Id"
            }
          },
          {
            "name": "project_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            }
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportPlan"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Reports"],
        "summary": "Update Report Plan",
        "description": "Update the plan of a report, including approval, rejection, and editing.",
        "operationId": "update_report_plan_api_v1_reports__report_id__plan_patch",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "report_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Report Id"
            }
          },
          {
            "name": "action",
            "in": "query",
            "required": true,
            "schema": {
              "enum": ["approve", "reject", "edit"],
              "type": "string",
              "title": "Action"
            }
          },
          {
            "name": "project_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            }
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/ReportPlan"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Updated Plan"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/reports/{report_id}/events": {
      "get": {
        "tags": ["Reports"],
        "summary": "Get Report Events",
        "description": "Get all historical events for a report.",
        "operationId": "get_report_events_api_v1_reports__report_id__events_get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "report_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Report Id"
            }
          },
          {
            "name": "last_sequence",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Last Sequence"
            }
          },
          {
            "name": "project_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            }
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReportEventItem"
                  },
                  "title": "Response Get Report Events Api V1 Reports  Report Id  Events Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/reports/{report_id}/metadata": {
      "get": {
        "tags": ["Reports"],
        "summary": "Get Report Metadata",
        "description": "Get metadata for a report.",
        "operationId": "get_report_metadata_api_v1_reports__report_id__metadata_get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "report_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Report Id"
            }
          },
          {
            "name": "project_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            }
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportMetadata"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/reports/{report_id}/suggest_edits": {
      "post": {
        "tags": ["Reports"],
        "summary": "Suggest Edits Endpoint",
        "description": "Suggest edits to a report based on user query and chat history.",
        "operationId": "suggest_edits_endpoint_api_v1_reports__report_id__suggest_edits_post",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "report_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Report Id"
            }
          },
          {
            "name": "project_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            }
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditSuggestionCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EditSuggestion"
                  },
                  "title": "Response Suggest Edits Endpoint Api V1 Reports  Report Id  Suggest Edits Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/reports/{report_id}/restart": {
      "post": {
        "tags": ["Reports"],
        "summary": "Restart Report",
        "description": "Restart a report from scratch.",
        "operationId": "restart_report_api_v1_reports__report_id__restart_post",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "report_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Report Id"
            }
          },
          {
            "name": "project_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            }
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/parsing/job/{job_id}/result/image/{name}": {
      "get": {
        "tags": ["Deprecated"],
        "summary": "Get Job Image Result",
        "description": "Get a job by id",
        "operationId": "get_job_image_result_api_parsing_job__job_id__result_image__name__get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Job Id"
            }
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Name"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "image/jpeg": {}
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/parsing/supported_file_extensions": {
      "get": {
        "tags": ["Deprecated"],
        "summary": "Get Supported File Extensions",
        "description": "Get a list of supported file extensions",
        "operationId": "get_supported_file_extensions_api_parsing_supported_file_extensions_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/LlamaParseSupportedFileExtensions"
                  },
                  "type": "array",
                  "title": "Response Get Supported File Extensions Api Parsing Supported File Extensions Get"
                }
              }
            }
          }
        }
      }
    },
    "/api/parsing/screenshot": {
      "post": {
        "tags": ["Deprecated"],
        "summary": "Screenshot",
        "operationId": "screenshot_api_parsing_screenshot_post",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "project_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_screenshot_api_parsing_screenshot_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParsingJob"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/parsing/upload": {
      "post": {
        "tags": ["Deprecated"],
        "summary": "Upload File",
        "description": "Upload a file to s3 and create a job. return a job id",
        "operationId": "upload_file_api_parsing_upload_post",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "project_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_upload_file_api_parsing_upload_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParsingJob"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/parsing/usage": {
      "get": {
        "tags": ["Deprecated"],
        "summary": "Usage",
        "description": "DEPRECATED: use either /organizations/{organization_id}/usage or /projects/{project_id}/usage instead\nGet parsing usage for user",
        "operationId": "usage_api_parsing_usage_get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParsingUsage"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/parsing/job/{job_id}": {
      "get": {
        "tags": ["Deprecated"],
        "summary": "Get Job",
        "description": "Get a job by id",
        "operationId": "get_job_api_parsing_job__job_id__get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Job Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParsingJob"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/parsing/job/{job_id}/details": {
      "get": {
        "tags": ["Deprecated"],
        "summary": "Get Parsing Job Details",
        "description": "Get a job by id",
        "operationId": "get_parsing_job_details_api_parsing_job__job_id__details_get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Job Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get Parsing Job Details Api Parsing Job  Job Id  Details Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/parsing/job/{job_id}/result/text": {
      "get": {
        "tags": ["Deprecated"],
        "summary": "Get Job Text Result",
        "description": "Get a job by id",
        "operationId": "get_job_text_result_api_parsing_job__job_id__result_text_get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Job Id"
            }
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParsingJobTextResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/parsing/job/{job_id}/result/raw/text": {
      "get": {
        "tags": ["Deprecated"],
        "summary": "Get Job Raw Text Result",
        "description": "Get a job by id",
        "operationId": "get_job_raw_text_result_api_parsing_job__job_id__result_raw_text_get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Job Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/parsing/job/{job_id}/result/pdf": {
      "get": {
        "tags": ["Deprecated"],
        "summary": "Get Job Raw Text Result",
        "description": "Get a job by id",
        "operationId": "get_job_raw_text_result_api_parsing_job__job_id__result_pdf_get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Job Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/parsing/job/{job_id}/result/raw/pdf": {
      "get": {
        "tags": ["Deprecated"],
        "summary": "Get Job Raw Text Result",
        "description": "Get a job by id",
        "operationId": "get_job_raw_text_result_api_parsing_job__job_id__result_raw_pdf_get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Job Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/parsing/job/{job_id}/result/structured": {
      "get": {
        "tags": ["Deprecated"],
        "summary": "Get Job Structured Result",
        "description": "Get a job by id",
        "operationId": "get_job_structured_result_api_parsing_job__job_id__result_structured_get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Job Id"
            }
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParsingJobStructuredResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/parsing/job/{job_id}/result/raw/structured": {
      "get": {
        "tags": ["Deprecated"],
        "summary": "Get Job Raw Structured Result",
        "description": "Get a job by id",
        "operationId": "get_job_raw_structured_result_api_parsing_job__job_id__result_raw_structured_get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Job Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/parsing/job/{job_id}/result/xlsx": {
      "get": {
        "tags": ["Deprecated"],
        "summary": "Get Job Raw Xlsx Result",
        "description": "Get a job by id",
        "operationId": "get_job_raw_xlsx_result_api_parsing_job__job_id__result_xlsx_get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Job Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/parsing/job/{job_id}/result/raw/xlsx": {
      "get": {
        "tags": ["Deprecated"],
        "summary": "Get Job Raw Xlsx Result",
        "description": "Get a job by id",
        "operationId": "get_job_raw_xlsx_result_api_parsing_job__job_id__result_raw_xlsx_get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Job Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/parsing/job/{job_id}/result/markdown": {
      "get": {
        "tags": ["Deprecated"],
        "summary": "Get Job Result",
        "description": "Get a job by id",
        "operationId": "get_job_result_api_parsing_job__job_id__result_markdown_get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Job Id"
            }
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParsingJobMarkdownResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/parsing/job/{job_id}/result/raw/markdown": {
      "get": {
        "tags": ["Deprecated"],
        "summary": "Get Job Raw Md Result",
        "description": "Get a job by id",
        "operationId": "get_job_raw_md_result_api_parsing_job__job_id__result_raw_markdown_get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Job Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/parsing/job/{job_id}/result/json": {
      "get": {
        "tags": ["Deprecated"],
        "summary": "Get Job Json Result",
        "description": "Get a job by id",
        "operationId": "get_job_json_result_api_parsing_job__job_id__result_json_get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Job Id"
            }
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParsingJobJsonResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/parsing/job/{job_id}/result/raw/json": {
      "get": {
        "tags": ["Deprecated"],
        "summary": "Get Job Json Raw Result",
        "description": "Get a job by id",
        "operationId": "get_job_json_raw_result_api_parsing_job__job_id__result_raw_json_get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Job Id"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/parsing/history": {
      "get": {
        "tags": ["Deprecated"],
        "summary": "Get Parsing History Result",
        "description": "Get parsing history for user",
        "operationId": "get_parsing_history_result_api_parsing_history_get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ParsingHistoryItem"
                  },
                  "title": "Response Get Parsing History Result Api Parsing History Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/parsing/job/{job_id}/read/{filename}": {
      "get": {
        "tags": ["Deprecated"],
        "summary": "Generate Presigned Url",
        "description": "Generate a presigned URL for a job",
        "operationId": "generate_presigned_url_api_parsing_job__job_id__read__filename__get",
        "security": [
          {
            "HTTPBearer": []
          },
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Job Id"
            }
          },
          {
            "name": "filename",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Filename"
            }
          },
          {
            "name": "session",
            "in": "cookie",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PresignedUrl"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "APIKey": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "Unique identifier"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At",
            "description": "Creation datetime"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At",
            "description": "Update datetime"
          },
          "name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 3000,
                "minLength": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "project_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Project Id"
          },
          "user_id": {
            "type": "string",
            "title": "User Id"
          },
          "redacted_api_key": {
            "type": "string",
            "title": "Redacted Api Key"
          }
        },
        "type": "object",
        "required": ["id", "user_id", "redacted_api_key"],
        "title": "APIKey",
        "description": "Schema for an API Key."
      },
      "APIKeyCreate": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 3000,
                "minLength": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "project_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Project Id",
            "description": "The project ID to associate with the API key."
          }
        },
        "type": "object",
        "title": "APIKeyCreate",
        "description": "Schema for creating an API key."
      },
      "APIKeyUpdate": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 3000,
                "minLength": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          }
        },
        "type": "object",
        "title": "APIKeyUpdate",
        "description": "Schema for updating an API key."
      },
      "AdvancedModeTransformConfig": {
        "properties": {
          "mode": {
            "type": "string",
            "const": "advanced",
            "title": "Mode",
            "default": "advanced"
          },
          "segmentation_config": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/NoneSegmentationConfig"
              },
              {
                "$ref": "#/components/schemas/PageSegmentationConfig"
              },
              {
                "$ref": "#/components/schemas/ElementSegmentationConfig"
              }
            ],
            "title": "Segmentation Config",
            "description": "Configuration for the segmentation."
          },
          "chunking_config": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/NoneChunkingConfig"
              },
              {
                "$ref": "#/components/schemas/CharacterChunkingConfig"
              },
              {
                "$ref": "#/components/schemas/TokenChunkingConfig"
              },
              {
                "$ref": "#/components/schemas/SentenceChunkingConfig"
              },
              {
                "$ref": "#/components/schemas/SemanticChunkingConfig"
              }
            ],
            "title": "Chunking Config",
            "description": "Configuration for the chunking."
          }
        },
        "type": "object",
        "title": "AdvancedModeTransformConfig"
      },
      "AppChatInputParams": {
        "properties": {
          "messages": {
            "items": {
              "$ref": "#/components/schemas/InputMessage"
            },
            "type": "array",
            "title": "Messages"
          }
        },
        "type": "object",
        "title": "AppChatInputParams",
        "description": "This is the input schema for the chat app endpoint",
        "examples": [
          {
            "messages": [
              {
                "content": "Hello",
                "role": "user"
              }
            ]
          }
        ]
      },
      "AutoTransformConfig": {
        "properties": {
          "mode": {
            "type": "string",
            "const": "auto",
            "title": "Mode",
            "default": "auto"
          },
          "chunk_size": {
            "type": "integer",
            "exclusiveMinimum": 0,
            "title": "Chunk Size",
            "description": "Chunk size for the transformation.",
            "default": 1024
          },
          "chunk_overlap": {
            "type": "integer",
            "title": "Chunk Overlap",
            "description": "Chunk overlap for the transformation.",
            "default": 200,
            "gte": 0
          }
        },
        "type": "object",
        "title": "AutoTransformConfig"
      },
      "AzureOpenAIEmbedding": {
        "properties": {
          "model_name": {
            "type": "string",
            "title": "Model Name",
            "description": "The name of the OpenAI embedding model.",
            "default": "text-embedding-ada-002"
          },
          "embed_batch_size": {
            "type": "integer",
            "maximum": 2048,
            "exclusiveMinimum": 0,
            "title": "Embed Batch Size",
            "description": "The batch size for embedding calls.",
            "default": 10
          },
          "num_workers": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Num Workers",
            "description": "The number of workers to use for async embedding calls."
          },
          "additional_kwargs": {
            "type": "object",
            "title": "Additional Kwargs",
            "description": "Additional kwargs for the OpenAI API."
          },
          "api_key": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Api Key",
            "description": "The OpenAI API key."
          },
          "api_base": {
            "type": "string",
            "title": "Api Base",
            "description": "The base URL for Azure deployment.",
            "default": ""
          },
          "api_version": {
            "type": "string",
            "title": "Api Version",
            "description": "The version for Azure OpenAI API.",
            "default": ""
          },
          "max_retries": {
            "type": "integer",
            "title": "Max Retries",
            "description": "Maximum number of retries.",
            "default": 10,
            "gte": 0
          },
          "timeout": {
            "type": "number",
            "title": "Timeout",
            "description": "Timeout for each request.",
            "default": 60,
            "gte": 0
          },
          "default_headers": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Default Headers",
            "description": "The default headers for API requests."
          },
          "reuse_client": {
            "type": "boolean",
            "title": "Reuse Client",
            "description": "Reuse the OpenAI client between requests. When doing anything with large volumes of async API calls, setting this to false can improve stability.",
            "default": true
          },
          "dimensions": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Dimensions",
            "description": "The number of dimensions on the output embedding vectors. Works only with v3 embedding models."
          },
          "azure_endpoint": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Azure Endpoint",
            "description": "The Azure endpoint to use."
          },
          "azure_deployment": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Azure Deployment",
            "description": "The Azure deployment to use."
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "AzureOpenAIEmbedding"
          }
        },
        "type": "object",
        "title": "AzureOpenAIEmbedding"
      },
      "AzureOpenAIEmbeddingConfig": {
        "properties": {
          "type": {
            "type": "string",
            "const": "AZURE_EMBEDDING",
            "title": "Type",
            "description": "Type of the embedding model.",
            "default": "AZURE_EMBEDDING"
          },
          "component": {
            "$ref": "#/components/schemas/AzureOpenAIEmbedding",
            "description": "Configuration for the Azure OpenAI embedding model."
          }
        },
        "type": "object",
        "title": "AzureOpenAIEmbeddingConfig"
      },
      "BaseConnectionValidation": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success"
          },
          "message": {
            "type": "string",
            "title": "Message"
          }
        },
        "type": "object",
        "required": ["success", "message"],
        "title": "BaseConnectionValidation",
        "description": "Base response model for connection validation."
      },
      "BasePromptTemplate": {
        "properties": {
          "metadata": {
            "type": "object",
            "title": "Metadata"
          },
          "template_vars": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Template Vars"
          },
          "kwargs": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Kwargs"
          },
          "output_parser": {
            "anyOf": [
              {},
              {
                "type": "null"
              }
            ],
            "title": "Output Parser"
          },
          "template_var_mappings": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Template Var Mappings",
            "description": "Template variable mappings (Optional)."
          },
          "function_mappings": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Function Mappings",
            "description": "Function mappings (Optional). This is a mapping from template variable names to functions that take in the current kwargs and return a string."
          }
        },
        "type": "object",
        "required": ["metadata", "template_vars", "kwargs", "output_parser"],
        "title": "BasePromptTemplate"
      },
      "BedrockEmbedding": {
        "properties": {
          "model_name": {
            "type": "string",
            "title": "Model Name",
            "description": "The modelId of the Bedrock model to use.",
            "default": "amazon.titan-embed-text-v1"
          },
          "embed_batch_size": {
            "type": "integer",
            "maximum": 2048,
            "exclusiveMinimum": 0,
            "title": "Embed Batch Size",
            "description": "The batch size for embedding calls.",
            "default": 10
          },
          "num_workers": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Num Workers",
            "description": "The number of workers to use for async embedding calls."
          },
          "profile_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Profile Name",
            "description": "The name of aws profile to use. If not given, then the default profile is used."
          },
          "aws_access_key_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Aws Access Key Id",
            "description": "AWS Access Key ID to use"
          },
          "aws_secret_access_key": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Aws Secret Access Key",
            "description": "AWS Secret Access Key to use"
          },
          "aws_session_token": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Aws Session Token",
            "description": "AWS Session Token to use"
          },
          "region_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Region Name",
            "description": "AWS region name to use. Uses region configured in AWS CLI if not passed"
          },
          "max_retries": {
            "type": "integer",
            "exclusiveMinimum": 0,
            "title": "Max Retries",
            "description": "The maximum number of API retries.",
            "default": 10
          },
          "timeout": {
            "type": "number",
            "title": "Timeout",
            "description": "The timeout for the Bedrock API request in seconds. It will be used for both connect and read timeouts.",
            "default": 60
          },
          "additional_kwargs": {
            "type": "object",
            "title": "Additional Kwargs",
            "description": "Additional kwargs for the bedrock client."
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "BedrockEmbedding"
          }
        },
        "type": "object",
        "title": "BedrockEmbedding"
      },
      "BedrockEmbeddingConfig": {
        "properties": {
          "type": {
            "type": "string",
            "const": "BEDROCK_EMBEDDING",
            "title": "Type",
            "description": "Type of the embedding model.",
            "default": "BEDROCK_EMBEDDING"
          },
          "component": {
            "$ref": "#/components/schemas/BedrockEmbedding",
            "description": "Configuration for the Bedrock embedding model."
          }
        },
        "type": "object",
        "title": "BedrockEmbeddingConfig"
      },
      "Body_create_report_api_v1_reports__post": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "template_text": {
            "type": "string",
            "title": "Template Text"
          },
          "template_instructions": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Template Instructions"
          },
          "existing_retriever_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Existing Retriever Id"
          },
          "files": {
            "items": {
              "type": "string",
              "format": "binary"
            },
            "type": "array",
            "title": "Files"
          },
          "template_file": {
            "anyOf": [
              {
                "type": "string",
                "format": "binary"
              },
              {
                "type": "null"
              }
            ],
            "title": "Template File"
          }
        },
        "type": "object",
        "required": ["name", "files"],
        "title": "Body_create_report_api_v1_reports__post"
      },
      "Body_import_pipeline_metadata_api_v1_pipelines__pipeline_id__metadata_put": {
        "properties": {
          "upload_file": {
            "type": "string",
            "format": "binary",
            "title": "Upload File"
          }
        },
        "type": "object",
        "required": ["upload_file"],
        "title": "Body_import_pipeline_metadata_api_v1_pipelines__pipeline_id__metadata_put"
      },
      "Body_run_job_test_user_api_v1_extractionv2_jobs_test_post": {
        "properties": {
          "job_create": {
            "$ref": "#/components/schemas/ExtractJobCreate"
          },
          "extract_settings": {
            "$ref": "#/components/schemas/LlamaExtractSettings",
            "default": {
              "max_file_size": 5242880,
              "max_tokens": 128000,
              "max_pages": 200,
              "chunk_mode": "PAGE",
              "max_chunk_size": 5000,
              "extraction_agent_config": {
                "default": {
                  "model": "gpt-4o",
                  "temperature": 0,
                  "relaxation_mode": "LEAF",
                  "struct_mode": "STRUCT_PARSE",
                  "prompt_conf": {
                    "error_handling_prompt": "If the text does not contain enough information to comply with the schema, explain the reason. Else, output null and fill out the 'extracted' field.",
                    "extraction_prompt": "The extracted data using the given JSON schema.",
                    "system_prompt": "\nGiven a JSON schema, extract the data from the provided text according to the schema.\nOnly output the data as given in the text, nothing else.\n"
                  }
                },
                "mapper": {
                  "model": "gpt-4o",
                  "prompt_conf": {
                    "error_handling_prompt": "If the text does not contain enough information to comply with the schema, explain the reason. Else, output null and fill out the 'extracted' field.",
                    "extraction_prompt": "The extracted data using the given JSON schema.",
                    "system_prompt": "\nYou are an expert data analyst. Extract the data from the text according to the schema.\n1. Only extract from the data that is provided in the text. \n2. Only output the JSON keys that have non-null values.\n"
                  },
                  "relaxation_mode": "FULL",
                  "struct_mode": "JSON_MODE",
                  "temperature": 0
                },
                "reducer": {
                  "model": "gpt-4o",
                  "prompt_conf": {
                    "error_handling_prompt": "If the text does not contain enough information to comply with the schema, explain the reason. Else, output null and fill out the 'extracted' field.",
                    "extraction_prompt": "The extracted data using the given JSON schema.",
                    "system_prompt": "\nYou are an expert data analyst. You are given a list of JSON objects that\ncontain partial extracted information from a source document along with (i) index \nindicating the order of the extracted information from the source document and \n(ii) (start_page, end_page) indicating the range of pages that the information \nwas extracted from. \n\nCombine this data to answer the question in the provided JSON template.\n- **Only** use the data that is provided in the text.\n- If using a tool, make only a single tool call.\n- There might be multiple sources with the same information. Aim to combine the data\n  without duplicating information.\n- Take the index and page number into account when combining the data, e.g. if some \n  information needs to be combined from multiple pages, use the index and page \n  number to determine the order of the data.\n"
                  },
                  "relaxation_mode": "LEAF",
                  "struct_mode": "FUNC_CALL",
                  "temperature": 0
                }
              },
              "llama_parse_params": {
                "annotate_links": true,
                "auto_mode": false,
                "auto_mode_trigger_on_image_in_page": false,
                "auto_mode_trigger_on_table_in_page": false,
                "bounding_box": "",
                "continuous_mode": false,
                "disable_image_extraction": false,
                "disable_ocr": false,
                "disable_reconstruction": false,
                "do_not_cache": false,
                "do_not_unroll_columns": false,
                "extract_charts": false,
                "extract_layout": false,
                "fast_mode": false,
                "gpt4o_api_key": "",
                "gpt4o_mode": false,
                "guess_xlsx_sheet_name": false,
                "html_make_all_elements_visible": false,
                "html_remove_fixed_elements": false,
                "html_remove_navigation_elements": false,
                "ignore_document_elements_for_layout_detection": false,
                "input_s3_region": "",
                "internal_is_screenshot_job": false,
                "invalidate_cache": false,
                "is_formatting_instruction": true,
                "languages": ["en"],
                "output_pdf_of_document": false,
                "output_s3_region": "",
                "output_tables_as_HTML": false,
                "page_prefix": "",
                "page_suffix": "",
                "parsing_instruction": "",
                "premium_mode": false,
                "preserve_layout_alignment_across_pages": false,
                "s3_input_path": "",
                "s3_output_path_prefix": "",
                "skip_diagonal_text": false,
                "spreadsheet_extract_sub_tables": false,
                "strict_mode_buggy_font": false,
                "strict_mode_image_extraction": false,
                "strict_mode_image_ocr": false,
                "strict_mode_reconstruction": false,
                "structured_output": false,
                "take_screenshot": false,
                "target_pages": "",
                "use_vendor_multimodal_model": false,
                "vendor_multimodal_api_key": "",
                "vendor_multimodal_model_name": "",
                "webhook_url": ""
              }
            }
          }
        },
        "type": "object",
        "required": ["job_create"],
        "title": "Body_run_job_test_user_api_v1_extractionv2_jobs_test_post"
      },
      "Body_run_job_with_parsed_file_test_api_v1_extractionv2_jobs_parsed_test_post": {
        "properties": {
          "job_create": {
            "$ref": "#/components/schemas/ExtractJobCreate"
          },
          "extract_settings": {
            "$ref": "#/components/schemas/LlamaExtractSettings",
            "default": {
              "max_file_size": 5242880,
              "max_tokens": 128000,
              "max_pages": 200,
              "chunk_mode": "PAGE",
              "max_chunk_size": 5000,
              "extraction_agent_config": {
                "default": {
                  "model": "gpt-4o",
                  "temperature": 0,
                  "relaxation_mode": "LEAF",
                  "struct_mode": "STRUCT_PARSE",
                  "prompt_conf": {
                    "error_handling_prompt": "If the text does not contain enough information to comply with the schema, explain the reason. Else, output null and fill out the 'extracted' field.",
                    "extraction_prompt": "The extracted data using the given JSON schema.",
                    "system_prompt": "\nGiven a JSON schema, extract the data from the provided text according to the schema.\nOnly output the data as given in the text, nothing else.\n"
                  }
                },
                "mapper": {
                  "model": "gpt-4o",
                  "prompt_conf": {
                    "error_handling_prompt": "If the text does not contain enough information to comply with the schema, explain the reason. Else, output null and fill out the 'extracted' field.",
                    "extraction_prompt": "The extracted data using the given JSON schema.",
                    "system_prompt": "\nYou are an expert data analyst. Extract the data from the text according to the schema.\n1. Only extract from the data that is provided in the text. \n2. Only output the JSON keys that have non-null values.\n"
                  },
                  "relaxation_mode": "FULL",
                  "struct_mode": "JSON_MODE",
                  "temperature": 0
                },
                "reducer": {
                  "model": "gpt-4o",
                  "prompt_conf": {
                    "error_handling_prompt": "If the text does not contain enough information to comply with the schema, explain the reason. Else, output null and fill out the 'extracted' field.",
                    "extraction_prompt": "The extracted data using the given JSON schema.",
                    "system_prompt": "\nYou are an expert data analyst. You are given a list of JSON objects that\ncontain partial extracted information from a source document along with (i) index \nindicating the order of the extracted information from the source document and \n(ii) (start_page, end_page) indicating the range of pages that the information \nwas extracted from. \n\nCombine this data to answer the question in the provided JSON template.\n- **Only** use the data that is provided in the text.\n- If using a tool, make only a single tool call.\n- There might be multiple sources with the same information. Aim to combine the data\n  without duplicating information.\n- Take the index and page number into account when combining the data, e.g. if some \n  information needs to be combined from multiple pages, use the index and page \n  number to determine the order of the data.\n"
                  },
                  "relaxation_mode": "LEAF",
                  "struct_mode": "FUNC_CALL",
                  "temperature": 0
                }
              },
              "llama_parse_params": {
                "annotate_links": true,
                "auto_mode": false,
                "auto_mode_trigger_on_image_in_page": false,
                "auto_mode_trigger_on_table_in_page": false,
                "bounding_box": "",
                "continuous_mode": false,
                "disable_image_extraction": false,
                "disable_ocr": false,
                "disable_reconstruction": false,
                "do_not_cache": false,
                "do_not_unroll_columns": false,
                "extract_charts": false,
                "extract_layout": false,
                "fast_mode": false,
                "gpt4o_api_key": "",
                "gpt4o_mode": false,
                "guess_xlsx_sheet_name": false,
                "html_make_all_elements_visible": false,
                "html_remove_fixed_elements": false,
                "html_remove_navigation_elements": false,
                "ignore_document_elements_for_layout_detection": false,
                "input_s3_region": "",
                "internal_is_screenshot_job": false,
                "invalidate_cache": false,
                "is_formatting_instruction": true,
                "languages": ["en"],
                "output_pdf_of_document": false,
                "output_s3_region": "",
                "output_tables_as_HTML": false,
                "page_prefix": "",
                "page_suffix": "",
                "parsing_instruction": "",
                "premium_mode": false,
                "preserve_layout_alignment_across_pages": false,
                "s3_input_path": "",
                "s3_output_path_prefix": "",
                "skip_diagonal_text": false,
                "spreadsheet_extract_sub_tables": false,
                "strict_mode_buggy_font": false,
                "strict_mode_image_extraction": false,
                "strict_mode_image_ocr": false,
                "strict_mode_reconstruction": false,
                "structured_output": false,
                "take_screenshot": false,
                "target_pages": "",
                "use_vendor_multimodal_model": false,
                "vendor_multimodal_api_key": "",
                "vendor_multimodal_model_name": "",
                "webhook_url": ""
              }
            }
          }
        },
        "type": "object",
        "required": ["job_create"],
        "title": "Body_run_job_with_parsed_file_test_api_v1_extractionv2_jobs_parsed_test_post"
      },
      "Body_screenshot_api_parsing_screenshot_post": {
        "properties": {
          "file": {
            "anyOf": [
              {
                "type": "string",
                "format": "binary"
              },
              {
                "type": "null"
              }
            ],
            "title": "File"
          },
          "do_not_cache": {
            "type": "boolean",
            "title": "Do Not Cache",
            "default": false
          },
          "http_proxy": {
            "type": "string",
            "title": "Http Proxy"
          },
          "input_s3_path": {
            "type": "string",
            "title": "Input S3 Path",
            "default": ""
          },
          "input_s3_region": {
            "type": "string",
            "title": "Input S3 Region",
            "default": ""
          },
          "input_url": {
            "type": "string",
            "title": "Input Url"
          },
          "invalidate_cache": {
            "type": "boolean",
            "title": "Invalidate Cache",
            "default": false
          },
          "max_pages": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Pages"
          },
          "output_s3_path_prefix": {
            "type": "string",
            "title": "Output S3 Path Prefix",
            "default": ""
          },
          "output_s3_region": {
            "type": "string",
            "title": "Output S3 Region",
            "default": ""
          },
          "target_pages": {
            "type": "string",
            "title": "Target Pages",
            "default": ""
          },
          "webhook_url": {
            "type": "string",
            "title": "Webhook Url",
            "default": ""
          },
          "job_timeout_in_seconds": {
            "type": "number",
            "title": "Job Timeout In Seconds"
          },
          "job_timeout_extra_time_per_page_in_seconds": {
            "type": "number",
            "title": "Job Timeout Extra Time Per Page In Seconds"
          }
        },
        "type": "object",
        "title": "Body_screenshot_api_parsing_screenshot_post"
      },
      "Body_screenshot_api_v1_parsing_screenshot_post": {
        "properties": {
          "file": {
            "anyOf": [
              {
                "type": "string",
                "format": "binary"
              },
              {
                "type": "null"
              }
            ],
            "title": "File"
          },
          "do_not_cache": {
            "type": "boolean",
            "title": "Do Not Cache",
            "default": false
          },
          "http_proxy": {
            "type": "string",
            "title": "Http Proxy"
          },
          "input_s3_path": {
            "type": "string",
            "title": "Input S3 Path",
            "default": ""
          },
          "input_s3_region": {
            "type": "string",
            "title": "Input S3 Region",
            "default": ""
          },
          "input_url": {
            "type": "string",
            "title": "Input Url"
          },
          "invalidate_cache": {
            "type": "boolean",
            "title": "Invalidate Cache",
            "default": false
          },
          "max_pages": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Pages"
          },
          "output_s3_path_prefix": {
            "type": "string",
            "title": "Output S3 Path Prefix",
            "default": ""
          },
          "output_s3_region": {
            "type": "string",
            "title": "Output S3 Region",
            "default": ""
          },
          "target_pages": {
            "type": "string",
            "title": "Target Pages",
            "default": ""
          },
          "webhook_url": {
            "type": "string",
            "title": "Webhook Url",
            "default": ""
          },
          "job_timeout_in_seconds": {
            "type": "number",
            "title": "Job Timeout In Seconds"
          },
          "job_timeout_extra_time_per_page_in_seconds": {
            "type": "number",
            "title": "Job Timeout Extra Time Per Page In Seconds"
          }
        },
        "type": "object",
        "title": "Body_screenshot_api_v1_parsing_screenshot_post"
      },
      "Body_upload_file_api_parsing_upload_post": {
        "properties": {
          "file": {
            "anyOf": [
              {
                "type": "string",
                "format": "binary"
              },
              {
                "type": "null"
              }
            ],
            "title": "File"
          },
          "annotate_links": {
            "type": "boolean",
            "title": "Annotate Links",
            "default": false
          },
          "auto_mode": {
            "type": "boolean",
            "title": "Auto Mode",
            "default": false
          },
          "auto_mode_trigger_on_image_in_page": {
            "type": "boolean",
            "title": "Auto Mode Trigger On Image In Page",
            "default": false
          },
          "auto_mode_trigger_on_table_in_page": {
            "type": "boolean",
            "title": "Auto Mode Trigger On Table In Page",
            "default": false
          },
          "auto_mode_trigger_on_text_in_page": {
            "type": "string",
            "title": "Auto Mode Trigger On Text In Page"
          },
          "auto_mode_trigger_on_regexp_in_page": {
            "type": "string",
            "title": "Auto Mode Trigger On Regexp In Page"
          },
          "azure_openai_api_version": {
            "type": "string",
            "title": "Azure Openai Api Version"
          },
          "azure_openai_deployment_name": {
            "type": "string",
            "title": "Azure Openai Deployment Name"
          },
          "azure_openai_endpoint": {
            "type": "string",
            "title": "Azure Openai Endpoint"
          },
          "azure_openai_key": {
            "type": "string",
            "title": "Azure Openai Key"
          },
          "bbox_bottom": {
            "type": "number",
            "title": "Bbox Bottom"
          },
          "bbox_left": {
            "type": "number",
            "title": "Bbox Left"
          },
          "bbox_right": {
            "type": "number",
            "title": "Bbox Right"
          },
          "bbox_top": {
            "type": "number",
            "title": "Bbox Top"
          },
          "disable_ocr": {
            "type": "boolean",
            "title": "Disable Ocr",
            "default": false
          },
          "disable_reconstruction": {
            "type": "boolean",
            "title": "Disable Reconstruction",
            "default": false
          },
          "disable_image_extraction": {
            "type": "boolean",
            "title": "Disable Image Extraction",
            "default": false
          },
          "do_not_cache": {
            "type": "boolean",
            "title": "Do Not Cache",
            "default": false
          },
          "do_not_unroll_columns": {
            "type": "boolean",
            "title": "Do Not Unroll Columns",
            "default": false
          },
          "extract_charts": {
            "type": "boolean",
            "title": "Extract Charts",
            "default": false
          },
          "guess_xlsx_sheet_name": {
            "type": "boolean",
            "title": "Guess Xlsx Sheet Name",
            "default": false
          },
          "html_make_all_elements_visible": {
            "type": "boolean",
            "title": "Html Make All Elements Visible",
            "default": false
          },
          "html_remove_fixed_elements": {
            "type": "boolean",
            "title": "Html Remove Fixed Elements",
            "default": false
          },
          "html_remove_navigation_elements": {
            "type": "boolean",
            "title": "Html Remove Navigation Elements",
            "default": false
          },
          "http_proxy": {
            "type": "string",
            "title": "Http Proxy"
          },
          "input_s3_path": {
            "type": "string",
            "title": "Input S3 Path",
            "default": ""
          },
          "input_s3_region": {
            "type": "string",
            "title": "Input S3 Region",
            "default": ""
          },
          "input_url": {
            "type": "string",
            "title": "Input Url"
          },
          "invalidate_cache": {
            "type": "boolean",
            "title": "Invalidate Cache",
            "default": false
          },
          "language": {
            "items": {
              "$ref": "#/components/schemas/ParserLanguages"
            },
            "type": "array",
            "title": "Language",
            "default": ["en"]
          },
          "extract_layout": {
            "type": "boolean",
            "title": "Extract Layout",
            "default": false
          },
          "max_pages": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Pages"
          },
          "output_pdf_of_document": {
            "type": "boolean",
            "title": "Output Pdf Of Document",
            "default": false
          },
          "output_s3_path_prefix": {
            "type": "string",
            "title": "Output S3 Path Prefix",
            "default": ""
          },
          "output_s3_region": {
            "type": "string",
            "title": "Output S3 Region",
            "default": ""
          },
          "page_prefix": {
            "type": "string",
            "title": "Page Prefix",
            "default": ""
          },
          "page_separator": {
            "type": "string",
            "title": "Page Separator"
          },
          "page_suffix": {
            "type": "string",
            "title": "Page Suffix",
            "default": ""
          },
          "preserve_layout_alignment_across_pages": {
            "type": "boolean",
            "title": "Preserve Layout Alignment Across Pages",
            "default": false
          },
          "skip_diagonal_text": {
            "type": "boolean",
            "title": "Skip Diagonal Text",
            "default": false
          },
          "spreadsheet_extract_sub_tables": {
            "type": "boolean",
            "title": "Spreadsheet Extract Sub Tables",
            "default": true
          },
          "structured_output": {
            "type": "boolean",
            "title": "Structured Output",
            "default": false
          },
          "structured_output_json_schema": {
            "type": "string",
            "title": "Structured Output Json Schema"
          },
          "structured_output_json_schema_name": {
            "type": "string",
            "title": "Structured Output Json Schema Name"
          },
          "take_screenshot": {
            "type": "boolean",
            "title": "Take Screenshot",
            "default": false
          },
          "target_pages": {
            "type": "string",
            "title": "Target Pages",
            "default": ""
          },
          "vendor_multimodal_api_key": {
            "type": "string",
            "title": "Vendor Multimodal Api Key",
            "default": ""
          },
          "vendor_multimodal_model_name": {
            "type": "string",
            "title": "Vendor Multimodal Model Name"
          },
          "webhook_url": {
            "type": "string",
            "title": "Webhook Url",
            "default": ""
          },
          "parse_mode": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ParsingMode"
              },
              {
                "type": "null"
              }
            ]
          },
          "system_prompt": {
            "type": "string",
            "title": "System Prompt",
            "default": ""
          },
          "system_prompt_append": {
            "type": "string",
            "title": "System Prompt Append",
            "default": ""
          },
          "user_prompt": {
            "type": "string",
            "title": "User Prompt",
            "default": ""
          },
          "job_timeout_in_seconds": {
            "type": "number",
            "title": "Job Timeout In Seconds"
          },
          "job_timeout_extra_time_per_page_in_seconds": {
            "type": "number",
            "title": "Job Timeout Extra Time Per Page In Seconds"
          },
          "strict_mode_image_extraction": {
            "type": "boolean",
            "title": "Strict Mode Image Extraction",
            "default": false
          },
          "strict_mode_image_ocr": {
            "type": "boolean",
            "title": "Strict Mode Image Ocr",
            "default": false
          },
          "strict_mode_reconstruction": {
            "type": "boolean",
            "title": "Strict Mode Reconstruction",
            "default": false
          },
          "strict_mode_buggy_font": {
            "type": "boolean",
            "title": "Strict Mode Buggy Font",
            "default": false
          },
          "ignore_document_elements_for_layout_detection": {
            "type": "boolean",
            "title": "Ignore Document Elements For Layout Detection",
            "default": false
          },
          "output_tables_as_HTML": {
            "type": "boolean",
            "title": "Output Tables As Html",
            "default": false
          },
          "use_vendor_multimodal_model": {
            "type": "boolean",
            "title": "Use Vendor Multimodal Model",
            "default": false
          },
          "bounding_box": {
            "type": "string",
            "title": "Bounding Box",
            "default": ""
          },
          "gpt4o_mode": {
            "type": "boolean",
            "title": "Gpt4O Mode",
            "default": false
          },
          "gpt4o_api_key": {
            "type": "string",
            "title": "Gpt4O Api Key",
            "default": ""
          },
          "complemental_formatting_instruction": {
            "type": "string",
            "title": "Complemental Formatting Instruction"
          },
          "content_guideline_instruction": {
            "type": "string",
            "title": "Content Guideline Instruction"
          },
          "premium_mode": {
            "type": "boolean",
            "title": "Premium Mode",
            "default": false
          },
          "is_formatting_instruction": {
            "type": "boolean",
            "title": "Is Formatting Instruction",
            "default": true
          },
          "continuous_mode": {
            "type": "boolean",
            "title": "Continuous Mode",
            "default": false
          },
          "parsing_instruction": {
            "type": "string",
            "title": "Parsing Instruction",
            "default": ""
          },
          "fast_mode": {
            "type": "boolean",
            "title": "Fast Mode",
            "default": false
          },
          "formatting_instruction": {
            "type": "string",
            "title": "Formatting Instruction"
          }
        },
        "type": "object",
        "title": "Body_upload_file_api_parsing_upload_post"
      },
      "Body_upload_file_api_v1_files_post": {
        "properties": {
          "upload_file": {
            "type": "string",
            "format": "binary",
            "title": "Upload File"
          }
        },
        "type": "object",
        "required": ["upload_file"],
        "title": "Body_upload_file_api_v1_files_post"
      },
      "Body_upload_file_api_v1_parsing_upload_post": {
        "properties": {
          "file": {
            "anyOf": [
              {
                "type": "string",
                "format": "binary"
              },
              {
                "type": "null"
              }
            ],
            "title": "File"
          },
          "annotate_links": {
            "type": "boolean",
            "title": "Annotate Links",
            "default": false
          },
          "auto_mode": {
            "type": "boolean",
            "title": "Auto Mode",
            "default": false
          },
          "auto_mode_trigger_on_image_in_page": {
            "type": "boolean",
            "title": "Auto Mode Trigger On Image In Page",
            "default": false
          },
          "auto_mode_trigger_on_table_in_page": {
            "type": "boolean",
            "title": "Auto Mode Trigger On Table In Page",
            "default": false
          },
          "auto_mode_trigger_on_text_in_page": {
            "type": "string",
            "title": "Auto Mode Trigger On Text In Page"
          },
          "auto_mode_trigger_on_regexp_in_page": {
            "type": "string",
            "title": "Auto Mode Trigger On Regexp In Page"
          },
          "azure_openai_api_version": {
            "type": "string",
            "title": "Azure Openai Api Version"
          },
          "azure_openai_deployment_name": {
            "type": "string",
            "title": "Azure Openai Deployment Name"
          },
          "azure_openai_endpoint": {
            "type": "string",
            "title": "Azure Openai Endpoint"
          },
          "azure_openai_key": {
            "type": "string",
            "title": "Azure Openai Key"
          },
          "bbox_bottom": {
            "type": "number",
            "title": "Bbox Bottom"
          },
          "bbox_left": {
            "type": "number",
            "title": "Bbox Left"
          },
          "bbox_right": {
            "type": "number",
            "title": "Bbox Right"
          },
          "bbox_top": {
            "type": "number",
            "title": "Bbox Top"
          },
          "disable_ocr": {
            "type": "boolean",
            "title": "Disable Ocr",
            "default": false
          },
          "disable_reconstruction": {
            "type": "boolean",
            "title": "Disable Reconstruction",
            "default": false
          },
          "disable_image_extraction": {
            "type": "boolean",
            "title": "Disable Image Extraction",
            "default": false
          },
          "do_not_cache": {
            "type": "boolean",
            "title": "Do Not Cache",
            "default": false
          },
          "do_not_unroll_columns": {
            "type": "boolean",
            "title": "Do Not Unroll Columns",
            "default": false
          },
          "extract_charts": {
            "type": "boolean",
            "title": "Extract Charts",
            "default": false
          },
          "guess_xlsx_sheet_name": {
            "type": "boolean",
            "title": "Guess Xlsx Sheet Name",
            "default": false
          },
          "html_make_all_elements_visible": {
            "type": "boolean",
            "title": "Html Make All Elements Visible",
            "default": false
          },
          "html_remove_fixed_elements": {
            "type": "boolean",
            "title": "Html Remove Fixed Elements",
            "default": false
          },
          "html_remove_navigation_elements": {
            "type": "boolean",
            "title": "Html Remove Navigation Elements",
            "default": false
          },
          "http_proxy": {
            "type": "string",
            "title": "Http Proxy"
          },
          "input_s3_path": {
            "type": "string",
            "title": "Input S3 Path",
            "default": ""
          },
          "input_s3_region": {
            "type": "string",
            "title": "Input S3 Region",
            "default": ""
          },
          "input_url": {
            "type": "string",
            "title": "Input Url"
          },
          "invalidate_cache": {
            "type": "boolean",
            "title": "Invalidate Cache",
            "default": false
          },
          "language": {
            "items": {
              "$ref": "#/components/schemas/ParserLanguages"
            },
            "type": "array",
            "title": "Language",
            "default": ["en"]
          },
          "extract_layout": {
            "type": "boolean",
            "title": "Extract Layout",
            "default": false
          },
          "max_pages": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Pages"
          },
          "output_pdf_of_document": {
            "type": "boolean",
            "title": "Output Pdf Of Document",
            "default": false
          },
          "output_s3_path_prefix": {
            "type": "string",
            "title": "Output S3 Path Prefix",
            "default": ""
          },
          "output_s3_region": {
            "type": "string",
            "title": "Output S3 Region",
            "default": ""
          },
          "page_prefix": {
            "type": "string",
            "title": "Page Prefix",
            "default": ""
          },
          "page_separator": {
            "type": "string",
            "title": "Page Separator"
          },
          "page_suffix": {
            "type": "string",
            "title": "Page Suffix",
            "default": ""
          },
          "preserve_layout_alignment_across_pages": {
            "type": "boolean",
            "title": "Preserve Layout Alignment Across Pages",
            "default": false
          },
          "skip_diagonal_text": {
            "type": "boolean",
            "title": "Skip Diagonal Text",
            "default": false
          },
          "spreadsheet_extract_sub_tables": {
            "type": "boolean",
            "title": "Spreadsheet Extract Sub Tables",
            "default": true
          },
          "structured_output": {
            "type": "boolean",
            "title": "Structured Output",
            "default": false
          },
          "structured_output_json_schema": {
            "type": "string",
            "title": "Structured Output Json Schema"
          },
          "structured_output_json_schema_name": {
            "type": "string",
            "title": "Structured Output Json Schema Name"
          },
          "take_screenshot": {
            "type": "boolean",
            "title": "Take Screenshot",
            "default": false
          },
          "target_pages": {
            "type": "string",
            "title": "Target Pages",
            "default": ""
          },
          "vendor_multimodal_api_key": {
            "type": "string",
            "title": "Vendor Multimodal Api Key",
            "default": ""
          },
          "vendor_multimodal_model_name": {
            "type": "string",
            "title": "Vendor Multimodal Model Name"
          },
          "webhook_url": {
            "type": "string",
            "title": "Webhook Url",
            "default": ""
          },
          "parse_mode": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ParsingMode"
              },
              {
                "type": "null"
              }
            ]
          },
          "system_prompt": {
            "type": "string",
            "title": "System Prompt",
            "default": ""
          },
          "system_prompt_append": {
            "type": "string",
            "title": "System Prompt Append",
            "default": ""
          },
          "user_prompt": {
            "type": "string",
            "title": "User Prompt",
            "default": ""
          },
          "job_timeout_in_seconds": {
            "type": "number",
            "title": "Job Timeout In Seconds"
          },
          "job_timeout_extra_time_per_page_in_seconds": {
            "type": "number",
            "title": "Job Timeout Extra Time Per Page In Seconds"
          },
          "strict_mode_image_extraction": {
            "type": "boolean",
            "title": "Strict Mode Image Extraction",
            "default": false
          },
          "strict_mode_image_ocr": {
            "type": "boolean",
            "title": "Strict Mode Image Ocr",
            "default": false
          },
          "strict_mode_reconstruction": {
            "type": "boolean",
            "title": "Strict Mode Reconstruction",
            "default": false
          },
          "strict_mode_buggy_font": {
            "type": "boolean",
            "title": "Strict Mode Buggy Font",
            "default": false
          },
          "ignore_document_elements_for_layout_detection": {
            "type": "boolean",
            "title": "Ignore Document Elements For Layout Detection",
            "default": false
          },
          "output_tables_as_HTML": {
            "type": "boolean",
            "title": "Output Tables As Html",
            "default": false
          },
          "use_vendor_multimodal_model": {
            "type": "boolean",
            "title": "Use Vendor Multimodal Model",
            "default": false
          },
          "bounding_box": {
            "type": "string",
            "title": "Bounding Box",
            "default": ""
          },
          "gpt4o_mode": {
            "type": "boolean",
            "title": "Gpt4O Mode",
            "default": false
          },
          "gpt4o_api_key": {
            "type": "string",
            "title": "Gpt4O Api Key",
            "default": ""
          },
          "complemental_formatting_instruction": {
            "type": "string",
            "title": "Complemental Formatting Instruction"
          },
          "content_guideline_instruction": {
            "type": "string",
            "title": "Content Guideline Instruction"
          },
          "premium_mode": {
            "type": "boolean",
            "title": "Premium Mode",
            "default": false
          },
          "is_formatting_instruction": {
            "type": "boolean",
            "title": "Is Formatting Instruction",
            "default": true
          },
          "continuous_mode": {
            "type": "boolean",
            "title": "Continuous Mode",
            "default": false
          },
          "parsing_instruction": {
            "type": "string",
            "title": "Parsing Instruction",
            "default": ""
          },
          "fast_mode": {
            "type": "boolean",
            "title": "Fast Mode",
            "default": false
          },
          "formatting_instruction": {
            "type": "string",
            "title": "Formatting Instruction"
          }
        },
        "type": "object",
        "title": "Body_upload_file_api_v1_parsing_upload_post"
      },
      "BoxAuthMechanism": {
        "type": "string",
        "enum": ["developer_token", "ccg"],
        "title": "BoxAuthMechanism"
      },
      "CharacterChunkingConfig": {
        "properties": {
          "chunk_size": {
            "type": "integer",
            "exclusiveMinimum": 0,
            "title": "Chunk Size",
            "default": 1024
          },
          "chunk_overlap": {
            "type": "integer",
            "title": "Chunk Overlap",
            "default": 200,
            "gte": 0
          },
          "mode": {
            "type": "string",
            "const": "character",
            "title": "Mode",
            "default": "character"
          }
        },
        "type": "object",
        "title": "CharacterChunkingConfig"
      },
      "CharacterSplitter": {
        "properties": {
          "include_metadata": {
            "type": "boolean",
            "title": "Include Metadata",
            "description": "Whether or not to consider metadata when splitting.",
            "default": true
          },
          "include_prev_next_rel": {
            "type": "boolean",
            "title": "Include Prev Next Rel",
            "description": "Include prev/next node relationships.",
            "default": true
          },
          "callback_manager": {
            "title": "Callback Manager"
          },
          "id_func": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Id Func",
            "description": "Function to generate node IDs."
          },
          "chunk_size": {
            "type": "integer",
            "exclusiveMinimum": 0,
            "title": "Chunk Size",
            "description": "The token chunk size for each chunk.",
            "default": 1024
          },
          "chunk_overlap": {
            "type": "integer",
            "minimum": 0,
            "title": "Chunk Overlap",
            "description": "The token overlap of each chunk when splitting.",
            "default": 200
          },
          "separator": {
            "type": "string",
            "title": "Separator",
            "description": "Default separator for splitting into words",
            "default": " "
          },
          "paragraph_separator": {
            "type": "string",
            "title": "Paragraph Separator",
            "description": "Separator between paragraphs.",
            "default": "\n\n\n"
          },
          "secondary_chunking_regex": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Secondary Chunking Regex",
            "description": "Backup regex for splitting into sentences.",
            "default": "[^,.;。？！]+[,.;。？！]?"
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "SentenceSplitter"
          }
        },
        "type": "object",
        "title": "CharacterSplitter",
        "description": "A splitter that splits text into characters."
      },
      "ChatApp": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "Unique identifier"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At",
            "description": "Creation datetime"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At",
            "description": "Update datetime"
          },
          "name": {
            "type": "string",
            "maxLength": 3000,
            "minLength": 1,
            "title": "Name",
            "description": "Name of the chat app"
          },
          "retriever_id": {
            "type": "string",
            "format": "uuid",
            "title": "Retriever Id",
            "description": "ID of the retriever to use for the chat app"
          },
          "llm_config": {
            "$ref": "#/components/schemas/LLMParameters",
            "description": "Configuration for the LLM model to use for the chat app"
          },
          "retrieval_config": {
            "$ref": "#/components/schemas/PresetCompositeRetrievalParams",
            "description": "Configuration for the retrieval model to use for the chat app"
          },
          "project_id": {
            "type": "string",
            "format": "uuid",
            "title": "Project Id",
            "description": "ID of the project the chat app belongs to"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "retriever_id",
          "llm_config",
          "retrieval_config",
          "project_id"
        ],
        "title": "ChatApp",
        "description": "Schema for a chat app"
      },
      "ChatAppCreate": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 3000,
            "minLength": 1,
            "title": "Name",
            "description": "Name of the chat app"
          },
          "retriever_id": {
            "type": "string",
            "format": "uuid",
            "title": "Retriever Id",
            "description": "ID of the retriever to use for the chat app"
          },
          "llm_config": {
            "$ref": "#/components/schemas/LLMParameters",
            "description": "Configuration for the LLM model to use for the chat app"
          },
          "retrieval_config": {
            "$ref": "#/components/schemas/PresetCompositeRetrievalParams",
            "description": "Configuration for the retrieval model to use for the chat app"
          }
        },
        "type": "object",
        "required": ["name", "retriever_id", "llm_config", "retrieval_config"],
        "title": "ChatAppCreate",
        "description": "Schema for creating a new chat app"
      },
      "ChatAppResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "Unique identifier"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At",
            "description": "Creation datetime"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At",
            "description": "Update datetime"
          },
          "name": {
            "type": "string",
            "maxLength": 3000,
            "minLength": 1,
            "title": "Name",
            "description": "Name of the chat app"
          },
          "retriever_id": {
            "type": "string",
            "format": "uuid",
            "title": "Retriever Id",
            "description": "ID of the retriever to use for the chat app"
          },
          "llm_config": {
            "$ref": "#/components/schemas/LLMParameters",
            "description": "Configuration for the LLM model to use for the chat app"
          },
          "retrieval_config": {
            "$ref": "#/components/schemas/PresetCompositeRetrievalParams",
            "description": "Configuration for the retrieval model to use for the chat app"
          },
          "project_id": {
            "type": "string",
            "format": "uuid",
            "title": "Project Id",
            "description": "ID of the project the chat app belongs to"
          },
          "retriever_name": {
            "type": "string",
            "title": "Retriever Name"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "retriever_id",
          "llm_config",
          "retrieval_config",
          "project_id",
          "retriever_name"
        ],
        "title": "ChatAppResponse"
      },
      "ChatAppUpdate": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "llm_config": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/LLMParameters"
              },
              {
                "type": "null"
              }
            ]
          },
          "retrieval_config": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PresetCompositeRetrievalParams"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "title": "ChatAppUpdate",
        "description": "Schema for updating a chat app"
      },
      "ChatData": {
        "properties": {
          "retrieval_parameters": {
            "$ref": "#/components/schemas/PresetRetrievalParams"
          },
          "llm_parameters": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/LLMParameters"
              },
              {
                "type": "null"
              }
            ]
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "base_component"
          }
        },
        "type": "object",
        "title": "ChatData"
      },
      "ChatInputParams": {
        "properties": {
          "messages": {
            "items": {
              "$ref": "#/components/schemas/InputMessage"
            },
            "type": "array",
            "title": "Messages"
          },
          "data": {
            "$ref": "#/components/schemas/ChatData"
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "base_component"
          }
        },
        "type": "object",
        "title": "ChatInputParams"
      },
      "CheckoutSessionCreatePayload": {
        "properties": {
          "success_url": {
            "type": "string",
            "minLength": 1,
            "format": "uri",
            "title": "Success Url"
          },
          "cancel_url": {
            "type": "string",
            "minLength": 1,
            "format": "uri",
            "title": "Cancel Url"
          }
        },
        "type": "object",
        "required": ["success_url", "cancel_url"],
        "title": "CheckoutSessionCreatePayload"
      },
      "ChunkMode": {
        "type": "string",
        "enum": ["PAGE", "DOCUMENT", "SECTION"],
        "title": "ChunkMode"
      },
      "CloudAzStorageBlobDataSource": {
        "properties": {
          "supports_access_control": {
            "type": "boolean",
            "const": false,
            "title": "Supports Access Control",
            "default": false
          },
          "container_name": {
            "type": "string",
            "title": "Container Name",
            "description": "The name of the Azure Storage Blob container to read from."
          },
          "account_url": {
            "type": "string",
            "title": "Account Url",
            "description": "The Azure Storage Blob account URL to use for authentication."
          },
          "blob": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Blob",
            "description": "The blob name to read from."
          },
          "prefix": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prefix",
            "description": "The prefix of the Azure Storage Blob objects to read from."
          },
          "account_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Account Name",
            "description": "The Azure Storage Blob account name to use for authentication."
          },
          "account_key": {
            "anyOf": [
              {
                "type": "string",
                "format": "password",
                "writeOnly": true
              },
              {
                "type": "null"
              }
            ],
            "title": "Account Key",
            "description": "The Azure Storage Blob account key to use for authentication."
          },
          "tenant_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tenant Id",
            "description": "The Azure AD tenant ID to use for authentication."
          },
          "client_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Id",
            "description": "The Azure AD client ID to use for authentication."
          },
          "client_secret": {
            "anyOf": [
              {
                "type": "string",
                "format": "password",
                "writeOnly": true
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Secret",
            "description": "The Azure AD client secret to use for authentication."
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "CloudAzStorageBlobDataSource"
          }
        },
        "type": "object",
        "required": ["container_name", "account_url"],
        "title": "CloudAzStorageBlobDataSource"
      },
      "CloudAzureAISearchVectorStore": {
        "properties": {
          "supports_nested_metadata_filters": {
            "type": "boolean",
            "const": true,
            "title": "Supports Nested Metadata Filters",
            "default": true
          },
          "search_service_api_key": {
            "type": "string",
            "format": "password",
            "title": "Search Service Api Key",
            "writeOnly": true
          },
          "search_service_endpoint": {
            "type": "string",
            "title": "Search Service Endpoint"
          },
          "search_service_api_version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Search Service Api Version"
          },
          "index_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Index Name"
          },
          "filterable_metadata_field_keys": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Filterable Metadata Field Keys"
          },
          "embedding_dimension": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Embedding Dimension"
          },
          "client_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Id"
          },
          "client_secret": {
            "anyOf": [
              {
                "type": "string",
                "format": "password",
                "writeOnly": true
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Secret"
          },
          "tenant_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tenant Id"
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "CloudAzureAISearchVectorStore"
          }
        },
        "type": "object",
        "required": ["search_service_api_key", "search_service_endpoint"],
        "title": "CloudAzureAISearchVectorStore",
        "description": "Cloud Azure AI Search Vector Store."
      },
      "CloudBoxDataSource": {
        "properties": {
          "supports_access_control": {
            "type": "boolean",
            "const": false,
            "title": "Supports Access Control",
            "default": false
          },
          "folder_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Folder Id",
            "description": "The ID of the Box folder to read from."
          },
          "authentication_mechanism": {
            "$ref": "#/components/schemas/BoxAuthMechanism",
            "description": "The type of authentication to use (Developer Token or CCG)"
          },
          "developer_token": {
            "anyOf": [
              {
                "type": "string",
                "format": "password",
                "writeOnly": true
              },
              {
                "type": "null"
              }
            ],
            "title": "Developer Token",
            "description": "Developer token for authentication if authentication_mechanism is 'developer_token'."
          },
          "client_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Id",
            "description": "Box API key used for identifying the application the user is authenticating with"
          },
          "client_secret": {
            "anyOf": [
              {
                "type": "string",
                "format": "password",
                "writeOnly": true
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Secret",
            "description": "Box API secret used for making auth requests."
          },
          "user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id",
            "description": "Box User ID, if provided authenticates as user."
          },
          "enterprise_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Enterprise Id",
            "description": "Box Enterprise ID, if provided authenticates as service."
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "CloudBoxDataSource"
          }
        },
        "type": "object",
        "required": ["authentication_mechanism"],
        "title": "CloudBoxDataSource"
      },
      "CloudConfluenceDataSource": {
        "properties": {
          "supports_access_control": {
            "type": "boolean",
            "const": false,
            "title": "Supports Access Control",
            "default": false
          },
          "server_url": {
            "type": "string",
            "title": "Server Url",
            "description": "The server URL of the Confluence instance."
          },
          "authentication_mechanism": {
            "type": "string",
            "title": "Authentication Mechanism",
            "description": "Type of Authentication for connecting to Confluence APIs."
          },
          "user_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Name",
            "description": "The username to use for authentication."
          },
          "api_token": {
            "anyOf": [
              {
                "type": "string",
                "format": "password",
                "writeOnly": true
              },
              {
                "type": "null"
              }
            ],
            "title": "Api Token",
            "description": "The API token to use for authentication."
          },
          "space_key": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Space Key",
            "description": "The space key to read from."
          },
          "page_ids": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Page Ids",
            "description": "The page IDs of the Confluence to read from."
          },
          "cql": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cql",
            "description": "The CQL query to use for fetching pages."
          },
          "label": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Label",
            "description": "The label to use for fetching pages."
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "CloudConfluenceDataSource"
          }
        },
        "type": "object",
        "required": ["server_url", "authentication_mechanism"],
        "title": "CloudConfluenceDataSource"
      },
      "CloudDocument": {
        "properties": {
          "text": {
            "type": "string",
            "title": "Text"
          },
          "metadata": {
            "type": "object",
            "title": "Metadata"
          },
          "excluded_embed_metadata_keys": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Excluded Embed Metadata Keys",
            "default": []
          },
          "excluded_llm_metadata_keys": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Excluded Llm Metadata Keys",
            "default": []
          },
          "page_positions": {
            "anyOf": [
              {
                "items": {
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Page Positions",
            "description": "indices in the CloudDocument.text where a new page begins. e.g. Second page starts at index specified by page_positions[1]."
          },
          "id": {
            "type": "string",
            "title": "Id"
          }
        },
        "type": "object",
        "required": ["text", "metadata", "id"],
        "title": "CloudDocument",
        "description": "Cloud document stored in S3."
      },
      "CloudDocumentCreate": {
        "properties": {
          "text": {
            "type": "string",
            "title": "Text"
          },
          "metadata": {
            "type": "object",
            "title": "Metadata"
          },
          "excluded_embed_metadata_keys": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Excluded Embed Metadata Keys",
            "default": []
          },
          "excluded_llm_metadata_keys": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Excluded Llm Metadata Keys",
            "default": []
          },
          "page_positions": {
            "anyOf": [
              {
                "items": {
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Page Positions",
            "description": "indices in the CloudDocument.text where a new page begins. e.g. Second page starts at index specified by page_positions[1]."
          },
          "id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Id"
          }
        },
        "type": "object",
        "required": ["text", "metadata"],
        "title": "CloudDocumentCreate",
        "description": "Create a new cloud document."
      },
      "CloudGoogleDriveDataSource": {
        "properties": {
          "supports_access_control": {
            "type": "boolean",
            "const": false,
            "title": "Supports Access Control",
            "default": false
          },
          "folder_id": {
            "type": "string",
            "title": "Folder Id",
            "description": "The ID of the Google Drive folder to read from."
          },
          "service_account_key": {
            "type": "object",
            "title": "Service Account Key",
            "description": "The service account key JSON to use for authentication."
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "CloudGoogleDriveDataSource"
          }
        },
        "type": "object",
        "required": ["folder_id", "service_account_key"],
        "title": "CloudGoogleDriveDataSource"
      },
      "CloudJiraDataSource": {
        "properties": {
          "supports_access_control": {
            "type": "boolean",
            "const": false,
            "title": "Supports Access Control",
            "default": false
          },
          "email": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Email",
            "description": "The email address to use for authentication."
          },
          "api_token": {
            "anyOf": [
              {
                "type": "string",
                "format": "password",
                "writeOnly": true
              },
              {
                "type": "null"
              }
            ],
            "title": "Api Token",
            "description": "The API/ Access Token used for Basic, PAT and OAuth2 authentication."
          },
          "server_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Server Url",
            "description": "The server url for Jira Cloud."
          },
          "cloud_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cloud Id",
            "description": "The cloud ID, used in case of OAuth2."
          },
          "authentication_mechanism": {
            "type": "string",
            "title": "Authentication Mechanism",
            "description": "Type of Authentication for connecting to Jira APIs."
          },
          "query": {
            "type": "string",
            "title": "Query",
            "description": "JQL (Jira Query Language) query to search."
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "CloudJiraDataSource"
          }
        },
        "type": "object",
        "required": ["authentication_mechanism", "query"],
        "title": "CloudJiraDataSource",
        "description": "Cloud Jira Data Source integrating JiraReader."
      },
      "CloudMilvusVectorStore": {
        "properties": {
          "supports_nested_metadata_filters": {
            "type": "boolean",
            "const": false,
            "title": "Supports Nested Metadata Filters",
            "default": false
          },
          "uri": {
            "type": "string",
            "title": "Uri"
          },
          "collection_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Collection Name"
          },
          "token": {
            "anyOf": [
              {
                "type": "string",
                "format": "password",
                "writeOnly": true
              },
              {
                "type": "null"
              }
            ],
            "title": "Token"
          },
          "embedding_dimension": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Embedding Dimension"
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "CloudMilvusVectorStore"
          }
        },
        "type": "object",
        "required": ["uri"],
        "title": "CloudMilvusVectorStore",
        "description": "Cloud Milvus Vector Store."
      },
      "CloudMongoDBAtlasVectorSearch": {
        "properties": {
          "supports_nested_metadata_filters": {
            "type": "boolean",
            "const": false,
            "title": "Supports Nested Metadata Filters",
            "default": false
          },
          "mongodb_uri": {
            "type": "string",
            "format": "password",
            "title": "Mongodb Uri",
            "writeOnly": true
          },
          "db_name": {
            "type": "string",
            "title": "Db Name"
          },
          "collection_name": {
            "type": "string",
            "title": "Collection Name"
          },
          "vector_index_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Vector Index Name"
          },
          "fulltext_index_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Fulltext Index Name"
          },
          "embedding_dimension": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Embedding Dimension"
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "CloudMongoDBAtlasVectorSearch"
          }
        },
        "type": "object",
        "required": ["mongodb_uri", "db_name", "collection_name"],
        "title": "CloudMongoDBAtlasVectorSearch",
        "description": "Cloud MongoDB Atlas Vector Store.\n\nThis class is used to store the configuration for a MongoDB Atlas vector store,\nso that it can be created and used in LlamaCloud.\n\nArgs:\n    mongodb_uri (str): URI for connecting to MongoDB Atlas\n    db_name (str): name of the MongoDB database\n    collection_name (str): name of the MongoDB collection\n    vector_index_name (str): name of the MongoDB Atlas vector index\n    fulltext_index_name (str): name of the MongoDB Atlas full-text index"
      },
      "CloudNotionPageDataSource": {
        "properties": {
          "supports_access_control": {
            "type": "boolean",
            "const": false,
            "title": "Supports Access Control",
            "default": false
          },
          "integration_token": {
            "type": "string",
            "format": "password",
            "title": "Integration Token",
            "description": "The integration token to use for authentication.",
            "writeOnly": true
          },
          "database_ids": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Database Ids",
            "description": "The Notion Database Id to read content from."
          },
          "page_ids": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Page Ids",
            "description": "The Page ID's of the Notion to read from."
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "CloudNotionPageDataSource"
          }
        },
        "type": "object",
        "required": ["integration_token"],
        "title": "CloudNotionPageDataSource"
      },
      "CloudOneDriveDataSource": {
        "properties": {
          "supports_access_control": {
            "type": "boolean",
            "const": true,
            "title": "Supports Access Control",
            "default": true
          },
          "user_principal_name": {
            "type": "string",
            "title": "User Principal Name",
            "description": "The user principal name to use for authentication."
          },
          "folder_path": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Folder Path",
            "description": "The path of the OneDrive folder to read from."
          },
          "folder_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Folder Id",
            "description": "The ID of the OneDrive folder to read from."
          },
          "client_id": {
            "type": "string",
            "title": "Client Id",
            "description": "The client ID to use for authentication."
          },
          "client_secret": {
            "type": "string",
            "format": "password",
            "title": "Client Secret",
            "description": "The client secret to use for authentication.",
            "writeOnly": true
          },
          "tenant_id": {
            "type": "string",
            "title": "Tenant Id",
            "description": "The tenant ID to use for authentication."
          },
          "required_exts": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Required Exts",
            "description": "The list of required file extensions."
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "CloudOneDriveDataSource"
          }
        },
        "type": "object",
        "required": [
          "user_principal_name",
          "client_id",
          "client_secret",
          "tenant_id"
        ],
        "title": "CloudOneDriveDataSource"
      },
      "CloudPineconeVectorStore": {
        "properties": {
          "supports_nested_metadata_filters": {
            "type": "boolean",
            "const": true,
            "title": "Supports Nested Metadata Filters",
            "default": true
          },
          "api_key": {
            "type": "string",
            "format": "password",
            "title": "Api Key",
            "description": "The API key for authenticating with Pinecone",
            "writeOnly": true
          },
          "index_name": {
            "type": "string",
            "title": "Index Name"
          },
          "namespace": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Namespace"
          },
          "insert_kwargs": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Insert Kwargs"
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "CloudPineconeVectorStore"
          }
        },
        "type": "object",
        "required": ["api_key", "index_name"],
        "title": "CloudPineconeVectorStore",
        "description": "Cloud Pinecone Vector Store.\n\nThis class is used to store the configuration for a Pinecone vector store, so that it can be\ncreated and used in LlamaCloud.\n\nArgs:\n    api_key (str): API key for authenticating with Pinecone\n    index_name (str): name of the Pinecone index\n    namespace (optional[str]): namespace to use in the Pinecone index\n    insert_kwargs (optional[dict]): additional kwargs to pass during insertion"
      },
      "CloudPostgresVectorStore": {
        "properties": {
          "supports_nested_metadata_filters": {
            "type": "boolean",
            "const": false,
            "title": "Supports Nested Metadata Filters",
            "default": false
          },
          "database": {
            "type": "string",
            "title": "Database"
          },
          "host": {
            "type": "string",
            "title": "Host"
          },
          "password": {
            "type": "string",
            "format": "password",
            "title": "Password",
            "writeOnly": true
          },
          "port": {
            "type": "integer",
            "title": "Port"
          },
          "user": {
            "type": "string",
            "title": "User"
          },
          "table_name": {
            "type": "string",
            "title": "Table Name"
          },
          "schema_name": {
            "type": "string",
            "title": "Schema Name"
          },
          "embed_dim": {
            "type": "integer",
            "title": "Embed Dim"
          },
          "hybrid_search": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Hybrid Search",
            "default": true
          },
          "perform_setup": {
            "type": "boolean",
            "title": "Perform Setup",
            "default": true
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "CloudPostgresVectorStore"
          }
        },
        "type": "object",
        "required": [
          "database",
          "host",
          "password",
          "port",
          "user",
          "table_name",
          "schema_name",
          "embed_dim"
        ],
        "title": "CloudPostgresVectorStore"
      },
      "CloudQdrantVectorStore": {
        "properties": {
          "supports_nested_metadata_filters": {
            "type": "boolean",
            "const": true,
            "title": "Supports Nested Metadata Filters",
            "default": true
          },
          "collection_name": {
            "type": "string",
            "title": "Collection Name"
          },
          "url": {
            "type": "string",
            "title": "Url"
          },
          "api_key": {
            "type": "string",
            "format": "password",
            "title": "Api Key",
            "writeOnly": true
          },
          "max_retries": {
            "type": "integer",
            "title": "Max Retries",
            "default": 3
          },
          "client_kwargs": {
            "type": "object",
            "title": "Client Kwargs"
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "CloudQdrantVectorStore"
          }
        },
        "type": "object",
        "required": ["collection_name", "url", "api_key"],
        "title": "CloudQdrantVectorStore",
        "description": "Cloud Qdrant Vector Store.\n\nThis class is used to store the configuration for a Qdrant vector store, so that it can be\ncreated and used in LlamaCloud.\n\nArgs:\n    collection_name (str): name of the Qdrant collection\n    url (str): url of the Qdrant instance\n    api_key (str): API key for authenticating with Qdrant\n    max_retries (int): maximum number of retries in case of a failure. Defaults to 3\n    client_kwargs (dict): additional kwargs to pass to the Qdrant client"
      },
      "CloudS3DataSource": {
        "properties": {
          "supports_access_control": {
            "type": "boolean",
            "const": false,
            "title": "Supports Access Control",
            "default": false
          },
          "bucket": {
            "type": "string",
            "title": "Bucket",
            "description": "The name of the S3 bucket to read from."
          },
          "prefix": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prefix",
            "description": "The prefix of the S3 objects to read from."
          },
          "aws_access_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Aws Access Id",
            "description": "The AWS access ID to use for authentication."
          },
          "aws_access_secret": {
            "anyOf": [
              {
                "type": "string",
                "format": "password",
                "writeOnly": true
              },
              {
                "type": "null"
              }
            ],
            "title": "Aws Access Secret",
            "description": "The AWS access secret to use for authentication."
          },
          "s3_endpoint_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "S3 Endpoint Url",
            "description": "The S3 endpoint URL to use for authentication."
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "CloudS3DataSource"
          }
        },
        "type": "object",
        "required": ["bucket"],
        "title": "CloudS3DataSource"
      },
      "CloudSharepointDataSource": {
        "properties": {
          "supports_access_control": {
            "type": "boolean",
            "const": true,
            "title": "Supports Access Control",
            "default": true
          },
          "site_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Site Name",
            "description": "The name of the SharePoint site to download from."
          },
          "site_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Site Id",
            "description": "The ID of the SharePoint site to download from."
          },
          "folder_path": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Folder Path",
            "description": "The path of the Sharepoint folder to read from."
          },
          "folder_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Folder Id",
            "description": "The ID of the Sharepoint folder to read from."
          },
          "drive_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Drive Name",
            "description": "The name of the Sharepoint drive to read from."
          },
          "client_id": {
            "type": "string",
            "title": "Client Id",
            "description": "The client ID to use for authentication."
          },
          "client_secret": {
            "type": "string",
            "format": "password",
            "title": "Client Secret",
            "description": "The client secret to use for authentication.",
            "writeOnly": true
          },
          "tenant_id": {
            "type": "string",
            "title": "Tenant Id",
            "description": "The tenant ID to use for authentication."
          },
          "required_exts": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Required Exts",
            "description": "The list of required file extensions."
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "CloudSharepointDataSource"
          }
        },
        "type": "object",
        "required": ["client_id", "client_secret", "tenant_id"],
        "title": "CloudSharepointDataSource"
      },
      "CloudSlackDataSource": {
        "properties": {
          "supports_access_control": {
            "type": "boolean",
            "const": false,
            "title": "Supports Access Control",
            "default": false
          },
          "slack_token": {
            "type": "string",
            "format": "password",
            "title": "Slack Token",
            "description": "Slack Bot Token.",
            "writeOnly": true
          },
          "channel_ids": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Channel Ids",
            "description": "Slack Channel."
          },
          "latest_date": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Latest Date",
            "description": "Latest date."
          },
          "earliest_date": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Earliest Date",
            "description": "Earliest date."
          },
          "earliest_date_timestamp": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Earliest Date Timestamp",
            "description": "Earliest date timestamp."
          },
          "latest_date_timestamp": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Latest Date Timestamp",
            "description": "Latest date timestamp."
          },
          "channel_patterns": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Channel Patterns",
            "description": "Slack Channel name pattern."
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "CloudSlackDataSource"
          }
        },
        "type": "object",
        "required": ["slack_token"],
        "title": "CloudSlackDataSource"
      },
      "CodeSplitter": {
        "properties": {
          "include_metadata": {
            "type": "boolean",
            "title": "Include Metadata",
            "description": "Whether or not to consider metadata when splitting.",
            "default": true
          },
          "include_prev_next_rel": {
            "type": "boolean",
            "title": "Include Prev Next Rel",
            "description": "Include prev/next node relationships.",
            "default": true
          },
          "callback_manager": {
            "title": "Callback Manager"
          },
          "id_func": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Id Func",
            "description": "Function to generate node IDs."
          },
          "language": {
            "type": "string",
            "title": "Language",
            "description": "The programming language of the code being split."
          },
          "chunk_lines": {
            "type": "integer",
            "exclusiveMinimum": 0,
            "title": "Chunk Lines",
            "description": "The number of lines to include in each chunk.",
            "default": 40
          },
          "chunk_lines_overlap": {
            "type": "integer",
            "exclusiveMinimum": 0,
            "title": "Chunk Lines Overlap",
            "description": "How many lines of code each chunk overlaps with.",
            "default": 15
          },
          "max_chars": {
            "type": "integer",
            "exclusiveMinimum": 0,
            "title": "Max Chars",
            "description": "Maximum number of characters per chunk.",
            "default": 1500
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "CodeSplitter"
          }
        },
        "type": "object",
        "required": ["language"],
        "title": "CodeSplitter",
        "description": "Split code using a AST parser.\n\nThank you to Kevin Lu / SweepAI for suggesting this elegant code splitting solution.\nhttps://docs.sweep.dev/blogs/chunking-2m-files"
      },
      "CohereEmbedding": {
        "properties": {
          "model_name": {
            "type": "string",
            "title": "Model Name",
            "description": "The modelId of the Cohere model to use.",
            "default": "embed-english-v3.0"
          },
          "embed_batch_size": {
            "type": "integer",
            "maximum": 2048,
            "exclusiveMinimum": 0,
            "title": "Embed Batch Size",
            "description": "The batch size for embedding calls.",
            "default": 10
          },
          "num_workers": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Num Workers",
            "description": "The number of workers to use for async embedding calls."
          },
          "api_key": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Api Key",
            "description": "The Cohere API key."
          },
          "truncate": {
            "type": "string",
            "title": "Truncate",
            "description": "Truncation type - START/ END/ NONE",
            "default": "END"
          },
          "input_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Input Type",
            "description": "Model Input type. If not provided, search_document and search_query are used when needed."
          },
          "embedding_type": {
            "type": "string",
            "title": "Embedding Type",
            "description": "Embedding type. If not provided float embedding_type is used when needed.",
            "default": "float"
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "CohereEmbedding"
          }
        },
        "type": "object",
        "required": ["api_key"],
        "title": "CohereEmbedding"
      },
      "CohereEmbeddingConfig": {
        "properties": {
          "type": {
            "type": "string",
            "const": "COHERE_EMBEDDING",
            "title": "Type",
            "description": "Type of the embedding model.",
            "default": "COHERE_EMBEDDING"
          },
          "component": {
            "$ref": "#/components/schemas/CohereEmbedding",
            "description": "Configuration for the Cohere embedding model."
          }
        },
        "type": "object",
        "title": "CohereEmbeddingConfig"
      },
      "CompositeRetrievalMode": {
        "type": "string",
        "enum": ["routing", "full"],
        "title": "CompositeRetrievalMode",
        "description": "Enum for the mode of composite retrieval."
      },
      "CompositeRetrievalParams": {
        "properties": {
          "mode": {
            "$ref": "#/components/schemas/CompositeRetrievalMode",
            "description": "The mode of composite retrieval.",
            "default": "full"
          },
          "rerank_top_n": {
            "type": "integer",
            "title": "Rerank Top N",
            "description": "The number of nodes to retrieve after reranking over retrieved nodes from all retrieval tools.",
            "default": 6
          },
          "query": {
            "type": "string",
            "title": "Query",
            "description": "The query to retrieve against."
          }
        },
        "type": "object",
        "required": ["query"],
        "title": "CompositeRetrievalParams"
      },
      "CompositeRetrievalResult": {
        "properties": {
          "nodes": {
            "items": {
              "$ref": "#/components/schemas/CompositeRetrievedTextNodeWithScore"
            },
            "type": "array",
            "title": "Nodes",
            "description": "The retrieved nodes from the composite retrieval."
          },
          "image_nodes": {
            "items": {
              "$ref": "#/components/schemas/PageScreenshotNodeWithScore"
            },
            "type": "array",
            "title": "Image Nodes",
            "description": "The image nodes retrieved by the pipeline for the given query."
          }
        },
        "type": "object",
        "title": "CompositeRetrievalResult"
      },
      "CompositeRetrievedTextNode": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "The ID of the retrieved node."
          },
          "retriever_id": {
            "type": "string",
            "format": "uuid",
            "title": "Retriever Id",
            "description": "The ID of the retriever this node was retrieved from."
          },
          "retriever_pipeline_name": {
            "type": "string",
            "title": "Retriever Pipeline Name",
            "description": "The name of the retrieval pipeline this node was retrieved from."
          },
          "pipeline_id": {
            "type": "string",
            "format": "uuid",
            "title": "Pipeline Id",
            "description": "The ID of the pipeline this node was retrieved from."
          },
          "metadata": {
            "type": "object",
            "title": "Metadata",
            "description": "Metadata associated with the retrieved node."
          },
          "text": {
            "type": "string",
            "title": "Text",
            "description": "The text of the retrieved node."
          },
          "start_char_idx": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Start Char Idx",
            "description": "The start character index of the retrieved node in the document"
          },
          "end_char_idx": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "End Char Idx",
            "description": "The end character index of the retrieved node in the document"
          }
        },
        "type": "object",
        "required": [
          "id",
          "retriever_id",
          "retriever_pipeline_name",
          "pipeline_id",
          "text",
          "start_char_idx",
          "end_char_idx"
        ],
        "title": "CompositeRetrievedTextNode"
      },
      "CompositeRetrievedTextNodeWithScore": {
        "properties": {
          "node": {
            "$ref": "#/components/schemas/CompositeRetrievedTextNode"
          },
          "score": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Score"
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "CompositeRetrievedTextNodeWithScore"
          }
        },
        "type": "object",
        "required": ["node"],
        "title": "CompositeRetrievedTextNodeWithScore"
      },
      "ConfigurableDataSinkNames": {
        "type": "string",
        "enum": [
          "PINECONE",
          "POSTGRES",
          "QDRANT",
          "AZUREAI_SEARCH",
          "MONGODB_ATLAS",
          "MILVUS"
        ],
        "title": "ConfigurableDataSinkNames"
      },
      "ConfigurableDataSourceNames": {
        "type": "string",
        "enum": [
          "S3",
          "AZURE_STORAGE_BLOB",
          "GOOGLE_DRIVE",
          "MICROSOFT_ONEDRIVE",
          "MICROSOFT_SHAREPOINT",
          "SLACK",
          "NOTION_PAGE",
          "CONFLUENCE",
          "JIRA",
          "BOX"
        ],
        "title": "ConfigurableDataSourceNames"
      },
      "ConfigurableTransformationDefinition": {
        "properties": {
          "label": {
            "type": "string",
            "title": "Label",
            "description": "The label field will be used to display the name of the component in the UI"
          },
          "json_schema": {
            "type": "object",
            "title": "Json Schema",
            "description": "The json_schema field can be used by clients to determine how to construct the component"
          },
          "configurable_transformation_type": {
            "$ref": "#/components/schemas/ConfigurableTransformationNames",
            "description": "The name field will act as the unique identifier of TransformationDefinition objects"
          },
          "transformation_category": {
            "$ref": "#/components/schemas/TransformationCategoryNames",
            "description": "The transformation_category field will be used to group transformations in the UI"
          }
        },
        "type": "object",
        "required": [
          "label",
          "json_schema",
          "configurable_transformation_type",
          "transformation_category"
        ],
        "title": "ConfigurableTransformationDefinition",
        "description": "Schema for a transformation definition."
      },
      "ConfigurableTransformationNames": {
        "type": "string",
        "enum": [
          "CHARACTER_SPLITTER",
          "PAGE_SPLITTER_NODE_PARSER",
          "CODE_NODE_PARSER",
          "SENTENCE_AWARE_NODE_PARSER",
          "TOKEN_AWARE_NODE_PARSER",
          "MARKDOWN_NODE_PARSER",
          "MARKDOWN_ELEMENT_NODE_PARSER"
        ],
        "title": "ConfigurableTransformationNames"
      },
      "ConfiguredTransformationItem": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "configurable_transformation_type": {
            "$ref": "#/components/schemas/ConfigurableTransformationNames",
            "description": "Name for the type of transformation this is (e.g. SIMPLE_NODE_PARSER). Can also be an enum instance of llama_index.ingestion.transformations.ConfigurableTransformations. This will be converted to ConfigurableTransformationNames."
          },
          "component": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/CharacterSplitter"
              },
              {
                "$ref": "#/components/schemas/PageSplitterNodeParser"
              },
              {
                "$ref": "#/components/schemas/CodeSplitter"
              },
              {
                "$ref": "#/components/schemas/SentenceSplitter"
              },
              {
                "$ref": "#/components/schemas/TokenTextSplitter"
              },
              {
                "$ref": "#/components/schemas/MarkdownNodeParser"
              },
              {
                "$ref": "#/components/schemas/MarkdownElementNodeParser"
              }
            ],
            "title": "ConfiguredTransformationItemComponent",
            "description": "Component that implements the transformation"
          }
        },
        "type": "object",
        "required": ["configurable_transformation_type", "component"],
        "title": "ConfiguredTransformationItem",
        "description": "Configured transformations for pipelines.\n\nSimilar to ConfigurableTransformation but includes a few\nmore fields that are useful to the platform."
      },
      "CreateIntentAndCustomerSessionResponse": {
        "properties": {
          "client_secret": {
            "type": "string",
            "title": "Client Secret"
          },
          "customer_session_client_secret": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Session Client Secret"
          }
        },
        "type": "object",
        "required": ["client_secret", "customer_session_client_secret"],
        "title": "CreateIntentAndCustomerSessionResponse"
      },
      "CustomerPortalSessionCreatePayload": {
        "properties": {
          "return_url": {
            "type": "string",
            "minLength": 1,
            "format": "uri",
            "title": "Return Url"
          }
        },
        "type": "object",
        "required": ["return_url"],
        "title": "CustomerPortalSessionCreatePayload"
      },
      "DataSink": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "Unique identifier"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At",
            "description": "Creation datetime"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At",
            "description": "Update datetime"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the data sink."
          },
          "sink_type": {
            "$ref": "#/components/schemas/ConfigurableDataSinkNames"
          },
          "component": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/CloudPineconeVectorStore"
              },
              {
                "$ref": "#/components/schemas/CloudPostgresVectorStore"
              },
              {
                "$ref": "#/components/schemas/CloudQdrantVectorStore"
              },
              {
                "$ref": "#/components/schemas/CloudAzureAISearchVectorStore"
              },
              {
                "$ref": "#/components/schemas/CloudMongoDBAtlasVectorSearch"
              },
              {
                "$ref": "#/components/schemas/CloudMilvusVectorStore"
              }
            ],
            "title": "DataSinkCreateComponent",
            "description": "Component that implements the data sink"
          },
          "project_id": {
            "type": "string",
            "format": "uuid",
            "title": "Project Id"
          }
        },
        "type": "object",
        "required": ["id", "name", "sink_type", "component", "project_id"],
        "title": "DataSink",
        "description": "Schema for a data sink."
      },
      "DataSinkCreate": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the data sink."
          },
          "sink_type": {
            "$ref": "#/components/schemas/ConfigurableDataSinkNames"
          },
          "component": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/CloudPineconeVectorStore"
              },
              {
                "$ref": "#/components/schemas/CloudPostgresVectorStore"
              },
              {
                "$ref": "#/components/schemas/CloudQdrantVectorStore"
              },
              {
                "$ref": "#/components/schemas/CloudAzureAISearchVectorStore"
              },
              {
                "$ref": "#/components/schemas/CloudMongoDBAtlasVectorSearch"
              },
              {
                "$ref": "#/components/schemas/CloudMilvusVectorStore"
              }
            ],
            "title": "DataSinkCreateComponent",
            "description": "Component that implements the data sink"
          }
        },
        "type": "object",
        "required": ["name", "sink_type", "component"],
        "title": "DataSinkCreate",
        "description": "Schema for creating a data sink."
      },
      "DataSinkDefinition": {
        "properties": {
          "label": {
            "type": "string",
            "title": "Label",
            "description": "The label field will be used to display the name of the component in the UI"
          },
          "json_schema": {
            "type": "object",
            "title": "Json Schema",
            "description": "The json_schema field can be used by clients to determine how to construct the component"
          },
          "sink_type": {
            "$ref": "#/components/schemas/ConfigurableDataSinkNames",
            "description": "The name field will act as the unique identifier of DataSinkDefinition objects"
          }
        },
        "type": "object",
        "required": ["label", "json_schema", "sink_type"],
        "title": "DataSinkDefinition",
        "description": "Schema for a data sink definition."
      },
      "DataSinkUpdate": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "The name of the data sink."
          },
          "sink_type": {
            "$ref": "#/components/schemas/ConfigurableDataSinkNames"
          },
          "component": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/CloudPineconeVectorStore"
              },
              {
                "$ref": "#/components/schemas/CloudPostgresVectorStore"
              },
              {
                "$ref": "#/components/schemas/CloudQdrantVectorStore"
              },
              {
                "$ref": "#/components/schemas/CloudAzureAISearchVectorStore"
              },
              {
                "$ref": "#/components/schemas/CloudMongoDBAtlasVectorSearch"
              },
              {
                "$ref": "#/components/schemas/CloudMilvusVectorStore"
              },
              {
                "type": "null"
              }
            ],
            "title": "DataSinkUpdateComponent",
            "description": "Component that implements the data sink"
          }
        },
        "type": "object",
        "required": ["sink_type"],
        "title": "DataSinkUpdate",
        "description": "Schema for updating a data sink."
      },
      "DataSource": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "Unique identifier"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At",
            "description": "Creation datetime"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At",
            "description": "Update datetime"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the data source."
          },
          "source_type": {
            "$ref": "#/components/schemas/ConfigurableDataSourceNames"
          },
          "custom_metadata": {
            "anyOf": [
              {
                "additionalProperties": {
                  "anyOf": [
                    {
                      "type": "object"
                    },
                    {
                      "items": {},
                      "type": "array"
                    },
                    {
                      "type": "string"
                    },
                    {
                      "type": "integer"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "boolean"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Custom Metadata",
            "description": "Custom metadata that will be present on all data loaded from the data source"
          },
          "component": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/CloudS3DataSource"
              },
              {
                "$ref": "#/components/schemas/CloudAzStorageBlobDataSource"
              },
              {
                "$ref": "#/components/schemas/CloudGoogleDriveDataSource"
              },
              {
                "$ref": "#/components/schemas/CloudOneDriveDataSource"
              },
              {
                "$ref": "#/components/schemas/CloudSharepointDataSource"
              },
              {
                "$ref": "#/components/schemas/CloudSlackDataSource"
              },
              {
                "$ref": "#/components/schemas/CloudNotionPageDataSource"
              },
              {
                "$ref": "#/components/schemas/CloudConfluenceDataSource"
              },
              {
                "$ref": "#/components/schemas/CloudJiraDataSource"
              },
              {
                "$ref": "#/components/schemas/CloudBoxDataSource"
              }
            ],
            "title": "DataSourceCreateComponent",
            "description": "Component that implements the data source"
          },
          "project_id": {
            "type": "string",
            "format": "uuid",
            "title": "Project Id"
          }
        },
        "type": "object",
        "required": ["id", "name", "source_type", "component", "project_id"],
        "title": "DataSource",
        "description": "Schema for a data source."
      },
      "DataSourceCreate": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the data source."
          },
          "source_type": {
            "$ref": "#/components/schemas/ConfigurableDataSourceNames"
          },
          "custom_metadata": {
            "anyOf": [
              {
                "additionalProperties": {
                  "anyOf": [
                    {
                      "type": "object"
                    },
                    {
                      "items": {},
                      "type": "array"
                    },
                    {
                      "type": "string"
                    },
                    {
                      "type": "integer"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "boolean"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Custom Metadata",
            "description": "Custom metadata that will be present on all data loaded from the data source"
          },
          "component": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/CloudS3DataSource"
              },
              {
                "$ref": "#/components/schemas/CloudAzStorageBlobDataSource"
              },
              {
                "$ref": "#/components/schemas/CloudGoogleDriveDataSource"
              },
              {
                "$ref": "#/components/schemas/CloudOneDriveDataSource"
              },
              {
                "$ref": "#/components/schemas/CloudSharepointDataSource"
              },
              {
                "$ref": "#/components/schemas/CloudSlackDataSource"
              },
              {
                "$ref": "#/components/schemas/CloudNotionPageDataSource"
              },
              {
                "$ref": "#/components/schemas/CloudConfluenceDataSource"
              },
              {
                "$ref": "#/components/schemas/CloudJiraDataSource"
              },
              {
                "$ref": "#/components/schemas/CloudBoxDataSource"
              }
            ],
            "title": "DataSourceCreateComponent",
            "description": "Component that implements the data source"
          }
        },
        "type": "object",
        "required": ["name", "source_type", "component"],
        "title": "DataSourceCreate",
        "description": "Schema for creating a data source."
      },
      "DataSourceDefinition": {
        "properties": {
          "label": {
            "type": "string",
            "title": "Label",
            "description": "The label field will be used to display the name of the component in the UI"
          },
          "json_schema": {
            "type": "object",
            "title": "Json Schema",
            "description": "The json_schema field can be used by clients to determine how to construct the component"
          },
          "source_type": {
            "$ref": "#/components/schemas/ConfigurableDataSourceNames",
            "description": "The name field will act as the unique identifier of DataSourceDefinition objects"
          }
        },
        "type": "object",
        "required": ["label", "json_schema", "source_type"],
        "title": "DataSourceDefinition",
        "description": "Schema for a data source definition."
      },
      "DataSourceUpdate": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "The name of the data source."
          },
          "source_type": {
            "$ref": "#/components/schemas/ConfigurableDataSourceNames"
          },
          "custom_metadata": {
            "anyOf": [
              {
                "additionalProperties": {
                  "anyOf": [
                    {
                      "type": "object"
                    },
                    {
                      "items": {},
                      "type": "array"
                    },
                    {
                      "type": "string"
                    },
                    {
                      "type": "integer"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "boolean"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Custom Metadata",
            "description": "Custom metadata that will be present on all data loaded from the data source"
          },
          "component": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/CloudS3DataSource"
              },
              {
                "$ref": "#/components/schemas/CloudAzStorageBlobDataSource"
              },
              {
                "$ref": "#/components/schemas/CloudGoogleDriveDataSource"
              },
              {
                "$ref": "#/components/schemas/CloudOneDriveDataSource"
              },
              {
                "$ref": "#/components/schemas/CloudSharepointDataSource"
              },
              {
                "$ref": "#/components/schemas/CloudSlackDataSource"
              },
              {
                "$ref": "#/components/schemas/CloudNotionPageDataSource"
              },
              {
                "$ref": "#/components/schemas/CloudConfluenceDataSource"
              },
              {
                "$ref": "#/components/schemas/CloudJiraDataSource"
              },
              {
                "$ref": "#/components/schemas/CloudBoxDataSource"
              },
              {
                "type": "null"
              }
            ],
            "title": "DataSourceUpdateComponent",
            "description": "Component that implements the data source"
          }
        },
        "type": "object",
        "required": ["source_type"],
        "title": "DataSourceUpdate",
        "description": "Schema for updating a data source."
      },
      "DefaultOrganizationUpdate": {
        "properties": {
          "organization_id": {
            "type": "string",
            "format": "uuid",
            "title": "Organization Id",
            "description": "The organization's ID."
          }
        },
        "type": "object",
        "required": ["organization_id"],
        "title": "DefaultOrganizationUpdate",
        "description": "Schema for updating the default organization for a user."
      },
      "EditSuggestion": {
        "properties": {
          "justification": {
            "type": "string",
            "title": "Justification"
          },
          "blocks": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ReportBlock"
                },
                {
                  "$ref": "#/components/schemas/ReportPlanBlock"
                }
              ]
            },
            "type": "array",
            "title": "Blocks"
          },
          "removed_indices": {
            "items": {
              "type": "integer"
            },
            "type": "array",
            "title": "Removed Indices"
          }
        },
        "type": "object",
        "required": ["justification", "blocks"],
        "title": "EditSuggestion",
        "description": "A suggestion for an edit to a report."
      },
      "EditSuggestionCreate": {
        "properties": {
          "user_query": {
            "type": "string",
            "title": "User Query"
          },
          "chat_history": {
            "items": {
              "$ref": "#/components/schemas/llama_index__core__base__llms__types__ChatMessage"
            },
            "type": "array",
            "title": "Chat History"
          }
        },
        "type": "object",
        "required": ["user_query", "chat_history"],
        "title": "EditSuggestionCreate",
        "description": "A request to suggest edits for a report."
      },
      "ElementSegmentationConfig": {
        "properties": {
          "mode": {
            "type": "string",
            "const": "element",
            "title": "Mode",
            "default": "element"
          }
        },
        "type": "object",
        "title": "ElementSegmentationConfig"
      },
      "EmbeddingModelConfig": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "Unique identifier"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At",
            "description": "Creation datetime"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At",
            "description": "Update datetime"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the embedding model config."
          },
          "embedding_config": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AzureOpenAIEmbeddingConfig"
              },
              {
                "$ref": "#/components/schemas/CohereEmbeddingConfig"
              },
              {
                "$ref": "#/components/schemas/GeminiEmbeddingConfig"
              },
              {
                "$ref": "#/components/schemas/HuggingFaceInferenceAPIEmbeddingConfig"
              },
              {
                "$ref": "#/components/schemas/OpenAIEmbeddingConfig"
              },
              {
                "$ref": "#/components/schemas/VertexAIEmbeddingConfig"
              },
              {
                "$ref": "#/components/schemas/BedrockEmbeddingConfig"
              }
            ],
            "title": "Embedding Config",
            "description": "The embedding configuration for the embedding model config.",
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "AZURE_EMBEDDING": "#/components/schemas/AzureOpenAIEmbeddingConfig",
                "BEDROCK_EMBEDDING": "#/components/schemas/BedrockEmbeddingConfig",
                "COHERE_EMBEDDING": "#/components/schemas/CohereEmbeddingConfig",
                "GEMINI_EMBEDDING": "#/components/schemas/GeminiEmbeddingConfig",
                "HUGGINGFACE_API_EMBEDDING": "#/components/schemas/HuggingFaceInferenceAPIEmbeddingConfig",
                "OPENAI_EMBEDDING": "#/components/schemas/OpenAIEmbeddingConfig",
                "VERTEXAI_EMBEDDING": "#/components/schemas/VertexAIEmbeddingConfig"
              }
            }
          },
          "project_id": {
            "type": "string",
            "format": "uuid",
            "title": "Project Id"
          }
        },
        "type": "object",
        "required": ["id", "name", "embedding_config", "project_id"],
        "title": "EmbeddingModelConfig",
        "description": "Schema for an embedding model config."
      },
      "EmbeddingModelConfigCreate": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the embedding model config."
          },
          "embedding_config": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AzureOpenAIEmbeddingConfig"
              },
              {
                "$ref": "#/components/schemas/CohereEmbeddingConfig"
              },
              {
                "$ref": "#/components/schemas/GeminiEmbeddingConfig"
              },
              {
                "$ref": "#/components/schemas/HuggingFaceInferenceAPIEmbeddingConfig"
              },
              {
                "$ref": "#/components/schemas/OpenAIEmbeddingConfig"
              },
              {
                "$ref": "#/components/schemas/VertexAIEmbeddingConfig"
              },
              {
                "$ref": "#/components/schemas/BedrockEmbeddingConfig"
              }
            ],
            "title": "Embedding Config",
            "description": "The embedding configuration for the embedding model config.",
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "AZURE_EMBEDDING": "#/components/schemas/AzureOpenAIEmbeddingConfig",
                "BEDROCK_EMBEDDING": "#/components/schemas/BedrockEmbeddingConfig",
                "COHERE_EMBEDDING": "#/components/schemas/CohereEmbeddingConfig",
                "GEMINI_EMBEDDING": "#/components/schemas/GeminiEmbeddingConfig",
                "HUGGINGFACE_API_EMBEDDING": "#/components/schemas/HuggingFaceInferenceAPIEmbeddingConfig",
                "OPENAI_EMBEDDING": "#/components/schemas/OpenAIEmbeddingConfig",
                "VERTEXAI_EMBEDDING": "#/components/schemas/VertexAIEmbeddingConfig"
              }
            }
          }
        },
        "type": "object",
        "required": ["name", "embedding_config"],
        "title": "EmbeddingModelConfigCreate"
      },
      "EmbeddingModelConfigUpdate": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "The name of the embedding model config."
          },
          "embedding_config": {
            "anyOf": [
              {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/AzureOpenAIEmbeddingConfig"
                  },
                  {
                    "$ref": "#/components/schemas/CohereEmbeddingConfig"
                  },
                  {
                    "$ref": "#/components/schemas/GeminiEmbeddingConfig"
                  },
                  {
                    "$ref": "#/components/schemas/HuggingFaceInferenceAPIEmbeddingConfig"
                  },
                  {
                    "$ref": "#/components/schemas/OpenAIEmbeddingConfig"
                  },
                  {
                    "$ref": "#/components/schemas/VertexAIEmbeddingConfig"
                  },
                  {
                    "$ref": "#/components/schemas/BedrockEmbeddingConfig"
                  }
                ],
                "discriminator": {
                  "propertyName": "type",
                  "mapping": {
                    "AZURE_EMBEDDING": "#/components/schemas/AzureOpenAIEmbeddingConfig",
                    "BEDROCK_EMBEDDING": "#/components/schemas/BedrockEmbeddingConfig",
                    "COHERE_EMBEDDING": "#/components/schemas/CohereEmbeddingConfig",
                    "GEMINI_EMBEDDING": "#/components/schemas/GeminiEmbeddingConfig",
                    "HUGGINGFACE_API_EMBEDDING": "#/components/schemas/HuggingFaceInferenceAPIEmbeddingConfig",
                    "OPENAI_EMBEDDING": "#/components/schemas/OpenAIEmbeddingConfig",
                    "VERTEXAI_EMBEDDING": "#/components/schemas/VertexAIEmbeddingConfig"
                  }
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Embedding Config",
            "description": "The embedding configuration for the embedding model config."
          }
        },
        "type": "object",
        "title": "EmbeddingModelConfigUpdate"
      },
      "EvalDataset": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "Unique identifier"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At",
            "description": "Creation datetime"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At",
            "description": "Update datetime"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the EvalDataset."
          },
          "project_id": {
            "type": "string",
            "format": "uuid",
            "title": "Project Id"
          }
        },
        "type": "object",
        "required": ["id", "name", "project_id"],
        "title": "EvalDataset",
        "description": "Schema for an eval dataset.\nIncludes the other DB fields like id, created_at, & updated_at."
      },
      "EvalDatasetCreate": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the EvalDataset."
          }
        },
        "type": "object",
        "required": ["name"],
        "title": "EvalDatasetCreate",
        "description": "Schema for creating an eval dataset."
      },
      "EvalDatasetJobParams": {
        "properties": {
          "eval_question_ids": {
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "type": "array",
            "title": "Eval Question Ids",
            "description": "The IDs for the EvalQuestions this execution ran against."
          },
          "eval_execution_params": {
            "$ref": "#/components/schemas/EvalExecutionParams",
            "description": "The parameters for the eval execution."
          }
        },
        "type": "object",
        "required": ["eval_question_ids", "eval_execution_params"],
        "title": "EvalDatasetJobParams",
        "description": "Schema for the parameters of an eval dataset job."
      },
      "EvalDatasetJobRecord": {
        "properties": {
          "job_name": {
            "type": "string",
            "const": "eval_dataset_job",
            "title": "Job Name"
          },
          "partitions": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string"
                }
              ]
            },
            "propertyNames": {
              "$ref": "#/components/schemas/PartitionNames"
            },
            "type": "object",
            "title": "Partitions",
            "description": "The partitions for this execution. Used for determining where to save job output."
          },
          "parameters": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/EvalDatasetJobParams"
              },
              {
                "type": "null"
              }
            ],
            "description": "Additional input parameters for the eval execution."
          },
          "session_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Session Id",
            "description": "The upstream request ID that created this job. Used for tracking the job across services."
          },
          "correlation_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Correlation Id",
            "description": "The correlation ID for this job. Used for tracking the job across services."
          },
          "parent_job_execution_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Parent Job Execution Id",
            "description": "The ID of the parent job execution."
          },
          "user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id",
            "description": "The ID of the user that created this job"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation datetime"
          },
          "project_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Project Id",
            "description": "The ID of the project this job belongs to."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "Unique identifier"
          },
          "status": {
            "$ref": "#/components/schemas/StatusEnum"
          },
          "error_code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error Code"
          },
          "error_message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error Message"
          },
          "attempts": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Attempts",
            "description": "The number of times this job has been attempted",
            "default": 0
          },
          "started_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Started At"
          },
          "ended_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ended At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Update datetime"
          },
          "data": {
            "anyOf": [
              {},
              {
                "type": "null"
              }
            ],
            "title": "Data",
            "description": "Additional metadata for the job execution."
          }
        },
        "type": "object",
        "required": ["job_name", "partitions", "status"],
        "title": "EvalDatasetJobRecord",
        "description": "Schema for job that evaluates an EvalDataset against a pipeline."
      },
      "EvalDatasetUpdate": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the EvalDataset."
          }
        },
        "type": "object",
        "required": ["name"],
        "title": "EvalDatasetUpdate",
        "description": "Schema for updating an eval dataset.\nOnly the name can be updated."
      },
      "EvalExecutionCreate": {
        "properties": {
          "eval_question_ids": {
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "type": "array",
            "title": "Eval Question Ids"
          },
          "params": {
            "$ref": "#/components/schemas/EvalExecutionParamsOverride",
            "description": "The parameters for the eval execution that will override the ones set in the pipeline."
          }
        },
        "type": "object",
        "required": ["eval_question_ids"],
        "title": "EvalExecutionCreate",
        "description": "Schema for creating an eval execution for a given set of questions on a pipeline."
      },
      "EvalExecutionParams": {
        "properties": {
          "llm_model": {
            "$ref": "#/components/schemas/SupportedLLMModelNames",
            "description": "The LLM model to use within eval execution.",
            "default": "GPT_4O"
          },
          "qa_prompt_tmpl": {
            "type": "string",
            "title": "Qa Prompt Tmpl",
            "description": "The template to use for the question answering prompt.",
            "default": "Context information is below.\n---------------------\n{context_str}\n---------------------\nGiven the context information and not prior knowledge, answer the query.\nQuery: {query_str}\nAnswer: "
          }
        },
        "type": "object",
        "title": "EvalExecutionParams",
        "description": "Schema for the params for an eval execution."
      },
      "EvalExecutionParamsOverride": {
        "properties": {
          "llm_model": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SupportedLLMModelNames"
              },
              {
                "type": "null"
              }
            ],
            "description": "The LLM model to use within eval execution."
          },
          "qa_prompt_tmpl": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Qa Prompt Tmpl",
            "description": "The template to use for the question answering prompt."
          }
        },
        "type": "object",
        "title": "EvalExecutionParamsOverride",
        "description": "Schema for the params override for an eval execution."
      },
      "EvalMetric": {
        "type": "string",
        "enum": ["RELEVANCY", "FAITHFULNESS"],
        "title": "EvalMetric"
      },
      "EvalQuestion": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "Unique identifier"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At",
            "description": "Creation datetime"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At",
            "description": "Update datetime"
          },
          "content": {
            "type": "string",
            "maxLength": 1000,
            "minLength": 1,
            "title": "Content",
            "description": "The content of the question."
          },
          "eval_dataset_id": {
            "type": "string",
            "format": "uuid",
            "title": "Eval Dataset Id"
          },
          "eval_dataset_index": {
            "type": "integer",
            "title": "Eval Dataset Index",
            "description": "The index at which this question is positioned relative to the other questions in the linked EvalDataset. Client is responsible for setting this correctly.",
            "min": 0
          }
        },
        "type": "object",
        "required": ["id", "content", "eval_dataset_id", "eval_dataset_index"],
        "title": "EvalQuestion"
      },
      "EvalQuestionCreate": {
        "properties": {
          "content": {
            "type": "string",
            "maxLength": 1000,
            "minLength": 1,
            "title": "Content",
            "description": "The content of the question."
          }
        },
        "type": "object",
        "required": ["content"],
        "title": "EvalQuestionCreate"
      },
      "EvalQuestionResult": {
        "properties": {
          "eval_question_id": {
            "type": "string",
            "format": "uuid",
            "title": "Eval Question Id",
            "description": "The ID of the question that was executed."
          },
          "pipeline_id": {
            "type": "string",
            "format": "uuid",
            "title": "Pipeline Id",
            "description": "The ID of the pipeline that the question was executed against."
          },
          "source_nodes": {
            "items": {
              "$ref": "#/components/schemas/TextNode"
            },
            "type": "array",
            "title": "Source Nodes",
            "description": "The nodes retrieved by the pipeline for the given question."
          },
          "answer": {
            "type": "string",
            "title": "Answer",
            "description": "The answer to the question."
          },
          "eval_metrics": {
            "additionalProperties": {
              "$ref": "#/components/schemas/MetricResult"
            },
            "propertyNames": {
              "$ref": "#/components/schemas/EvalMetric"
            },
            "type": "object",
            "title": "Eval Metrics",
            "description": "The eval metrics for the question."
          },
          "eval_dataset_execution_id": {
            "type": "string",
            "format": "uuid",
            "title": "Eval Dataset Execution Id",
            "description": "The ID of the EvalDatasetJobRecord that this result was generated from."
          },
          "eval_dataset_execution_params": {
            "$ref": "#/components/schemas/EvalExecutionParams",
            "description": "The EvalExecutionParams that were used when this result was generated."
          },
          "eval_finished_at": {
            "type": "string",
            "format": "date-time",
            "title": "Eval Finished At",
            "description": "The timestamp when the eval finished."
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "EvalQuestionResult"
          }
        },
        "type": "object",
        "required": [
          "eval_question_id",
          "pipeline_id",
          "source_nodes",
          "answer",
          "eval_metrics",
          "eval_dataset_execution_id",
          "eval_dataset_execution_params",
          "eval_finished_at"
        ],
        "title": "EvalQuestionResult",
        "description": "Schema for the result of an eval question job."
      },
      "ExtractAgent": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "The id of the extraction agent."
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the extraction agent."
          },
          "project_id": {
            "type": "string",
            "format": "uuid",
            "title": "Project Id",
            "description": "The ID of the project that the extraction agent belongs to."
          },
          "data_schema": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "items": {},
                  "type": "array"
                },
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ]
            },
            "type": "object",
            "title": "Data Schema",
            "description": "The schema of the data."
          },
          "config": {
            "$ref": "#/components/schemas/ExtractConfig",
            "description": "The configuration parameters for the extraction agent."
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At",
            "description": "The creation time of the extraction agent."
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At",
            "description": "The last update time of the extraction agent."
          }
        },
        "type": "object",
        "required": ["id", "name", "project_id", "data_schema", "config"],
        "title": "ExtractAgent",
        "description": "Schema and configuration for creating an extraction agent."
      },
      "ExtractAgentCreate": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 3000,
            "minLength": 1,
            "title": "Name",
            "description": "The name of the extraction schema"
          },
          "data_schema": {
            "anyOf": [
              {
                "additionalProperties": {
                  "anyOf": [
                    {
                      "type": "object"
                    },
                    {
                      "items": {},
                      "type": "array"
                    },
                    {
                      "type": "string"
                    },
                    {
                      "type": "integer"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "boolean"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "type": "object"
              },
              {
                "type": "string"
              }
            ],
            "title": "Data Schema",
            "description": "The schema of the data."
          },
          "config": {
            "$ref": "#/components/schemas/ExtractConfig",
            "description": "The configuration parameters for the extraction agent."
          }
        },
        "type": "object",
        "required": ["name", "data_schema", "config"],
        "title": "ExtractAgentCreate",
        "description": "Settings for creating an extraction agent."
      },
      "ExtractAgentUpdate": {
        "properties": {
          "data_schema": {
            "anyOf": [
              {
                "additionalProperties": {
                  "anyOf": [
                    {
                      "type": "object"
                    },
                    {
                      "items": {},
                      "type": "array"
                    },
                    {
                      "type": "string"
                    },
                    {
                      "type": "integer"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "boolean"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "type": "object"
              },
              {
                "type": "string"
              }
            ],
            "title": "Data Schema",
            "description": "The schema of the data"
          },
          "config": {
            "$ref": "#/components/schemas/ExtractConfig",
            "description": "The configuration parameters for the extraction agent."
          }
        },
        "type": "object",
        "required": ["data_schema", "config"],
        "title": "ExtractAgentUpdate",
        "description": "Settings for updating an extraction schema."
      },
      "ExtractConfig": {
        "properties": {
          "extraction_target": {
            "$ref": "#/components/schemas/ExtractTarget",
            "description": "The extraction target specified.",
            "default": "PER_DOC"
          },
          "extraction_mode": {
            "$ref": "#/components/schemas/ExtractMode",
            "description": "The extraction mode specified.",
            "default": "ACCURATE"
          },
          "handle_missing": {
            "type": "boolean",
            "title": "Handle Missing",
            "description": "Whether to handle missing fields in the schema.",
            "default": false
          },
          "system_prompt": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "System Prompt",
            "description": "The system prompt to use for the extraction."
          }
        },
        "type": "object",
        "title": "ExtractConfig",
        "description": "Additional parameters for the extraction agent."
      },
      "ExtractJob": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "The id of the extraction job"
          },
          "extraction_agent": {
            "$ref": "#/components/schemas/ExtractAgent",
            "description": "The agent that the job was run on."
          },
          "status": {
            "$ref": "#/components/schemas/StatusEnum",
            "description": "The status of the extraction job"
          },
          "error": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error",
            "description": "The error that occurred during extraction"
          },
          "file": {
            "$ref": "#/components/schemas/File",
            "description": "The file that the extract was extracted from"
          }
        },
        "type": "object",
        "required": ["id", "extraction_agent", "status", "file"],
        "title": "ExtractJob"
      },
      "ExtractJobCreate": {
        "properties": {
          "extraction_agent_id": {
            "type": "string",
            "format": "uuid",
            "title": "Extraction Agent Id",
            "description": "The id of the extraction agent"
          },
          "file_id": {
            "type": "string",
            "format": "uuid",
            "title": "File Id",
            "description": "The id of the file"
          },
          "data_schema_override": {
            "anyOf": [
              {
                "additionalProperties": {
                  "anyOf": [
                    {
                      "type": "object"
                    },
                    {
                      "items": {},
                      "type": "array"
                    },
                    {
                      "type": "string"
                    },
                    {
                      "type": "integer"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "boolean"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "type": "object"
              },
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Data Schema Override",
            "description": "The data schema to override the extraction agent's data schema with"
          },
          "config_override": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ExtractConfig"
              },
              {
                "type": "null"
              }
            ],
            "description": "The config to override the extraction agent's config with"
          }
        },
        "type": "object",
        "required": ["extraction_agent_id", "file_id"],
        "title": "ExtractJobCreate",
        "description": "Schema for creating an extraction job."
      },
      "ExtractMode": {
        "type": "string",
        "enum": ["FAST", "ACCURATE"],
        "title": "ExtractMode"
      },
      "ExtractResultset": {
        "properties": {
          "run_id": {
            "type": "string",
            "format": "uuid",
            "title": "Run Id",
            "description": "The id of the extraction run"
          },
          "extraction_agent_id": {
            "type": "string",
            "format": "uuid",
            "title": "Extraction Agent Id",
            "description": "The id of the extraction agent"
          },
          "data": {
            "anyOf": [
              {
                "additionalProperties": {
                  "anyOf": [
                    {
                      "type": "object"
                    },
                    {
                      "items": {},
                      "type": "array"
                    },
                    {
                      "type": "string"
                    },
                    {
                      "type": "integer"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "boolean"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "type": "object"
              },
              {
                "items": {
                  "additionalProperties": {
                    "anyOf": [
                      {
                        "type": "object"
                      },
                      {
                        "items": {},
                        "type": "array"
                      },
                      {
                        "type": "string"
                      },
                      {
                        "type": "integer"
                      },
                      {
                        "type": "number"
                      },
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Data",
            "description": "The data extracted from the file"
          },
          "extraction_metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "items": {},
                  "type": "array"
                },
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ]
            },
            "type": "object",
            "title": "Extraction Metadata",
            "description": "The metadata extracted from the file"
          }
        },
        "type": "object",
        "required": [
          "run_id",
          "extraction_agent_id",
          "data",
          "extraction_metadata"
        ],
        "title": "ExtractResultset",
        "description": "Schema for an extraction resultset."
      },
      "ExtractRun": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "The id of the extraction run"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At",
            "description": "Creation datetime"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At",
            "description": "Update datetime"
          },
          "extraction_agent_id": {
            "type": "string",
            "format": "uuid",
            "title": "Extraction Agent Id",
            "description": "The id of the extraction agent"
          },
          "data_schema": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "items": {},
                  "type": "array"
                },
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ]
            },
            "type": "object",
            "title": "Data Schema",
            "description": "The schema used for extraction"
          },
          "config": {
            "$ref": "#/components/schemas/ExtractConfig",
            "description": "The config used for extraction"
          },
          "file": {
            "$ref": "#/components/schemas/File",
            "description": "The file that the extract was extracted from"
          },
          "status": {
            "$ref": "#/components/schemas/ExtractState",
            "description": "The status of the extraction run"
          },
          "error": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error",
            "description": "The error that occurred during extraction"
          },
          "job_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Job Id",
            "description": "The id of the job that the extraction run belongs to"
          },
          "data": {
            "anyOf": [
              {
                "additionalProperties": {
                  "anyOf": [
                    {
                      "type": "object"
                    },
                    {
                      "items": {},
                      "type": "array"
                    },
                    {
                      "type": "string"
                    },
                    {
                      "type": "integer"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "boolean"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "type": "object"
              },
              {
                "items": {
                  "additionalProperties": {
                    "anyOf": [
                      {
                        "type": "object"
                      },
                      {
                        "items": {},
                        "type": "array"
                      },
                      {
                        "type": "string"
                      },
                      {
                        "type": "integer"
                      },
                      {
                        "type": "number"
                      },
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Data",
            "description": "The data extracted from the file"
          },
          "extraction_metadata": {
            "anyOf": [
              {
                "additionalProperties": {
                  "anyOf": [
                    {
                      "type": "object"
                    },
                    {
                      "items": {},
                      "type": "array"
                    },
                    {
                      "type": "string"
                    },
                    {
                      "type": "integer"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "boolean"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Extraction Metadata",
            "description": "The metadata extracted from the file"
          }
        },
        "type": "object",
        "required": [
          "id",
          "extraction_agent_id",
          "data_schema",
          "config",
          "file",
          "status"
        ],
        "title": "ExtractRun",
        "description": "Schema for an extraction run."
      },
      "ExtractSchemaValidateRequest": {
        "properties": {
          "data_schema": {
            "anyOf": [
              {
                "additionalProperties": {
                  "anyOf": [
                    {
                      "type": "object"
                    },
                    {
                      "items": {},
                      "type": "array"
                    },
                    {
                      "type": "string"
                    },
                    {
                      "type": "integer"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "boolean"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "type": "object"
              },
              {
                "type": "string"
              }
            ],
            "title": "Data Schema"
          }
        },
        "type": "object",
        "required": ["data_schema"],
        "title": "ExtractSchemaValidateRequest"
      },
      "ExtractSchemaValidateResponse": {
        "properties": {
          "data_schema": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "items": {},
                  "type": "array"
                },
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ]
            },
            "type": "object",
            "title": "Data Schema"
          }
        },
        "type": "object",
        "required": ["data_schema"],
        "title": "ExtractSchemaValidateResponse"
      },
      "ExtractState": {
        "type": "string",
        "enum": ["CREATED", "PENDING", "SUCCESS", "ERROR"],
        "title": "ExtractState"
      },
      "ExtractTarget": {
        "type": "string",
        "enum": ["PER_DOC", "PER_PAGE"],
        "title": "ExtractTarget"
      },
      "File": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "Unique identifier"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At",
            "description": "Creation datetime"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At",
            "description": "Update datetime"
          },
          "name": {
            "type": "string",
            "maxLength": 3000,
            "minLength": 1,
            "title": "Name"
          },
          "external_file_id": {
            "type": "string",
            "title": "External File Id",
            "description": "The ID of the file in the external system"
          },
          "file_size": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "File Size",
            "description": "Size of the file in bytes"
          },
          "file_type": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 3000,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "File Type",
            "description": "File type (e.g. pdf, docx, etc.)"
          },
          "project_id": {
            "type": "string",
            "format": "uuid",
            "title": "Project Id",
            "description": "The ID of the project that the file belongs to"
          },
          "last_modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Modified At",
            "description": "The last modified time of the file"
          },
          "resource_info": {
            "anyOf": [
              {
                "additionalProperties": {
                  "anyOf": [
                    {
                      "type": "object"
                    },
                    {
                      "items": {},
                      "type": "array"
                    },
                    {
                      "type": "string"
                    },
                    {
                      "type": "integer"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "boolean"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Resource Info",
            "description": "Resource information for the file"
          },
          "permission_info": {
            "anyOf": [
              {
                "additionalProperties": {
                  "anyOf": [
                    {
                      "type": "object"
                    },
                    {
                      "items": {},
                      "type": "array"
                    },
                    {
                      "type": "string"
                    },
                    {
                      "type": "integer"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "boolean"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Permission Info",
            "description": "Permission information for the file"
          },
          "data_source_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Data Source Id",
            "description": "The ID of the data source that the file belongs to"
          }
        },
        "type": "object",
        "required": ["id", "name", "external_file_id", "project_id"],
        "title": "File",
        "description": "Schema for a file."
      },
      "FileCreate": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 3000,
            "minLength": 1,
            "title": "Name"
          },
          "external_file_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "External File Id",
            "description": "The ID of the file in the external system"
          },
          "file_size": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "File Size",
            "description": "Size of the file in bytes"
          },
          "last_modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Modified At",
            "description": "The last modified time of the file"
          },
          "resource_info": {
            "anyOf": [
              {
                "additionalProperties": {
                  "anyOf": [
                    {
                      "type": "object"
                    },
                    {
                      "items": {},
                      "type": "array"
                    },
                    {
                      "type": "string"
                    },
                    {
                      "type": "integer"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "boolean"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Resource Info",
            "description": "Resource information for the file"
          },
          "permission_info": {
            "anyOf": [
              {
                "additionalProperties": {
                  "anyOf": [
                    {
                      "type": "object"
                    },
                    {
                      "items": {},
                      "type": "array"
                    },
                    {
                      "type": "string"
                    },
                    {
                      "type": "integer"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "boolean"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Permission Info",
            "description": "Permission information for the file"
          },
          "data_source_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Data Source Id",
            "description": "The ID of the data source that the file belongs to"
          }
        },
        "type": "object",
        "required": ["name"],
        "title": "FileCreate"
      },
      "FileCreateFromUrl": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 3000,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "url": {
            "type": "string",
            "minLength": 1,
            "format": "uri",
            "title": "Url",
            "description": "URL of the file to download"
          },
          "proxy_url": {
            "anyOf": [
              {
                "type": "string",
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Proxy Url",
            "description": "URL of the proxy server to use for downloading the file"
          },
          "request_headers": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Request Headers",
            "description": "Headers to include in the request when downloading the file"
          },
          "verify_ssl": {
            "type": "boolean",
            "title": "Verify Ssl",
            "description": "Whether to verify the SSL certificate when downloading the file",
            "default": true
          },
          "follow_redirects": {
            "type": "boolean",
            "title": "Follow Redirects",
            "description": "Whether to follow redirects when downloading the file",
            "default": true
          },
          "resource_info": {
            "anyOf": [
              {
                "additionalProperties": {
                  "anyOf": [
                    {
                      "type": "object"
                    },
                    {
                      "items": {},
                      "type": "array"
                    },
                    {
                      "type": "string"
                    },
                    {
                      "type": "integer"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "boolean"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Resource Info",
            "description": "Resource information for the file"
          }
        },
        "type": "object",
        "required": ["url"],
        "title": "FileCreateFromUrl"
      },
      "FilterCondition": {
        "type": "string",
        "enum": ["and", "or", "not"],
        "title": "FilterCondition",
        "description": "Vector store filter conditions to combine different filters."
      },
      "FilterOperator": {
        "type": "string",
        "enum": [
          "==",
          "\u003E",
          "\u003C",
          "!=",
          "\u003E=",
          "\u003C=",
          "in",
          "nin",
          "any",
          "all",
          "text_match",
          "text_match_insensitive",
          "contains",
          "is_empty"
        ],
        "title": "FilterOperator",
        "description": "Vector store filter operator."
      },
      "GeminiEmbedding": {
        "properties": {
          "model_name": {
            "type": "string",
            "title": "Model Name",
            "description": "The modelId of the Gemini model to use.",
            "default": "models/embedding-001"
          },
          "embed_batch_size": {
            "type": "integer",
            "maximum": 2048,
            "exclusiveMinimum": 0,
            "title": "Embed Batch Size",
            "description": "The batch size for embedding calls.",
            "default": 10
          },
          "num_workers": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Num Workers",
            "description": "The number of workers to use for async embedding calls."
          },
          "title": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Title",
            "description": "Title is only applicable for retrieval_document tasks, and is used to represent a document title. For other tasks, title is invalid.",
            "default": ""
          },
          "task_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Task Type",
            "description": "The task for embedding model.",
            "default": "retrieval_document"
          },
          "api_key": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Api Key",
            "description": "API key to access the model. Defaults to None."
          },
          "api_base": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Api Base",
            "description": "API base to access the model. Defaults to None."
          },
          "transport": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Transport",
            "description": "Transport to access the model. Defaults to None."
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "GeminiEmbedding"
          }
        },
        "type": "object",
        "title": "GeminiEmbedding"
      },
      "GeminiEmbeddingConfig": {
        "properties": {
          "type": {
            "type": "string",
            "const": "GEMINI_EMBEDDING",
            "title": "Type",
            "description": "Type of the embedding model.",
            "default": "GEMINI_EMBEDDING"
          },
          "component": {
            "$ref": "#/components/schemas/GeminiEmbedding",
            "description": "Configuration for the Gemini embedding model."
          }
        },
        "type": "object",
        "title": "GeminiEmbeddingConfig"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "HuggingFaceInferenceAPIEmbedding": {
        "properties": {
          "model_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Model Name",
            "description": "Hugging Face model name. If None, the task will be used."
          },
          "embed_batch_size": {
            "type": "integer",
            "maximum": 2048,
            "exclusiveMinimum": 0,
            "title": "Embed Batch Size",
            "description": "The batch size for embedding calls.",
            "default": 10
          },
          "num_workers": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Num Workers",
            "description": "The number of workers to use for async embedding calls."
          },
          "pooling": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Pooling"
              },
              {
                "type": "null"
              }
            ],
            "description": "Pooling strategy. If None, the model's default pooling is used.",
            "default": "cls"
          },
          "query_instruction": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Query Instruction",
            "description": "Instruction to prepend during query embedding."
          },
          "text_instruction": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Text Instruction",
            "description": "Instruction to prepend during text embedding."
          },
          "token": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Token",
            "description": "Hugging Face token. Will default to the locally saved token. Pass token=False if you don’t want to send your token to the server."
          },
          "timeout": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Timeout",
            "description": "The maximum number of seconds to wait for a response from the server. Loading a new model in Inference API can take up to several minutes. Defaults to None, meaning it will loop until the server is available."
          },
          "headers": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Headers",
            "description": "Additional headers to send to the server. By default only the authorization and user-agent headers are sent. Values in this dictionary will override the default values."
          },
          "cookies": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cookies",
            "description": "Additional cookies to send to the server."
          },
          "task": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Task",
            "description": "Optional task to pick Hugging Face's recommended model, used when model_name is left as default of None."
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "HuggingFaceInferenceAPIEmbedding"
          }
        },
        "type": "object",
        "title": "HuggingFaceInferenceAPIEmbedding"
      },
      "HuggingFaceInferenceAPIEmbeddingConfig": {
        "properties": {
          "type": {
            "type": "string",
            "const": "HUGGINGFACE_API_EMBEDDING",
            "title": "Type",
            "description": "Type of the embedding model.",
            "default": "HUGGINGFACE_API_EMBEDDING"
          },
          "component": {
            "$ref": "#/components/schemas/HuggingFaceInferenceAPIEmbedding",
            "description": "Configuration for the HuggingFace Inference API embedding model."
          }
        },
        "type": "object",
        "title": "HuggingFaceInferenceAPIEmbeddingConfig"
      },
      "ImageBlock": {
        "properties": {
          "block_type": {
            "type": "string",
            "const": "image",
            "title": "Block Type",
            "default": "image"
          },
          "image": {
            "anyOf": [
              {
                "type": "string",
                "format": "binary"
              },
              {
                "type": "null"
              }
            ],
            "title": "Image"
          },
          "path": {
            "anyOf": [
              {
                "type": "string",
                "format": "file-path"
              },
              {
                "type": "null"
              }
            ],
            "title": "Path"
          },
          "url": {
            "anyOf": [
              {
                "type": "string",
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Url"
          },
          "image_mimetype": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Image Mimetype"
          },
          "detail": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "ImageBlock"
      },
      "IngestionErrorResponse": {
        "properties": {
          "job_id": {
            "type": "string",
            "format": "uuid",
            "title": "Job Id",
            "description": "ID of the job that failed."
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "List of errors that occurred during ingestion."
          },
          "step": {
            "$ref": "#/components/schemas/JobNameMapping",
            "description": "Name of the job that failed."
          }
        },
        "type": "object",
        "required": ["job_id", "message", "step"],
        "title": "IngestionErrorResponse"
      },
      "InputMessage": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "ID of the message, if any. a UUID."
          },
          "role": {
            "$ref": "#/components/schemas/MessageRole"
          },
          "content": {
            "type": "string",
            "title": "Content"
          },
          "data": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Data",
            "description": "Additional data to be stored with the message."
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "base_component"
          }
        },
        "type": "object",
        "required": ["role", "content"],
        "title": "InputMessage",
        "description": "This is distinct from a ChatMessage because this schema is enforced by the AI Chat library used in the frontend"
      },
      "IntervalUsageAndPlan": {
        "properties": {
          "start_window": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Start Window"
          },
          "end_window": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "End Window"
          },
          "plan": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Plan"
              },
              {
                "type": "null"
              }
            ]
          },
          "usage": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Usage"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": ["start_window", "end_window", "plan", "usage"],
        "title": "IntervalUsageAndPlan"
      },
      "JobNameMapping": {
        "type": "string",
        "enum": [
          "MANAGED_INGESTION",
          "DATA_SOURCE",
          "FILES_UPDATE",
          "FILE_UPDATER",
          "PARSE",
          "TRANSFORM",
          "INGESTION",
          "METADATA_UPDATE"
        ],
        "title": "JobNameMapping",
        "description": "Enum for mapping original job names to readable names."
      },
      "JobNames": {
        "type": "string",
        "enum": [
          "load_documents_job",
          "load_files_job",
          "playground_job",
          "eval_dataset_job",
          "pipeline_managed_ingestion_job",
          "data_source_managed_ingestion_job",
          "data_source_update_dispatcher_job",
          "pipeline_file_update_dispatcher_job",
          "pipeline_file_updater_job",
          "file_managed_ingestion_job",
          "document_ingestion_job",
          "parse_raw_file_job",
          "llama_parse_transform_job",
          "metadata_update_job",
          "parse_raw_file_job_cached",
          "extraction_job",
          "extract_job",
          "asyncio_test_job"
        ],
        "title": "JobNames",
        "description": "Enum for executable pipeline job names."
      },
      "JobRecord": {
        "properties": {
          "job_name": {
            "$ref": "#/components/schemas/JobNames",
            "description": "The name of the job."
          },
          "partitions": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string"
                }
              ]
            },
            "propertyNames": {
              "$ref": "#/components/schemas/PartitionNames"
            },
            "type": "object",
            "title": "Partitions",
            "description": "The partitions for this execution. Used for determining where to save job output."
          },
          "parameters": {
            "anyOf": [
              {},
              {
                "type": "null"
              }
            ],
            "title": "Parameters",
            "description": "Additional metadata for the job execution."
          },
          "session_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Session Id",
            "description": "The upstream request ID that created this job. Used for tracking the job across services."
          },
          "correlation_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Correlation Id",
            "description": "The correlation ID for this job. Used for tracking the job across services."
          },
          "parent_job_execution_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Parent Job Execution Id",
            "description": "The ID of the parent job execution."
          },
          "user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id",
            "description": "The ID of the user that created this job"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation datetime"
          },
          "project_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Project Id",
            "description": "The ID of the project this job belongs to."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "Unique identifier"
          },
          "status": {
            "$ref": "#/components/schemas/StatusEnum"
          },
          "error_code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error Code"
          },
          "error_message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error Message"
          },
          "attempts": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Attempts",
            "description": "The number of times this job has been attempted",
            "default": 0
          },
          "started_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Started At"
          },
          "ended_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ended At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Update datetime"
          },
          "data": {
            "anyOf": [
              {},
              {
                "type": "null"
              }
            ],
            "title": "Data",
            "description": "Additional metadata for the job execution."
          }
        },
        "type": "object",
        "required": ["job_name", "partitions", "created_at", "status"],
        "title": "JobRecord",
        "description": "Schema for a job's metadata."
      },
      "JobRecordWithUsageMetrics": {
        "properties": {
          "job_record": {
            "$ref": "#/components/schemas/JobRecord"
          },
          "usage_metrics": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/UsageMetricResponse"
              },
              {
                "type": "null"
              }
            ]
          },
          "user": {
            "$ref": "#/components/schemas/UserJobRecord"
          }
        },
        "type": "object",
        "required": ["job_record", "user"],
        "title": "JobRecordWithUsageMetrics"
      },
      "LLM": {
        "properties": {
          "callback_manager": {
            "title": "Callback Manager"
          },
          "system_prompt": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "System Prompt",
            "description": "System prompt for LLM calls."
          },
          "messages_to_prompt": {
            "type": "string",
            "title": "Messages To Prompt",
            "description": "Function to convert a list of messages to an LLM prompt."
          },
          "completion_to_prompt": {
            "type": "string",
            "title": "Completion To Prompt",
            "description": "Function to convert a completion to an LLM prompt."
          },
          "output_parser": {
            "anyOf": [
              {},
              {
                "type": "null"
              }
            ],
            "title": "Output Parser",
            "description": "Output parser to parse, validate, and correct errors programmatically."
          },
          "pydantic_program_mode": {
            "$ref": "#/components/schemas/PydanticProgramMode",
            "default": "default"
          },
          "query_wrapper_prompt": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BasePromptTemplate"
              },
              {
                "type": "null"
              }
            ],
            "description": "Query wrapper prompt for LLM calls."
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "base_component"
          }
        },
        "type": "object",
        "title": "LLM",
        "description": "The LLM class is the main class for interacting with language models.\n\nAttributes:\n    system_prompt (Optional[str]):\n        System prompt for LLM calls.\n    messages_to_prompt (Callable):\n        Function to convert a list of messages to an LLM prompt.\n    completion_to_prompt (Callable):\n        Function to convert a completion to an LLM prompt.\n    output_parser (Optional[BaseOutputParser]):\n        Output parser to parse, validate, and correct errors programmatically.\n    pydantic_program_mode (PydanticProgramMode):\n        Pydantic program mode to use for structured prediction."
      },
      "LLMModelData": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the LLM model."
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "The description of the LLM model."
          },
          "multi_modal": {
            "type": "boolean",
            "title": "Multi Modal",
            "description": "Whether the model supports multi-modal image input"
          },
          "model_name": {
            "type": "string",
            "title": "Model Name",
            "default": "The name of the model."
          }
        },
        "type": "object",
        "required": ["name", "description", "multi_modal"],
        "title": "LLMModelData",
        "description": "Schema for an eval LLM model."
      },
      "LLMParameters": {
        "properties": {
          "model_name": {
            "$ref": "#/components/schemas/SupportedLLMModelNames",
            "description": "The name of the model to use for LLM completions.",
            "default": "GPT_4O_MINI"
          },
          "system_prompt": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "System Prompt",
            "description": "The system prompt to use for the completion."
          },
          "temperature": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Temperature",
            "description": "The temperature value for the model.",
            "default": 0.1
          },
          "use_chain_of_thought_reasoning": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Use Chain Of Thought Reasoning",
            "description": "Whether to use chain of thought reasoning."
          },
          "use_citation": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Use Citation",
            "description": "Whether to show citations in the response.",
            "default": true
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "base_component"
          }
        },
        "type": "object",
        "title": "LLMParameters"
      },
      "LlamaExtractSettings": {
        "properties": {
          "max_file_size": {
            "type": "integer",
            "title": "Max File Size",
            "description": "The maximum file size (in bytes) allowed for the document.",
            "default": 5242880
          },
          "max_tokens": {
            "type": "integer",
            "title": "Max Tokens",
            "description": "The maximum number of tokens allowed for the document.",
            "default": 128000
          },
          "max_pages": {
            "type": "integer",
            "title": "Max Pages",
            "description": "The maximum number of pages allowed for the document.",
            "default": 200
          },
          "chunk_mode": {
            "$ref": "#/components/schemas/ChunkMode",
            "description": "The mode to use for chunking the document.",
            "default": "PAGE"
          },
          "max_chunk_size": {
            "type": "integer",
            "title": "Max Chunk Size",
            "description": "The maximum size of the chunks (in tokens) to use for chunking the document.",
            "default": 5000
          },
          "extraction_agent_config": {
            "additionalProperties": {
              "$ref": "#/components/schemas/StructParseConf"
            },
            "type": "object",
            "title": "Extraction Agent Config",
            "description": "The configuration for the extraction agent."
          },
          "llama_parse_params": {
            "$ref": "#/components/schemas/LlamaParseParameters",
            "description": "LlamaParse related settings.",
            "default": {
              "languages": ["en"],
              "parsing_instruction": "",
              "disable_ocr": false,
              "annotate_links": true,
              "disable_reconstruction": false,
              "disable_image_extraction": false,
              "invalidate_cache": false,
              "output_pdf_of_document": false,
              "do_not_cache": false,
              "fast_mode": false,
              "skip_diagonal_text": false,
              "preserve_layout_alignment_across_pages": false,
              "gpt4o_mode": false,
              "gpt4o_api_key": "",
              "do_not_unroll_columns": false,
              "extract_layout": false,
              "html_make_all_elements_visible": false,
              "html_remove_navigation_elements": false,
              "html_remove_fixed_elements": false,
              "guess_xlsx_sheet_name": false,
              "bounding_box": "",
              "target_pages": "",
              "use_vendor_multimodal_model": false,
              "vendor_multimodal_model_name": "",
              "vendor_multimodal_api_key": "",
              "page_prefix": "",
              "page_suffix": "",
              "webhook_url": "",
              "take_screenshot": false,
              "is_formatting_instruction": true,
              "premium_mode": false,
              "continuous_mode": false,
              "s3_input_path": "",
              "input_s3_region": "",
              "s3_output_path_prefix": "",
              "output_s3_region": "",
              "auto_mode": false,
              "auto_mode_trigger_on_table_in_page": false,
              "auto_mode_trigger_on_image_in_page": false,
              "structured_output": false,
              "extract_charts": false,
              "spreadsheet_extract_sub_tables": false,
              "strict_mode_image_extraction": false,
              "strict_mode_image_ocr": false,
              "strict_mode_reconstruction": false,
              "strict_mode_buggy_font": false,
              "ignore_document_elements_for_layout_detection": false,
              "output_tables_as_HTML": false,
              "internal_is_screenshot_job": false
            }
          }
        },
        "type": "object",
        "title": "LlamaExtractSettings",
        "description": "All settings for the extraction agent. Only the settings in ExtractConfig\nare exposed to the user."
      },
      "LlamaParseParameters": {
        "properties": {
          "languages": {
            "items": {
              "$ref": "#/components/schemas/ParserLanguages"
            },
            "type": "array",
            "minItems": 1,
            "title": "Languages"
          },
          "parsing_instruction": {
            "type": "string",
            "title": "Parsing Instruction",
            "default": ""
          },
          "disable_ocr": {
            "type": "boolean",
            "title": "Disable Ocr",
            "default": false
          },
          "annotate_links": {
            "type": "boolean",
            "title": "Annotate Links",
            "default": false
          },
          "disable_reconstruction": {
            "type": "boolean",
            "title": "Disable Reconstruction",
            "default": false
          },
          "disable_image_extraction": {
            "type": "boolean",
            "title": "Disable Image Extraction",
            "default": false
          },
          "invalidate_cache": {
            "type": "boolean",
            "title": "Invalidate Cache",
            "default": false
          },
          "output_pdf_of_document": {
            "type": "boolean",
            "title": "Output Pdf Of Document",
            "default": false
          },
          "do_not_cache": {
            "type": "boolean",
            "title": "Do Not Cache",
            "default": false
          },
          "fast_mode": {
            "type": "boolean",
            "title": "Fast Mode",
            "default": false
          },
          "skip_diagonal_text": {
            "type": "boolean",
            "title": "Skip Diagonal Text",
            "default": false
          },
          "preserve_layout_alignment_across_pages": {
            "type": "boolean",
            "title": "Preserve Layout Alignment Across Pages",
            "default": false
          },
          "gpt4o_mode": {
            "type": "boolean",
            "title": "Gpt4O Mode",
            "default": false
          },
          "gpt4o_api_key": {
            "type": "string",
            "title": "Gpt4O Api Key",
            "default": ""
          },
          "do_not_unroll_columns": {
            "type": "boolean",
            "title": "Do Not Unroll Columns",
            "default": false
          },
          "extract_layout": {
            "type": "boolean",
            "title": "Extract Layout",
            "default": false
          },
          "html_make_all_elements_visible": {
            "type": "boolean",
            "title": "Html Make All Elements Visible",
            "default": false
          },
          "html_remove_navigation_elements": {
            "type": "boolean",
            "title": "Html Remove Navigation Elements",
            "default": false
          },
          "html_remove_fixed_elements": {
            "type": "boolean",
            "title": "Html Remove Fixed Elements",
            "default": false
          },
          "guess_xlsx_sheet_name": {
            "type": "boolean",
            "title": "Guess Xlsx Sheet Name",
            "default": false
          },
          "page_separator": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Page Separator"
          },
          "bounding_box": {
            "type": "string",
            "title": "Bounding Box",
            "default": ""
          },
          "bbox_top": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Bbox Top"
          },
          "bbox_right": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Bbox Right"
          },
          "bbox_bottom": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Bbox Bottom"
          },
          "bbox_left": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Bbox Left"
          },
          "target_pages": {
            "type": "string",
            "title": "Target Pages",
            "default": ""
          },
          "use_vendor_multimodal_model": {
            "type": "boolean",
            "title": "Use Vendor Multimodal Model",
            "default": false
          },
          "vendor_multimodal_model_name": {
            "type": "string",
            "title": "Vendor Multimodal Model Name",
            "default": ""
          },
          "vendor_multimodal_api_key": {
            "type": "string",
            "title": "Vendor Multimodal Api Key",
            "default": ""
          },
          "page_prefix": {
            "type": "string",
            "title": "Page Prefix",
            "default": ""
          },
          "page_suffix": {
            "type": "string",
            "title": "Page Suffix",
            "default": ""
          },
          "webhook_url": {
            "type": "string",
            "title": "Webhook Url",
            "default": ""
          },
          "take_screenshot": {
            "type": "boolean",
            "title": "Take Screenshot",
            "default": false
          },
          "is_formatting_instruction": {
            "type": "boolean",
            "title": "Is Formatting Instruction",
            "default": true
          },
          "premium_mode": {
            "type": "boolean",
            "title": "Premium Mode",
            "default": false
          },
          "continuous_mode": {
            "type": "boolean",
            "title": "Continuous Mode",
            "default": false
          },
          "s3_input_path": {
            "type": "string",
            "title": "S3 Input Path",
            "default": ""
          },
          "input_s3_region": {
            "type": "string",
            "title": "Input S3 Region",
            "default": ""
          },
          "s3_output_path_prefix": {
            "type": "string",
            "title": "S3 Output Path Prefix",
            "default": ""
          },
          "output_s3_region": {
            "type": "string",
            "title": "Output S3 Region",
            "default": ""
          },
          "project_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Project Id"
          },
          "azure_openai_deployment_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Azure Openai Deployment Name"
          },
          "azure_openai_endpoint": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Azure Openai Endpoint"
          },
          "azure_openai_api_version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Azure Openai Api Version"
          },
          "azure_openai_key": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Azure Openai Key"
          },
          "input_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Input Url"
          },
          "http_proxy": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Http Proxy"
          },
          "auto_mode": {
            "type": "boolean",
            "title": "Auto Mode",
            "default": false
          },
          "auto_mode_trigger_on_regexp_in_page": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Auto Mode Trigger On Regexp In Page"
          },
          "auto_mode_trigger_on_text_in_page": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Auto Mode Trigger On Text In Page"
          },
          "auto_mode_trigger_on_table_in_page": {
            "type": "boolean",
            "title": "Auto Mode Trigger On Table In Page",
            "default": false
          },
          "auto_mode_trigger_on_image_in_page": {
            "type": "boolean",
            "title": "Auto Mode Trigger On Image In Page",
            "default": false
          },
          "structured_output": {
            "type": "boolean",
            "title": "Structured Output",
            "default": false
          },
          "structured_output_json_schema": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Structured Output Json Schema"
          },
          "structured_output_json_schema_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Structured Output Json Schema Name"
          },
          "max_pages": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Pages"
          },
          "max_pages_enforced": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Pages Enforced"
          },
          "extract_charts": {
            "type": "boolean",
            "title": "Extract Charts",
            "default": false
          },
          "formatting_instruction": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Formatting Instruction"
          },
          "complemental_formatting_instruction": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Complemental Formatting Instruction"
          },
          "content_guideline_instruction": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Content Guideline Instruction"
          },
          "spreadsheet_extract_sub_tables": {
            "type": "boolean",
            "title": "Spreadsheet Extract Sub Tables",
            "default": false
          },
          "job_timeout_in_seconds": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Job Timeout In Seconds"
          },
          "job_timeout_extra_time_per_page_in_seconds": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Job Timeout Extra Time Per Page In Seconds"
          },
          "strict_mode_image_extraction": {
            "type": "boolean",
            "title": "Strict Mode Image Extraction",
            "default": false
          },
          "strict_mode_image_ocr": {
            "type": "boolean",
            "title": "Strict Mode Image Ocr",
            "default": false
          },
          "strict_mode_reconstruction": {
            "type": "boolean",
            "title": "Strict Mode Reconstruction",
            "default": false
          },
          "strict_mode_buggy_font": {
            "type": "boolean",
            "title": "Strict Mode Buggy Font",
            "default": false
          },
          "ignore_document_elements_for_layout_detection": {
            "type": "boolean",
            "title": "Ignore Document Elements For Layout Detection",
            "default": false
          },
          "output_tables_as_HTML": {
            "type": "boolean",
            "title": "Output Tables As Html",
            "default": false
          },
          "internal_is_screenshot_job": {
            "type": "boolean",
            "title": "Internal Is Screenshot Job",
            "default": false
          },
          "parse_mode": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ParsingMode"
              },
              {
                "type": "null"
              }
            ]
          },
          "system_prompt": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "System Prompt"
          },
          "system_prompt_append": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "System Prompt Append"
          },
          "user_prompt": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Prompt"
          }
        },
        "type": "object",
        "title": "LlamaParseParameters",
        "description": "Settings that can be configured for how to use LlamaParse to parse files within a LlamaCloud pipeline."
      },
      "LlamaParseSupportedFileExtensions": {
        "type": "string",
        "enum": [
          ".pdf",
          ".doc",
          ".docx",
          ".docm",
          ".dot",
          ".dotx",
          ".dotm",
          ".rtf",
          ".wps",
          ".wpd",
          ".sxw",
          ".stw",
          ".sxg",
          ".pages",
          ".mw",
          ".mcw",
          ".uot",
          ".uof",
          ".uos",
          ".uop",
          ".ppt",
          ".pptx",
          ".pot",
          ".pptm",
          ".potx",
          ".potm",
          ".key",
          ".odp",
          ".odg",
          ".otp",
          ".fopd",
          ".sxi",
          ".sti",
          ".epub",
          ".jpg",
          ".jpeg",
          ".png",
          ".gif",
          ".bmp",
          ".svg",
          ".tiff",
          ".webp",
          ".html",
          ".htm",
          ".xls",
          ".xlsx",
          ".xlsm",
          ".xlsb",
          ".xlw",
          ".csv",
          ".dif",
          ".sylk",
          ".slk",
          ".prn",
          ".numbers",
          ".et",
          ".ods",
          ".fods",
          ".uos1",
          ".uos2",
          ".dbf",
          ".wk1",
          ".wk2",
          ".wk3",
          ".wk4",
          ".wks",
          ".wq1",
          ".wq2",
          ".wb1",
          ".wb2",
          ".wb3",
          ".qpw",
          ".xlr",
          ".eth",
          ".tsv"
        ],
        "title": "LlamaParseSupportedFileExtensions"
      },
      "LocalEval": {
        "properties": {
          "query": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Query",
            "description": "Query string"
          },
          "contexts": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Contexts",
            "description": "Context strings"
          },
          "response": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Response",
            "description": "Response string"
          },
          "passing": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Passing",
            "description": "Binary evaluation result (passing or not)"
          },
          "feedback": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Feedback",
            "description": "Feedback or reasoning for the response"
          },
          "score": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Score",
            "description": "Score for the response"
          },
          "pairwise_source": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Pairwise Source",
            "description": "Used only for pairwise and specifies whether it is from original order of presented answers or flipped order"
          },
          "invalid_result": {
            "type": "boolean",
            "title": "Invalid Result",
            "description": "Whether the evaluation result is an invalid one.",
            "default": false
          },
          "invalid_reason": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Invalid Reason",
            "description": "Reason for invalid evaluation."
          }
        },
        "type": "object",
        "title": "LocalEval",
        "description": "Evaluation result, EvaluationResult from llama_index.\n\nOutput of an BaseEvaluator."
      },
      "LocalEvalResults": {
        "properties": {
          "project_id": {
            "type": "string",
            "format": "uuid",
            "title": "Project Id",
            "description": "The ID of the project."
          },
          "eval_set_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Eval Set Id",
            "description": "The ID of the local eval result set."
          },
          "app_name": {
            "type": "string",
            "title": "App Name",
            "description": "The name of the app."
          },
          "eval_name": {
            "type": "string",
            "title": "Eval Name",
            "description": "The name of the eval."
          },
          "result": {
            "$ref": "#/components/schemas/LocalEval",
            "description": "The eval results."
          }
        },
        "type": "object",
        "required": ["project_id", "app_name", "eval_name", "result"],
        "title": "LocalEvalResults",
        "description": "Schema for the result of a local evaluation."
      },
      "LocalEvalSetCreate": {
        "properties": {
          "app_name": {
            "type": "string",
            "title": "App Name",
            "description": "The name of the app."
          },
          "results": {
            "additionalProperties": {
              "items": {
                "$ref": "#/components/schemas/LocalEval"
              },
              "type": "array"
            },
            "type": "object",
            "title": "Results",
            "description": "The eval results."
          }
        },
        "type": "object",
        "required": ["app_name", "results"],
        "title": "LocalEvalSetCreate",
        "description": "Schema for creating a local eval set."
      },
      "LocalEvalSets": {
        "properties": {
          "eval_set_id": {
            "type": "string",
            "format": "uuid",
            "title": "Eval Set Id",
            "description": "The ID of the eval set."
          },
          "app_name": {
            "type": "string",
            "title": "App Name",
            "description": "The name of the app."
          },
          "upload_time": {
            "type": "string",
            "format": "date-time",
            "title": "Upload Time",
            "description": "The time of the upload."
          }
        },
        "type": "object",
        "required": ["eval_set_id", "app_name", "upload_time"],
        "title": "LocalEvalSets"
      },
      "ManagedIngestionStatus": {
        "type": "string",
        "enum": [
          "NOT_STARTED",
          "IN_PROGRESS",
          "SUCCESS",
          "ERROR",
          "PARTIAL_SUCCESS",
          "CANCELLED"
        ],
        "title": "ManagedIngestionStatus",
        "description": "Status of managed ingestion with partial Updates."
      },
      "ManagedIngestionStatusResponse": {
        "properties": {
          "job_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Job Id",
            "description": "ID of the latest job."
          },
          "deployment_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Deployment Date",
            "description": "Date of the deployment."
          },
          "status": {
            "$ref": "#/components/schemas/ManagedIngestionStatus",
            "description": "Status of the ingestion."
          },
          "error": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/IngestionErrorResponse"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error",
            "description": "List of errors that occurred during ingestion."
          },
          "effective_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Effective At",
            "description": "When the status is effective"
          }
        },
        "type": "object",
        "required": ["status"],
        "title": "ManagedIngestionStatusResponse"
      },
      "MarkdownElementNodeParser": {
        "properties": {
          "include_metadata": {
            "type": "boolean",
            "title": "Include Metadata",
            "description": "Whether or not to consider metadata when splitting.",
            "default": true
          },
          "include_prev_next_rel": {
            "type": "boolean",
            "title": "Include Prev Next Rel",
            "description": "Include prev/next node relationships.",
            "default": true
          },
          "callback_manager": {
            "title": "Callback Manager"
          },
          "id_func": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Id Func",
            "description": "Function to generate node IDs."
          },
          "llm": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/LLM"
              },
              {
                "type": "null"
              }
            ],
            "description": "LLM model to use for summarization."
          },
          "summary_query_str": {
            "type": "string",
            "title": "Summary Query Str",
            "description": "Query string to use for summarization.",
            "default": "What is this table about? Give a very concise summary (imagine you are adding a new caption and summary for this table), and output the real/existing table title/caption if context provided.and output the real/existing table id if context provided.and also output whether or not the table should be kept."
          },
          "num_workers": {
            "type": "integer",
            "title": "Num Workers",
            "description": "Num of workers for async jobs.",
            "default": 4
          },
          "show_progress": {
            "type": "boolean",
            "title": "Show Progress",
            "description": "Whether to show progress.",
            "default": true
          },
          "nested_node_parser": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/NodeParser"
              },
              {
                "type": "null"
              }
            ],
            "description": "Other types of node parsers to handle some types of nodes."
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "MarkdownElementNodeParser"
          }
        },
        "type": "object",
        "title": "MarkdownElementNodeParser",
        "description": "Markdown element node parser.\n\nSplits a markdown document into Text Nodes and Index Nodes corresponding to embedded objects\n(e.g. tables)."
      },
      "MarkdownNodeParser": {
        "properties": {
          "include_metadata": {
            "type": "boolean",
            "title": "Include Metadata",
            "description": "Whether or not to consider metadata when splitting.",
            "default": true
          },
          "include_prev_next_rel": {
            "type": "boolean",
            "title": "Include Prev Next Rel",
            "description": "Include prev/next node relationships.",
            "default": true
          },
          "callback_manager": {
            "title": "Callback Manager"
          },
          "id_func": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Id Func",
            "description": "Function to generate node IDs."
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "base_component"
          }
        },
        "type": "object",
        "title": "MarkdownNodeParser",
        "description": "Markdown node parser.\n\nSplits a document into Nodes using Markdown header-based splitting logic.\nEach node contains its text content and the path of headers leading to it.\n\nArgs:\n    include_metadata (bool): whether to include metadata in nodes\n    include_prev_next_rel (bool): whether to include prev/next relationships"
      },
      "MessageAnnotation": {
        "properties": {
          "type": {
            "type": "string",
            "title": "Type"
          },
          "data": {
            "type": "string",
            "contentMediaType": "application/json",
            "contentSchema": {},
            "title": "Data"
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "base_component"
          }
        },
        "type": "object",
        "required": ["type", "data"],
        "title": "MessageAnnotation"
      },
      "MessageRole": {
        "type": "string",
        "enum": [
          "system",
          "user",
          "assistant",
          "function",
          "tool",
          "chatbot",
          "model"
        ],
        "title": "MessageRole",
        "description": "Message role."
      },
      "MetadataFilter": {
        "properties": {
          "key": {
            "type": "string",
            "title": "Key"
          },
          "value": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "items": {
                  "type": "number"
                },
                "type": "array"
              },
              {
                "items": {
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Value"
          },
          "operator": {
            "$ref": "#/components/schemas/FilterOperator",
            "default": "=="
          }
        },
        "type": "object",
        "required": ["key", "value"],
        "title": "MetadataFilter",
        "description": "Comprehensive metadata filter for vector stores to support more operators.\n\nValue uses Strict* types, as int, float and str are compatible types and were all\nconverted to string before.\n\nSee: https://docs.pydantic.dev/latest/usage/types/#strict-types"
      },
      "MetadataFilters": {
        "properties": {
          "filters": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/MetadataFilter"
                },
                {
                  "$ref": "#/components/schemas/MetadataFilters"
                }
              ]
            },
            "type": "array",
            "title": "Filters"
          },
          "condition": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/FilterCondition"
              },
              {
                "type": "null"
              }
            ],
            "default": "and"
          }
        },
        "type": "object",
        "required": ["filters"],
        "title": "MetadataFilters",
        "description": "Metadata filters for vector stores."
      },
      "MetricResult": {
        "properties": {
          "passing": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Passing",
            "description": "Whether the metric passed or not."
          },
          "score": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Score",
            "description": "The score for the metric."
          },
          "feedback": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Feedback",
            "description": "The reasoning for the metric."
          }
        },
        "type": "object",
        "title": "MetricResult"
      },
      "NodeParser": {
        "properties": {
          "include_metadata": {
            "type": "boolean",
            "title": "Include Metadata",
            "description": "Whether or not to consider metadata when splitting.",
            "default": true
          },
          "include_prev_next_rel": {
            "type": "boolean",
            "title": "Include Prev Next Rel",
            "description": "Include prev/next node relationships.",
            "default": true
          },
          "callback_manager": {
            "title": "Callback Manager"
          },
          "id_func": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Id Func",
            "description": "Function to generate node IDs."
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "base_component"
          }
        },
        "type": "object",
        "title": "NodeParser",
        "description": "Base interface for node parser."
      },
      "NodeRelationship": {
        "type": "string",
        "enum": ["1", "2", "3", "4", "5"],
        "title": "NodeRelationship",
        "description": "Node relationships used in `BaseNode` class.\n\nAttributes:\n    SOURCE: The node is the source document.\n    PREVIOUS: The node is the previous node in the document.\n    NEXT: The node is the next node in the document.\n    PARENT: The node is the parent node in the document.\n    CHILD: The node is a child node in the document."
      },
      "NoneChunkingConfig": {
        "properties": {
          "mode": {
            "type": "string",
            "const": "none",
            "title": "Mode",
            "default": "none"
          }
        },
        "type": "object",
        "title": "NoneChunkingConfig"
      },
      "NoneSegmentationConfig": {
        "properties": {
          "mode": {
            "type": "string",
            "const": "none",
            "title": "Mode",
            "default": "none"
          }
        },
        "type": "object",
        "title": "NoneSegmentationConfig"
      },
      "ObjectType": {
        "type": "string",
        "enum": ["1", "2", "3", "4", "5"],
        "title": "ObjectType"
      },
      "OpenAIEmbedding": {
        "properties": {
          "model_name": {
            "type": "string",
            "title": "Model Name",
            "description": "The name of the OpenAI embedding model.",
            "default": "text-embedding-ada-002"
          },
          "embed_batch_size": {
            "type": "integer",
            "maximum": 2048,
            "exclusiveMinimum": 0,
            "title": "Embed Batch Size",
            "description": "The batch size for embedding calls.",
            "default": 10
          },
          "num_workers": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Num Workers",
            "description": "The number of workers to use for async embedding calls."
          },
          "additional_kwargs": {
            "type": "object",
            "title": "Additional Kwargs",
            "description": "Additional kwargs for the OpenAI API."
          },
          "api_key": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Api Key",
            "description": "The OpenAI API key."
          },
          "api_base": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Api Base",
            "description": "The base URL for OpenAI API.",
            "default": "https://api.openai.com/v1"
          },
          "api_version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Api Version",
            "description": "The version for OpenAI API.",
            "default": ""
          },
          "max_retries": {
            "type": "integer",
            "title": "Max Retries",
            "description": "Maximum number of retries.",
            "default": 10,
            "gte": 0
          },
          "timeout": {
            "type": "number",
            "title": "Timeout",
            "description": "Timeout for each request.",
            "default": 60,
            "gte": 0
          },
          "default_headers": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Default Headers",
            "description": "The default headers for API requests."
          },
          "reuse_client": {
            "type": "boolean",
            "title": "Reuse Client",
            "description": "Reuse the OpenAI client between requests. When doing anything with large volumes of async API calls, setting this to false can improve stability.",
            "default": true
          },
          "dimensions": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Dimensions",
            "description": "The number of dimensions on the output embedding vectors. Works only with v3 embedding models."
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "OpenAIEmbedding"
          }
        },
        "type": "object",
        "title": "OpenAIEmbedding"
      },
      "OpenAIEmbeddingConfig": {
        "properties": {
          "type": {
            "type": "string",
            "const": "OPENAI_EMBEDDING",
            "title": "Type",
            "description": "Type of the embedding model.",
            "default": "OPENAI_EMBEDDING"
          },
          "component": {
            "$ref": "#/components/schemas/OpenAIEmbedding",
            "description": "Configuration for the OpenAI embedding model."
          }
        },
        "type": "object",
        "title": "OpenAIEmbeddingConfig"
      },
      "Organization": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "Unique identifier"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At",
            "description": "Creation datetime"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At",
            "description": "Update datetime"
          },
          "name": {
            "type": "string",
            "maxLength": 3000,
            "minLength": 1,
            "title": "Name",
            "description": "A name for the organization."
          },
          "stripe_customer_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Stripe Customer Id",
            "description": "The Stripe customer ID for the organization."
          },
          "parse_plan_level": {
            "$ref": "#/components/schemas/ParsePlanLevel",
            "description": "Whether the organization is a Parse Premium customer.",
            "default": "DEFAULT"
          }
        },
        "type": "object",
        "required": ["id", "name"],
        "title": "Organization",
        "description": "Schema for an organization."
      },
      "OrganizationCreate": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 3000,
            "minLength": 1,
            "title": "Name",
            "description": "A name for the organization."
          }
        },
        "type": "object",
        "required": ["name"],
        "title": "OrganizationCreate",
        "description": "Schema for creating an organization."
      },
      "OrganizationUpdate": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 3000,
            "minLength": 1,
            "title": "Name",
            "description": "A name for the organization."
          }
        },
        "type": "object",
        "required": ["name"],
        "title": "OrganizationUpdate",
        "description": "Schema for updating an organization."
      },
      "PageFigureMetadata": {
        "properties": {
          "figure_name": {
            "type": "string",
            "title": "Figure Name",
            "description": "The name of the figure"
          },
          "file_id": {
            "type": "string",
            "format": "uuid",
            "title": "File Id",
            "description": "The ID of the file that the figure was taken from"
          },
          "page_index": {
            "type": "integer",
            "minimum": 0,
            "title": "Page Index",
            "description": "The index of the page for which the figure is taken (0-indexed)"
          },
          "figure_size": {
            "type": "integer",
            "minimum": 0,
            "title": "Figure Size",
            "description": "The size of the figure in bytes"
          },
          "is_likely_noise": {
            "type": "boolean",
            "title": "Is Likely Noise",
            "description": "Whether the figure is likely to be noise",
            "default": false
          },
          "confidence": {
            "type": "number",
            "maximum": 1,
            "minimum": 0,
            "title": "Confidence",
            "description": "The confidence of the figure"
          }
        },
        "type": "object",
        "required": [
          "figure_name",
          "file_id",
          "page_index",
          "figure_size",
          "confidence"
        ],
        "title": "PageFigureMetadata"
      },
      "PageScreenshotMetadata": {
        "properties": {
          "page_index": {
            "type": "integer",
            "minimum": 0,
            "title": "Page Index",
            "description": "The index of the page for which the screenshot is taken (0-indexed)"
          },
          "file_id": {
            "type": "string",
            "format": "uuid",
            "title": "File Id",
            "description": "The ID of the file that the page screenshot was taken from"
          },
          "image_size": {
            "type": "integer",
            "minimum": 0,
            "title": "Image Size",
            "description": "The size of the image in bytes"
          },
          "metadata": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata",
            "description": "Metadata for the screenshot"
          }
        },
        "type": "object",
        "required": ["page_index", "file_id", "image_size"],
        "title": "PageScreenshotMetadata"
      },
      "PageScreenshotNodeWithScore": {
        "properties": {
          "node": {
            "$ref": "#/components/schemas/PageScreenshotMetadata"
          },
          "score": {
            "type": "number",
            "title": "Score",
            "description": "The score of the screenshot node"
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "NodeWithScore"
          }
        },
        "type": "object",
        "required": ["node", "score"],
        "title": "PageScreenshotNodeWithScore",
        "description": "Page screenshot metadata with score"
      },
      "PageSegmentationConfig": {
        "properties": {
          "mode": {
            "type": "string",
            "const": "page",
            "title": "Mode",
            "default": "page"
          },
          "page_separator": {
            "type": "string",
            "title": "Page Separator",
            "default": "\n---\n"
          }
        },
        "type": "object",
        "title": "PageSegmentationConfig"
      },
      "PageSplitterNodeParser": {
        "properties": {
          "include_metadata": {
            "type": "boolean",
            "title": "Include Metadata",
            "description": "Whether or not to consider metadata when splitting.",
            "default": true
          },
          "include_prev_next_rel": {
            "type": "boolean",
            "title": "Include Prev Next Rel",
            "description": "Include prev/next node relationships.",
            "default": true
          },
          "callback_manager": {
            "title": "Callback Manager"
          },
          "id_func": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Id Func",
            "description": "Function to generate node IDs."
          },
          "page_separator": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Page Separator",
            "description": "Separator to split text into pages.",
            "default": "\n---\n"
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "base_component"
          }
        },
        "type": "object",
        "title": "PageSplitterNodeParser",
        "description": "Split text into pages."
      },
      "PaginatedJobsHistoryWithMetrics": {
        "properties": {
          "jobs": {
            "items": {
              "$ref": "#/components/schemas/JobRecordWithUsageMetrics"
            },
            "type": "array",
            "title": "Jobs"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "offset": {
            "type": "integer",
            "title": "Offset"
          }
        },
        "type": "object",
        "required": ["jobs", "total_count", "limit", "offset"],
        "title": "PaginatedJobsHistoryWithMetrics"
      },
      "PaginatedListPipelineFilesResponse": {
        "properties": {
          "files": {
            "items": {
              "$ref": "#/components/schemas/PipelineFile"
            },
            "type": "array",
            "title": "Files",
            "description": "The files to list"
          },
          "limit": {
            "type": "integer",
            "title": "Limit",
            "description": "The limit of the files"
          },
          "offset": {
            "type": "integer",
            "title": "Offset",
            "description": "The offset of the files"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count",
            "description": "The total number of files"
          }
        },
        "type": "object",
        "required": ["files", "limit", "offset", "total_count"],
        "title": "PaginatedListPipelineFilesResponse"
      },
      "PaginatedReportResponse": {
        "properties": {
          "report_responses": {
            "items": {
              "$ref": "#/components/schemas/ReportResponse"
            },
            "type": "array",
            "title": "Report Responses"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "offset": {
            "type": "integer",
            "title": "Offset"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "required": ["report_responses", "limit", "offset", "total_count"],
        "title": "PaginatedReportResponse"
      },
      "ParsePlanLevel": {
        "type": "string",
        "enum": ["DEFAULT", "PREMIUM"],
        "title": "ParsePlanLevel",
        "description": "Enum for the Parse plan level."
      },
      "ParserLanguages": {
        "type": "string",
        "enum": [
          "af",
          "az",
          "bs",
          "cs",
          "cy",
          "da",
          "de",
          "en",
          "es",
          "et",
          "fr",
          "ga",
          "hr",
          "hu",
          "id",
          "is",
          "it",
          "ku",
          "la",
          "lt",
          "lv",
          "mi",
          "ms",
          "mt",
          "nl",
          "no",
          "oc",
          "pi",
          "pl",
          "pt",
          "ro",
          "rs_latin",
          "sk",
          "sl",
          "sq",
          "sv",
          "sw",
          "tl",
          "tr",
          "uz",
          "vi",
          "ar",
          "fa",
          "ug",
          "ur",
          "bn",
          "as",
          "mni",
          "ru",
          "rs_cyrillic",
          "be",
          "bg",
          "uk",
          "mn",
          "abq",
          "ady",
          "kbd",
          "ava",
          "dar",
          "inh",
          "che",
          "lbe",
          "lez",
          "tab",
          "tjk",
          "hi",
          "mr",
          "ne",
          "bh",
          "mai",
          "ang",
          "bho",
          "mah",
          "sck",
          "new",
          "gom",
          "sa",
          "bgc",
          "th",
          "ch_sim",
          "ch_tra",
          "ja",
          "ko",
          "ta",
          "te",
          "kn"
        ],
        "title": "ParserLanguages",
        "description": "Enum for representing the languages supported by the parser"
      },
      "ParsingHistoryItem": {
        "properties": {
          "user_id": {
            "type": "string",
            "title": "User Id"
          },
          "day": {
            "type": "string",
            "title": "Day"
          },
          "job_id": {
            "type": "string",
            "title": "Job Id"
          },
          "file_name": {
            "type": "string",
            "title": "File Name"
          },
          "original_file_name": {
            "type": "string",
            "title": "Original File Name"
          },
          "expired": {
            "type": "boolean",
            "title": "Expired",
            "default": false
          },
          "pages": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Pages"
          },
          "images": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Images"
          },
          "time": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Time"
          }
        },
        "type": "object",
        "required": [
          "user_id",
          "day",
          "job_id",
          "file_name",
          "original_file_name"
        ],
        "title": "ParsingHistoryItem"
      },
      "ParsingJob": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "status": {
            "$ref": "#/components/schemas/StatusEnum"
          },
          "error_code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error Code"
          },
          "error_message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error Message"
          }
        },
        "type": "object",
        "required": ["id", "status"],
        "title": "ParsingJob"
      },
      "ParsingJobJsonResult": {
        "properties": {
          "pages": {
            "title": "Pages",
            "description": "The json result of the parsing job"
          },
          "job_metadata": {
            "title": "Job Metadata",
            "description": "Parsing job metadata , including usage"
          }
        },
        "type": "object",
        "required": ["pages", "job_metadata"],
        "title": "ParsingJobJsonResult"
      },
      "ParsingJobMarkdownResult": {
        "properties": {
          "markdown": {
            "type": "string",
            "title": "Markdown",
            "description": "The markdown result of the parsing job"
          },
          "job_metadata": {
            "title": "Job Metadata",
            "description": "Parsing job metadata , including usage"
          }
        },
        "type": "object",
        "required": ["markdown", "job_metadata"],
        "title": "ParsingJobMarkdownResult"
      },
      "ParsingJobStructuredResult": {
        "properties": {
          "structured": {
            "title": "Structured",
            "description": "The json result of the structured parsing job"
          },
          "job_metadata": {
            "title": "Job Metadata",
            "description": "Parsing job metadata , including usage"
          }
        },
        "type": "object",
        "required": ["structured", "job_metadata"],
        "title": "ParsingJobStructuredResult"
      },
      "ParsingJobTextResult": {
        "properties": {
          "text": {
            "type": "string",
            "title": "Text",
            "description": "The text result of the parsing job"
          },
          "job_metadata": {
            "title": "Job Metadata",
            "description": "Parsing job metadata , including usage"
          }
        },
        "type": "object",
        "required": ["text", "job_metadata"],
        "title": "ParsingJobTextResult"
      },
      "ParsingMode": {
        "type": "string",
        "enum": [
          "parse_page_without_llm",
          "parse_page_with_llm",
          "parse_page_with_lvm",
          "parse_page_with_agent",
          "parse_document_with_llm"
        ],
        "title": "ParsingMode",
        "description": "Enum for representing the mode of parsing to be used"
      },
      "ParsingUsage": {
        "properties": {
          "usage_pdf_pages": {
            "type": "integer",
            "title": "Usage Pdf Pages"
          },
          "max_pdf_pages": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Pdf Pages"
          }
        },
        "type": "object",
        "required": ["usage_pdf_pages"],
        "title": "ParsingUsage"
      },
      "PartitionNames": {
        "type": "string",
        "enum": [
          "data_source_id_partition",
          "pipeline_id_partition",
          "eval_dataset_id_partition",
          "file_id_partition",
          "pipeline_file_id_partition",
          "file_parsing_id_partition",
          "extraction_schema_id_partition"
        ],
        "title": "PartitionNames",
        "description": "Enum for dataset partition names."
      },
      "Permission": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "Unique identifier"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At",
            "description": "Creation datetime"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At",
            "description": "Update datetime"
          },
          "name": {
            "type": "string",
            "maxLength": 3000,
            "minLength": 1,
            "title": "Name",
            "description": "A name for the permission."
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "A description for the permission."
          },
          "access": {
            "type": "boolean",
            "title": "Access",
            "description": "Whether the permission is granted or not."
          }
        },
        "type": "object",
        "required": ["id", "name", "description", "access"],
        "title": "Permission",
        "description": "Schema for a permission."
      },
      "Pipeline": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "Unique identifier"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At",
            "description": "Creation datetime"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At",
            "description": "Update datetime"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "project_id": {
            "type": "string",
            "format": "uuid",
            "title": "Project Id"
          },
          "embedding_model_config_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Embedding Model Config Id",
            "description": "The ID of the EmbeddingModelConfig this pipeline is using."
          },
          "pipeline_type": {
            "$ref": "#/components/schemas/PipelineType",
            "description": "Type of pipeline. Either PLAYGROUND or MANAGED.",
            "default": "MANAGED"
          },
          "managed_pipeline_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Managed Pipeline Id",
            "description": "The ID of the ManagedPipeline this playground pipeline is linked to."
          },
          "embedding_config": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AzureOpenAIEmbeddingConfig"
              },
              {
                "$ref": "#/components/schemas/CohereEmbeddingConfig"
              },
              {
                "$ref": "#/components/schemas/GeminiEmbeddingConfig"
              },
              {
                "$ref": "#/components/schemas/HuggingFaceInferenceAPIEmbeddingConfig"
              },
              {
                "$ref": "#/components/schemas/OpenAIEmbeddingConfig"
              },
              {
                "$ref": "#/components/schemas/VertexAIEmbeddingConfig"
              },
              {
                "$ref": "#/components/schemas/BedrockEmbeddingConfig"
              }
            ],
            "title": "Embedding Config",
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "AZURE_EMBEDDING": "#/components/schemas/AzureOpenAIEmbeddingConfig",
                "BEDROCK_EMBEDDING": "#/components/schemas/BedrockEmbeddingConfig",
                "COHERE_EMBEDDING": "#/components/schemas/CohereEmbeddingConfig",
                "GEMINI_EMBEDDING": "#/components/schemas/GeminiEmbeddingConfig",
                "HUGGINGFACE_API_EMBEDDING": "#/components/schemas/HuggingFaceInferenceAPIEmbeddingConfig",
                "OPENAI_EMBEDDING": "#/components/schemas/OpenAIEmbeddingConfig",
                "VERTEXAI_EMBEDDING": "#/components/schemas/VertexAIEmbeddingConfig"
              }
            }
          },
          "configured_transformations": {
            "items": {
              "$ref": "#/components/schemas/ConfiguredTransformationItem"
            },
            "type": "array",
            "title": "Configured Transformations",
            "description": "Deprecated don't use it, List of configured transformations.",
            "default": []
          },
          "config_hash": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PipelineConfigurationHashes"
              },
              {
                "type": "null"
              }
            ],
            "description": "Hashes for the configuration of the pipeline."
          },
          "transform_config": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AutoTransformConfig"
              },
              {
                "$ref": "#/components/schemas/AdvancedModeTransformConfig"
              }
            ],
            "title": "Transform Config",
            "description": "Configuration for the transformation."
          },
          "preset_retrieval_parameters": {
            "$ref": "#/components/schemas/PresetRetrievalParams",
            "description": "Preset retrieval parameters for the pipeline."
          },
          "eval_parameters": {
            "$ref": "#/components/schemas/EvalExecutionParams",
            "description": "Eval parameters for the pipeline."
          },
          "llama_parse_parameters": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/LlamaParseParameters"
              },
              {
                "type": "null"
              }
            ],
            "description": "Settings that can be configured for how to use LlamaParse to parse files within a LlamaCloud pipeline."
          },
          "data_sink": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/DataSink"
              },
              {
                "type": "null"
              }
            ],
            "description": "The data sink for the pipeline. If None, the pipeline will use the fully managed data sink."
          }
        },
        "type": "object",
        "required": ["id", "name", "project_id", "embedding_config"],
        "title": "Pipeline",
        "description": "Schema for a pipeline."
      },
      "PipelineConfigurationHashes": {
        "properties": {
          "embedding_config_hash": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Embedding Config Hash",
            "description": "Hash of the embedding config.",
            "default": ""
          },
          "parsing_config_hash": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Parsing Config Hash",
            "description": "Hash of the llama parse parameters.",
            "default": ""
          },
          "transform_config_hash": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Transform Config Hash",
            "description": "Hash of the transform config.",
            "default": ""
          }
        },
        "type": "object",
        "title": "PipelineConfigurationHashes",
        "description": "Hashes for the configuration of a pipeline."
      },
      "PipelineCreate": {
        "properties": {
          "embedding_config": {
            "anyOf": [
              {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/AzureOpenAIEmbeddingConfig"
                  },
                  {
                    "$ref": "#/components/schemas/CohereEmbeddingConfig"
                  },
                  {
                    "$ref": "#/components/schemas/GeminiEmbeddingConfig"
                  },
                  {
                    "$ref": "#/components/schemas/HuggingFaceInferenceAPIEmbeddingConfig"
                  },
                  {
                    "$ref": "#/components/schemas/OpenAIEmbeddingConfig"
                  },
                  {
                    "$ref": "#/components/schemas/VertexAIEmbeddingConfig"
                  },
                  {
                    "$ref": "#/components/schemas/BedrockEmbeddingConfig"
                  }
                ],
                "discriminator": {
                  "propertyName": "type",
                  "mapping": {
                    "AZURE_EMBEDDING": "#/components/schemas/AzureOpenAIEmbeddingConfig",
                    "BEDROCK_EMBEDDING": "#/components/schemas/BedrockEmbeddingConfig",
                    "COHERE_EMBEDDING": "#/components/schemas/CohereEmbeddingConfig",
                    "GEMINI_EMBEDDING": "#/components/schemas/GeminiEmbeddingConfig",
                    "HUGGINGFACE_API_EMBEDDING": "#/components/schemas/HuggingFaceInferenceAPIEmbeddingConfig",
                    "OPENAI_EMBEDDING": "#/components/schemas/OpenAIEmbeddingConfig",
                    "VERTEXAI_EMBEDDING": "#/components/schemas/VertexAIEmbeddingConfig"
                  }
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Embedding Config"
          },
          "transform_config": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AutoTransformConfig"
              },
              {
                "$ref": "#/components/schemas/AdvancedModeTransformConfig"
              },
              {
                "type": "null"
              }
            ],
            "title": "Transform Config",
            "description": "Configuration for the transformation."
          },
          "configured_transformations": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/ConfiguredTransformationItem"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Configured Transformations",
            "description": "Deprecated, use embedding_config or transform_config instead. configured transformations for the pipeline.",
            "default": []
          },
          "data_sink_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Data Sink Id",
            "description": "Data sink ID. When provided instead of data_sink, the data sink will be looked up by ID."
          },
          "embedding_model_config_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Embedding Model Config Id",
            "description": "Embedding model config ID. When provided instead of embedding_config, the embedding model config will be looked up by ID."
          },
          "data_sink": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/DataSinkCreate"
              },
              {
                "type": "null"
              }
            ],
            "description": "Data sink. When provided instead of data_sink_id, the data sink will be created."
          },
          "preset_retrieval_parameters": {
            "$ref": "#/components/schemas/PresetRetrievalParams",
            "description": "Preset retrieval parameters for the pipeline."
          },
          "eval_parameters": {
            "$ref": "#/components/schemas/EvalExecutionParams",
            "description": "Eval parameters for the pipeline."
          },
          "llama_parse_parameters": {
            "$ref": "#/components/schemas/LlamaParseParameters",
            "description": "Settings that can be configured for how to use LlamaParse to parse files within a LlamaCloud pipeline."
          },
          "name": {
            "type": "string",
            "maxLength": 3000,
            "minLength": 1,
            "title": "Name"
          },
          "pipeline_type": {
            "$ref": "#/components/schemas/PipelineType",
            "description": "Type of pipeline. Either PLAYGROUND or MANAGED.",
            "default": "MANAGED"
          },
          "managed_pipeline_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Managed Pipeline Id",
            "description": "The ID of the ManagedPipeline this playground pipeline is linked to."
          }
        },
        "type": "object",
        "required": ["name"],
        "title": "PipelineCreate",
        "description": "Schema for creating a pipeline."
      },
      "PipelineDataSource": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "Unique identifier"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At",
            "description": "Creation datetime"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At",
            "description": "Update datetime"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the data source."
          },
          "source_type": {
            "$ref": "#/components/schemas/ConfigurableDataSourceNames"
          },
          "custom_metadata": {
            "anyOf": [
              {
                "additionalProperties": {
                  "anyOf": [
                    {
                      "type": "object"
                    },
                    {
                      "items": {},
                      "type": "array"
                    },
                    {
                      "type": "string"
                    },
                    {
                      "type": "integer"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "boolean"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Custom Metadata",
            "description": "Custom metadata that will be present on all data loaded from the data source"
          },
          "component": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/CloudS3DataSource"
              },
              {
                "$ref": "#/components/schemas/CloudAzStorageBlobDataSource"
              },
              {
                "$ref": "#/components/schemas/CloudGoogleDriveDataSource"
              },
              {
                "$ref": "#/components/schemas/CloudOneDriveDataSource"
              },
              {
                "$ref": "#/components/schemas/CloudSharepointDataSource"
              },
              {
                "$ref": "#/components/schemas/CloudSlackDataSource"
              },
              {
                "$ref": "#/components/schemas/CloudNotionPageDataSource"
              },
              {
                "$ref": "#/components/schemas/CloudConfluenceDataSource"
              },
              {
                "$ref": "#/components/schemas/CloudJiraDataSource"
              },
              {
                "$ref": "#/components/schemas/CloudBoxDataSource"
              }
            ],
            "title": "DataSourceCreateComponent",
            "description": "Component that implements the data source"
          },
          "project_id": {
            "type": "string",
            "format": "uuid",
            "title": "Project Id"
          },
          "data_source_id": {
            "type": "string",
            "format": "uuid",
            "title": "Data Source Id",
            "description": "The ID of the data source."
          },
          "pipeline_id": {
            "type": "string",
            "format": "uuid",
            "title": "Pipeline Id",
            "description": "The ID of the pipeline."
          },
          "last_synced_at": {
            "type": "string",
            "format": "date-time",
            "title": "Last Synced At",
            "description": "The last time the data source was automatically synced."
          },
          "sync_interval": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sync Interval",
            "description": "The interval at which the data source should be synced."
          },
          "sync_schedule_set_by": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sync Schedule Set By",
            "description": "The id of the user who set the sync schedule."
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "source_type",
          "component",
          "project_id",
          "data_source_id",
          "pipeline_id",
          "last_synced_at"
        ],
        "title": "PipelineDataSource",
        "description": "Schema for a data source in a pipeline."
      },
      "PipelineDataSourceCreate": {
        "properties": {
          "data_source_id": {
            "type": "string",
            "format": "uuid",
            "title": "Data Source Id",
            "description": "The ID of the data source."
          },
          "sync_interval": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sync Interval",
            "description": "The interval at which the data source should be synced."
          }
        },
        "type": "object",
        "required": ["data_source_id"],
        "title": "PipelineDataSourceCreate",
        "description": "Schema for creating an association between a data source and a pipeline."
      },
      "PipelineDataSourceUpdate": {
        "properties": {
          "sync_interval": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sync Interval",
            "description": "The interval at which the data source should be synced."
          }
        },
        "type": "object",
        "title": "PipelineDataSourceUpdate",
        "description": "Schema for updating an association between a data source and a pipeline."
      },
      "PipelineDeployment": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "Unique identifier"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At",
            "description": "Creation datetime"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At",
            "description": "Update datetime"
          },
          "status": {
            "$ref": "#/components/schemas/ManagedIngestionStatus",
            "description": "Status of the pipeline deployment."
          },
          "started_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Started At",
            "description": "Time the pipeline deployment started."
          },
          "ended_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ended At",
            "description": "Time the pipeline deployment finished."
          }
        },
        "type": "object",
        "required": ["id", "status"],
        "title": "PipelineDeployment"
      },
      "PipelineFile": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "Unique identifier"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At",
            "description": "Creation datetime"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At",
            "description": "Update datetime"
          },
          "name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 3000,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "external_file_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "External File Id",
            "description": "The ID of the file in the external system"
          },
          "file_size": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "File Size",
            "description": "Size of the file in bytes"
          },
          "file_type": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 3000,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "File Type",
            "description": "File type (e.g. pdf, docx, etc.)"
          },
          "project_id": {
            "type": "string",
            "format": "uuid",
            "title": "Project Id",
            "description": "The ID of the project that the file belongs to"
          },
          "last_modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Modified At",
            "description": "The last modified time of the file"
          },
          "resource_info": {
            "anyOf": [
              {
                "additionalProperties": {
                  "anyOf": [
                    {
                      "type": "object"
                    },
                    {
                      "items": {},
                      "type": "array"
                    },
                    {
                      "type": "string"
                    },
                    {
                      "type": "integer"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "boolean"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Resource Info",
            "description": "Resource information for the file"
          },
          "permission_info": {
            "anyOf": [
              {
                "additionalProperties": {
                  "anyOf": [
                    {
                      "type": "object"
                    },
                    {
                      "items": {},
                      "type": "array"
                    },
                    {
                      "type": "string"
                    },
                    {
                      "type": "integer"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "boolean"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Permission Info",
            "description": "Permission information for the file"
          },
          "data_source_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Data Source Id",
            "description": "The ID of the data source that the file belongs to"
          },
          "file_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "File Id",
            "description": "The ID of the file"
          },
          "pipeline_id": {
            "type": "string",
            "format": "uuid",
            "title": "Pipeline Id",
            "description": "The ID of the pipeline that the file is associated with"
          },
          "custom_metadata": {
            "anyOf": [
              {
                "additionalProperties": {
                  "anyOf": [
                    {
                      "type": "object"
                    },
                    {
                      "items": {},
                      "type": "array"
                    },
                    {
                      "type": "string"
                    },
                    {
                      "type": "integer"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "boolean"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Custom Metadata",
            "description": "Custom metadata for the file"
          },
          "config_hash": {
            "anyOf": [
              {
                "additionalProperties": {
                  "anyOf": [
                    {
                      "type": "object"
                    },
                    {
                      "items": {},
                      "type": "array"
                    },
                    {
                      "type": "string"
                    },
                    {
                      "type": "integer"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "boolean"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Config Hash",
            "description": "Hashes for the configuration of the pipeline."
          },
          "indexed_page_count": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Indexed Page Count",
            "description": "The number of pages that have been indexed for this file"
          }
        },
        "type": "object",
        "required": ["id", "project_id", "pipeline_id"],
        "title": "PipelineFile",
        "description": "Schema for a file that is associated with a pipeline."
      },
      "PipelineFileCreate": {
        "properties": {
          "file_id": {
            "type": "string",
            "format": "uuid",
            "title": "File Id",
            "description": "The ID of the file"
          },
          "custom_metadata": {
            "anyOf": [
              {
                "additionalProperties": {
                  "anyOf": [
                    {
                      "type": "object"
                    },
                    {
                      "items": {},
                      "type": "array"
                    },
                    {
                      "type": "string"
                    },
                    {
                      "type": "integer"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "boolean"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Custom Metadata",
            "description": "Custom metadata for the file"
          }
        },
        "type": "object",
        "required": ["file_id"],
        "title": "PipelineFileCreate",
        "description": "Schema for creating a file that is associated with a pipeline."
      },
      "PipelineFileUpdate": {
        "properties": {
          "custom_metadata": {
            "anyOf": [
              {
                "additionalProperties": {
                  "anyOf": [
                    {
                      "type": "object"
                    },
                    {
                      "items": {},
                      "type": "array"
                    },
                    {
                      "type": "string"
                    },
                    {
                      "type": "integer"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "boolean"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Custom Metadata",
            "description": "Custom metadata for the file"
          }
        },
        "type": "object",
        "title": "PipelineFileUpdate",
        "description": "Schema for updating a file that is associated with a pipeline."
      },
      "PipelineType": {
        "type": "string",
        "enum": ["PLAYGROUND", "MANAGED"],
        "title": "PipelineType",
        "description": "Enum for representing the type of a pipeline"
      },
      "PipelineUpdate": {
        "properties": {
          "embedding_config": {
            "anyOf": [
              {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/AzureOpenAIEmbeddingConfig"
                  },
                  {
                    "$ref": "#/components/schemas/CohereEmbeddingConfig"
                  },
                  {
                    "$ref": "#/components/schemas/GeminiEmbeddingConfig"
                  },
                  {
                    "$ref": "#/components/schemas/HuggingFaceInferenceAPIEmbeddingConfig"
                  },
                  {
                    "$ref": "#/components/schemas/OpenAIEmbeddingConfig"
                  },
                  {
                    "$ref": "#/components/schemas/VertexAIEmbeddingConfig"
                  },
                  {
                    "$ref": "#/components/schemas/BedrockEmbeddingConfig"
                  }
                ],
                "discriminator": {
                  "propertyName": "type",
                  "mapping": {
                    "AZURE_EMBEDDING": "#/components/schemas/AzureOpenAIEmbeddingConfig",
                    "BEDROCK_EMBEDDING": "#/components/schemas/BedrockEmbeddingConfig",
                    "COHERE_EMBEDDING": "#/components/schemas/CohereEmbeddingConfig",
                    "GEMINI_EMBEDDING": "#/components/schemas/GeminiEmbeddingConfig",
                    "HUGGINGFACE_API_EMBEDDING": "#/components/schemas/HuggingFaceInferenceAPIEmbeddingConfig",
                    "OPENAI_EMBEDDING": "#/components/schemas/OpenAIEmbeddingConfig",
                    "VERTEXAI_EMBEDDING": "#/components/schemas/VertexAIEmbeddingConfig"
                  }
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Embedding Config"
          },
          "transform_config": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AutoTransformConfig"
              },
              {
                "$ref": "#/components/schemas/AdvancedModeTransformConfig"
              },
              {
                "type": "null"
              }
            ],
            "title": "Transform Config",
            "description": "Configuration for the transformation."
          },
          "configured_transformations": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/ConfiguredTransformationItem"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Configured Transformations",
            "description": "Deprecated, use embedding_config or transform_config instead. configured transformations for the pipeline.",
            "default": []
          },
          "data_sink_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Data Sink Id",
            "description": "Data sink ID. When provided instead of data_sink, the data sink will be looked up by ID."
          },
          "embedding_model_config_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Embedding Model Config Id",
            "description": "Embedding model config ID. When provided instead of embedding_config, the embedding model config will be looked up by ID."
          },
          "data_sink": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/DataSinkCreate"
              },
              {
                "type": "null"
              }
            ],
            "description": "Data sink. When provided instead of data_sink_id, the data sink will be created."
          },
          "preset_retrieval_parameters": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PresetRetrievalParams"
              },
              {
                "type": "null"
              }
            ],
            "description": "Preset retrieval parameters for the pipeline."
          },
          "eval_parameters": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/EvalExecutionParams"
              },
              {
                "type": "null"
              }
            ],
            "description": "Eval parameters for the pipeline."
          },
          "llama_parse_parameters": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/LlamaParseParameters"
              },
              {
                "type": "null"
              }
            ],
            "description": "Settings that can be configured for how to use LlamaParse to parse files within a LlamaCloud pipeline."
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "managed_pipeline_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Managed Pipeline Id",
            "description": "The ID of the ManagedPipeline this playground pipeline is linked to."
          }
        },
        "type": "object",
        "title": "PipelineUpdate",
        "description": "Schema for updating a pipeline."
      },
      "Plan": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The ID of the plan"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "default": "free"
          },
          "total_users": {
            "type": "integer",
            "title": "Total Users",
            "default": 1
          },
          "total_indexes": {
            "type": "integer",
            "title": "Total Indexes",
            "default": 5
          },
          "total_indexed_pages": {
            "type": "integer",
            "title": "Total Indexed Pages",
            "default": 10000
          },
          "credits": {
            "type": "integer",
            "title": "Credits",
            "default": 30000
          },
          "has_payment_method": {
            "type": "boolean",
            "title": "Has Payment Method",
            "default": false
          },
          "free": {
            "type": "boolean",
            "title": "Free",
            "description": "If is a free plan",
            "default": true
          },
          "allowed_index": {
            "type": "boolean",
            "title": "Allowed Index",
            "description": "If is allowed to use indexes",
            "default": true
          },
          "allowed_external_index": {
            "type": "boolean",
            "title": "Allowed External Index",
            "description": "If is allowed to use external data sources or sinks in indexes",
            "default": false
          },
          "starting_on": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Starting On"
          },
          "ending_before": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ending Before"
          }
        },
        "type": "object",
        "required": ["id"],
        "title": "Plan"
      },
      "PlaygroundSession": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "Unique identifier"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At",
            "description": "Creation datetime"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At",
            "description": "Update datetime"
          },
          "pipeline_id": {
            "type": "string",
            "format": "uuid",
            "title": "Pipeline Id"
          },
          "user_id": {
            "type": "string",
            "title": "User Id"
          },
          "llm_params_id": {
            "type": "string",
            "format": "uuid",
            "title": "Llm Params Id"
          },
          "llm_params": {
            "$ref": "#/components/schemas/LLMParameters",
            "description": "LLM parameters last used in this session."
          },
          "retrieval_params_id": {
            "type": "string",
            "format": "uuid",
            "title": "Retrieval Params Id"
          },
          "retrieval_params": {
            "$ref": "#/components/schemas/PresetRetrievalParams",
            "description": "Preset retrieval parameters last used in this session."
          },
          "chat_messages": {
            "items": {
              "$ref": "#/components/schemas/app__schema__chat__ChatMessage"
            },
            "type": "array",
            "title": "Chat Messages",
            "description": "Chat message history for this session."
          }
        },
        "type": "object",
        "required": [
          "id",
          "pipeline_id",
          "user_id",
          "llm_params_id",
          "retrieval_params_id"
        ],
        "title": "PlaygroundSession",
        "description": "A playground session for a user."
      },
      "Pooling": {
        "type": "string",
        "enum": ["cls", "mean", "last"],
        "title": "Pooling",
        "description": "Enum of possible pooling choices with pooling behaviors."
      },
      "PresetCompositeRetrievalParams": {
        "properties": {
          "mode": {
            "$ref": "#/components/schemas/CompositeRetrievalMode",
            "description": "The mode of composite retrieval.",
            "default": "full"
          },
          "rerank_top_n": {
            "type": "integer",
            "title": "Rerank Top N",
            "description": "The number of nodes to retrieve after reranking over retrieved nodes from all retrieval tools.",
            "default": 6
          }
        },
        "type": "object",
        "title": "PresetCompositeRetrievalParams"
      },
      "PresetRetrievalParams": {
        "properties": {
          "dense_similarity_top_k": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 100,
                "minimum": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Dense Similarity Top K",
            "description": "Number of nodes for dense retrieval.",
            "default": 30
          },
          "dense_similarity_cutoff": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 1,
                "minimum": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "Dense Similarity Cutoff",
            "description": "Minimum similarity score wrt query for retrieval",
            "default": 0
          },
          "sparse_similarity_top_k": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 100,
                "minimum": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Sparse Similarity Top K",
            "description": "Number of nodes for sparse retrieval.",
            "default": 30
          },
          "enable_reranking": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Enable Reranking",
            "description": "Enable reranking for retrieval"
          },
          "rerank_top_n": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 100,
                "minimum": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Rerank Top N",
            "description": "Number of reranked nodes for returning.",
            "default": 6
          },
          "alpha": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 1,
                "minimum": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "Alpha",
            "description": "Alpha value for hybrid retrieval to determine the weights between dense and sparse retrieval. 0 is sparse retrieval and 1 is dense retrieval."
          },
          "search_filters": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/MetadataFilters"
              },
              {
                "type": "null"
              }
            ],
            "description": "Search filters for retrieval."
          },
          "files_top_k": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 5,
                "minimum": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Files Top K",
            "description": "Number of files to retrieve (only for retrieval mode files_via_metadata and files_via_content).",
            "default": 1
          },
          "retrieval_mode": {
            "$ref": "#/components/schemas/RetrievalMode",
            "description": "The retrieval mode for the query.",
            "default": "chunks"
          },
          "retrieve_image_nodes": {
            "type": "boolean",
            "title": "Retrieve Image Nodes",
            "description": "Whether to retrieve image nodes.",
            "default": false
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "base_component"
          }
        },
        "type": "object",
        "title": "PresetRetrievalParams",
        "description": "Schema for the search params for an retrieval execution that can be preset for a pipeline."
      },
      "PresignedUrl": {
        "properties": {
          "url": {
            "type": "string",
            "minLength": 1,
            "format": "uri",
            "title": "Url",
            "description": "A presigned URL for IO operations against a private file"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "title": "Expires At",
            "description": "The time at which the presigned URL expires"
          },
          "form_fields": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Form Fields",
            "description": "Form fields for a presigned POST request"
          }
        },
        "type": "object",
        "required": ["url", "expires_at"],
        "title": "PresignedUrl",
        "description": "Schema for a presigned URL."
      },
      "ProgressEvent": {
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "The ID of the event"
          },
          "group_id": {
            "type": "string",
            "format": "uuid",
            "title": "Group Id",
            "description": "The ID of the group this event belongs to"
          },
          "type": {
            "type": "string",
            "const": "progress",
            "title": "Type",
            "default": "progress"
          },
          "variant": {
            "$ref": "#/components/schemas/ReportEventType"
          },
          "msg": {
            "type": "string",
            "title": "Msg",
            "description": "The message to display to the user"
          },
          "progress": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 1,
                "minimum": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "Progress",
            "description": "Progress value between 0-1 if available"
          },
          "status": {
            "type": "string",
            "enum": ["pending", "in_progress", "completed", "error"],
            "title": "Status",
            "description": "Current status of the operation",
            "default": "pending"
          },
          "extra_detail": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Extra Detail",
            "description": "Any extra details to display to the user"
          }
        },
        "type": "object",
        "required": ["variant", "msg"],
        "title": "ProgressEvent",
        "description": "Event for tracking progress of operations in workflows."
      },
      "Project": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 3000,
            "minLength": 1,
            "title": "Name"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "Unique identifier"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At",
            "description": "Creation datetime"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At",
            "description": "Update datetime"
          },
          "ad_hoc_eval_dataset_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ad Hoc Eval Dataset Id"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid",
            "title": "Organization Id",
            "description": "The Organization ID the project is under."
          },
          "is_default": {
            "type": "boolean",
            "title": "Is Default",
            "description": "Whether this project is the default project for the user.",
            "default": false
          }
        },
        "type": "object",
        "required": ["name", "id", "organization_id"],
        "title": "Project",
        "description": "Schema for a project."
      },
      "ProjectCreate": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 3000,
            "minLength": 1,
            "title": "Name"
          }
        },
        "type": "object",
        "required": ["name"],
        "title": "ProjectCreate",
        "description": "Schema for creating a project."
      },
      "ProjectUpdate": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 3000,
            "minLength": 1,
            "title": "Name"
          }
        },
        "type": "object",
        "required": ["name"],
        "title": "ProjectUpdate",
        "description": "Schema for updating a project."
      },
      "PromptConf": {
        "properties": {
          "system_prompt": {
            "type": "string",
            "title": "System Prompt",
            "description": "The system prompt to use for the extraction.",
            "default": "\nGiven a JSON schema, extract the data from the provided text according to the schema.\nOnly output the data as given in the text, nothing else.\n"
          },
          "extraction_prompt": {
            "type": "string",
            "title": "Extraction Prompt",
            "description": "The prompt to use for the extraction.",
            "default": "The extracted data using the given JSON schema."
          },
          "error_handling_prompt": {
            "type": "string",
            "title": "Error Handling Prompt",
            "description": "The prompt to use for error handling.",
            "default": "If the text does not contain enough information to comply with the schema, explain the reason. Else, output null and fill out the 'extracted' field."
          }
        },
        "type": "object",
        "title": "PromptConf"
      },
      "PromptMixinPrompts": {
        "properties": {
          "project_id": {
            "type": "string",
            "format": "uuid",
            "title": "Project Id",
            "description": "The ID of the project."
          },
          "id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Id",
            "description": "The ID of the prompt set."
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the prompt set."
          },
          "prompts": {
            "items": {
              "$ref": "#/components/schemas/PromptSpec"
            },
            "type": "array",
            "title": "Prompts",
            "description": "The prompts."
          }
        },
        "type": "object",
        "required": ["project_id", "name", "prompts"],
        "title": "PromptMixinPrompts",
        "description": "Schema for the prompts derived from the PromptMixin."
      },
      "PromptSpec": {
        "properties": {
          "prompt_key": {
            "type": "string",
            "title": "Prompt Key",
            "description": "The key of the prompt in the PromptMixin."
          },
          "prompt_class": {
            "type": "string",
            "title": "Prompt Class",
            "description": "The class of the prompt (PromptTemplate or ChatPromptTemplate)."
          },
          "prompt_type": {
            "type": "string",
            "title": "Prompt Type",
            "description": "The type of prompt."
          },
          "template": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Template",
            "description": "The template of the prompt."
          },
          "message_templates": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/app__schema__chat__ChatMessage"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Message Templates",
            "description": "The chat message templates of the prompt."
          }
        },
        "type": "object",
        "required": ["prompt_key", "prompt_class", "prompt_type"],
        "title": "PromptSpec"
      },
      "PydanticProgramMode": {
        "type": "string",
        "enum": [
          "default",
          "openai",
          "llm",
          "function",
          "guidance",
          "lm-format-enforcer"
        ],
        "title": "PydanticProgramMode",
        "description": "Pydantic program mode."
      },
      "RelatedNodeInfo": {
        "properties": {
          "node_id": {
            "type": "string",
            "title": "Node Id"
          },
          "node_type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ObjectType"
              },
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Node Type"
          },
          "metadata": {
            "type": "object",
            "title": "Metadata"
          },
          "hash": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Hash"
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "RelatedNodeInfo"
          }
        },
        "type": "object",
        "required": ["node_id"],
        "title": "RelatedNodeInfo"
      },
      "Report": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "The id of the report"
          },
          "blocks": {
            "items": {
              "$ref": "#/components/schemas/ReportBlock"
            },
            "type": "array",
            "title": "Blocks",
            "description": "The blocks of the report"
          }
        },
        "type": "object",
        "required": ["id"],
        "title": "Report"
      },
      "ReportBlock": {
        "properties": {
          "idx": {
            "type": "integer",
            "title": "Idx",
            "description": "The index of the block"
          },
          "template": {
            "type": "string",
            "title": "Template",
            "description": "The content of the block"
          },
          "sources": {
            "items": {
              "$ref": "#/components/schemas/TextNodeWithScore"
            },
            "type": "array",
            "title": "Sources",
            "description": "The sources for the block"
          }
        },
        "type": "object",
        "required": ["idx", "template"],
        "title": "ReportBlock"
      },
      "ReportBlockDependency": {
        "type": "string",
        "enum": ["none", "all", "previous", "next"],
        "title": "ReportBlockDependency"
      },
      "ReportCreateResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "The id of the report"
          }
        },
        "type": "object",
        "required": ["id"],
        "title": "ReportCreateResponse"
      },
      "ReportEventItem": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "The id of the event"
          },
          "report_id": {
            "type": "string",
            "format": "uuid",
            "title": "Report Id",
            "description": "The id of the report"
          },
          "event_type": {
            "type": "string",
            "title": "Event Type",
            "description": "The type of the event"
          },
          "event_data": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ProgressEvent"
              },
              {
                "$ref": "#/components/schemas/ReportUpdateEvent"
              },
              {
                "$ref": "#/components/schemas/ReportStateEvent"
              }
            ],
            "title": "Event Data",
            "description": "The data for the event"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp",
            "description": "The timestamp for the event"
          }
        },
        "type": "object",
        "required": [
          "id",
          "report_id",
          "event_type",
          "event_data",
          "timestamp"
        ],
        "title": "ReportEventItem",
        "description": "From backend schema"
      },
      "ReportEventType": {
        "type": "string",
        "enum": [
          "load_template",
          "extract_plan",
          "summarize",
          "file_processing",
          "generate_block",
          "editing"
        ],
        "title": "ReportEventType"
      },
      "ReportMetadata": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "The id of the report"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the report"
          },
          "report_metadata": {
            "type": "object",
            "title": "Report Metadata",
            "description": "The metadata for the report"
          },
          "state": {
            "$ref": "#/components/schemas/ReportState",
            "description": "The state of the report"
          },
          "input_files": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Input Files"
          },
          "template_file": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Template File"
          },
          "template_text": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Template Text"
          },
          "template_instructions": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Template Instructions"
          }
        },
        "type": "object",
        "required": ["id", "name", "report_metadata", "state"],
        "title": "ReportMetadata",
        "description": "Used to update the metadata of a report."
      },
      "ReportNameUpdate": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the report"
          }
        },
        "type": "object",
        "required": ["name"],
        "title": "ReportNameUpdate"
      },
      "ReportPlan": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "The id of the report plan"
          },
          "blocks": {
            "items": {
              "$ref": "#/components/schemas/ReportPlanBlock"
            },
            "type": "array",
            "title": "Blocks",
            "description": "The blocks of the report"
          },
          "generated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Generated At",
            "description": "The timestamp of when the plan was generated"
          }
        },
        "type": "object",
        "title": "ReportPlan"
      },
      "ReportPlanBlock": {
        "properties": {
          "block": {
            "$ref": "#/components/schemas/ReportBlock"
          },
          "queries": {
            "items": {
              "$ref": "#/components/schemas/ReportQuery"
            },
            "type": "array",
            "title": "Queries",
            "description": "The queries for the block"
          },
          "dependency": {
            "$ref": "#/components/schemas/ReportBlockDependency",
            "description": "The dependency for the block"
          }
        },
        "type": "object",
        "required": ["block", "dependency"],
        "title": "ReportPlanBlock"
      },
      "ReportQuery": {
        "properties": {
          "field": {
            "type": "string",
            "title": "Field",
            "description": "The field in the template that needs to be filled in"
          },
          "prompt": {
            "type": "string",
            "title": "Prompt",
            "description": "The prompt for filling in the field"
          },
          "context": {
            "type": "string",
            "title": "Context",
            "description": "Any additional context for the query"
          }
        },
        "type": "object",
        "required": ["field", "prompt", "context"],
        "title": "ReportQuery"
      },
      "ReportResponse": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "report_id": {
            "type": "string",
            "format": "uuid",
            "title": "Report Id"
          },
          "report": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Report"
              },
              {
                "type": "null"
              }
            ]
          },
          "plan": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ReportPlan"
              },
              {
                "type": "null"
              }
            ]
          },
          "version": {
            "type": "integer",
            "title": "Version"
          },
          "last_updated": {
            "type": "string",
            "format": "date-time",
            "title": "Last Updated"
          },
          "status": {
            "$ref": "#/components/schemas/ReportState"
          },
          "total_versions": {
            "type": "integer",
            "title": "Total Versions"
          }
        },
        "type": "object",
        "required": [
          "name",
          "report_id",
          "report",
          "plan",
          "version",
          "last_updated",
          "status",
          "total_versions"
        ],
        "title": "ReportResponse"
      },
      "ReportState": {
        "type": "string",
        "enum": [
          "pending",
          "planning",
          "waiting_approval",
          "generating",
          "completed",
          "error"
        ],
        "title": "ReportState"
      },
      "ReportStateEvent": {
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp"
          },
          "type": {
            "type": "string",
            "const": "report_state_update",
            "title": "Type"
          },
          "msg": {
            "type": "string",
            "title": "Msg",
            "description": "The message to display to the user"
          },
          "status": {
            "$ref": "#/components/schemas/ReportState",
            "description": "The new state of the report"
          }
        },
        "type": "object",
        "required": ["type", "msg", "status"],
        "title": "ReportStateEvent",
        "description": "Event for notifying when an report's state changes."
      },
      "ReportUpdateEvent": {
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp"
          },
          "type": {
            "type": "string",
            "const": "report_block_update",
            "title": "Type",
            "default": "report_block_update"
          },
          "msg": {
            "type": "string",
            "title": "Msg",
            "description": "The message to display to the user",
            "default": "A block has been generated and is ready to be displayed"
          },
          "block": {
            "$ref": "#/components/schemas/ReportBlock",
            "description": "The block to update"
          }
        },
        "type": "object",
        "required": ["block"],
        "title": "ReportUpdateEvent",
        "description": "Event for updating the state of an report."
      },
      "ReportVersionPatch": {
        "properties": {
          "content": {
            "$ref": "#/components/schemas/Report",
            "description": "The content of the report version"
          }
        },
        "type": "object",
        "required": ["content"],
        "title": "ReportVersionPatch"
      },
      "RetrievalMode": {
        "type": "string",
        "enum": [
          "chunks",
          "files_via_metadata",
          "files_via_content",
          "auto_routed"
        ],
        "title": "RetrievalMode"
      },
      "RetrievalParams": {
        "properties": {
          "dense_similarity_top_k": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 100,
                "minimum": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Dense Similarity Top K",
            "description": "Number of nodes for dense retrieval.",
            "default": 30
          },
          "dense_similarity_cutoff": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 1,
                "minimum": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "Dense Similarity Cutoff",
            "description": "Minimum similarity score wrt query for retrieval",
            "default": 0
          },
          "sparse_similarity_top_k": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 100,
                "minimum": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Sparse Similarity Top K",
            "description": "Number of nodes for sparse retrieval.",
            "default": 30
          },
          "enable_reranking": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Enable Reranking",
            "description": "Enable reranking for retrieval"
          },
          "rerank_top_n": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 100,
                "minimum": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Rerank Top N",
            "description": "Number of reranked nodes for returning.",
            "default": 6
          },
          "alpha": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 1,
                "minimum": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "Alpha",
            "description": "Alpha value for hybrid retrieval to determine the weights between dense and sparse retrieval. 0 is sparse retrieval and 1 is dense retrieval."
          },
          "search_filters": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/MetadataFilters"
              },
              {
                "type": "null"
              }
            ],
            "description": "Search filters for retrieval."
          },
          "files_top_k": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 5,
                "minimum": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Files Top K",
            "description": "Number of files to retrieve (only for retrieval mode files_via_metadata and files_via_content).",
            "default": 1
          },
          "retrieval_mode": {
            "$ref": "#/components/schemas/RetrievalMode",
            "description": "The retrieval mode for the query.",
            "default": "chunks"
          },
          "retrieve_image_nodes": {
            "type": "boolean",
            "title": "Retrieve Image Nodes",
            "description": "Whether to retrieve image nodes.",
            "default": false
          },
          "query": {
            "type": "string",
            "title": "Query",
            "description": "The query to retrieve against."
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "base_component"
          }
        },
        "type": "object",
        "required": ["query"],
        "title": "RetrievalParams",
        "description": "Schema for the search params for an retrieval execution."
      },
      "RetrieveResults": {
        "properties": {
          "pipeline_id": {
            "type": "string",
            "format": "uuid",
            "title": "Pipeline Id",
            "description": "The ID of the pipeline that the query was retrieved against."
          },
          "retrieval_nodes": {
            "items": {
              "$ref": "#/components/schemas/TextNodeWithScore"
            },
            "type": "array",
            "title": "Retrieval Nodes",
            "description": "The nodes retrieved by the pipeline for the given query."
          },
          "image_nodes": {
            "items": {
              "$ref": "#/components/schemas/PageScreenshotNodeWithScore"
            },
            "type": "array",
            "title": "Image Nodes",
            "description": "The image nodes retrieved by the pipeline for the given query."
          },
          "retrieval_latency": {
            "additionalProperties": {
              "type": "number"
            },
            "type": "object",
            "title": "Retrieval Latency",
            "description": "The end-to-end latency for retrieval and reranking."
          },
          "metadata": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Metadata",
            "description": "Metadata associated with the retrieval execution"
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "RetrieveResults"
          }
        },
        "type": "object",
        "required": ["pipeline_id", "retrieval_nodes"],
        "title": "RetrieveResults",
        "description": "Schema for the result of an retrieval execution."
      },
      "Retriever": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 3000,
            "minLength": 1,
            "title": "Name",
            "description": "A name for the retriever tool. Will default to the pipeline name if not provided."
          },
          "pipelines": {
            "items": {
              "$ref": "#/components/schemas/RetrieverPipeline"
            },
            "type": "array",
            "title": "Pipelines",
            "description": "The pipelines this retriever uses."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "Unique identifier"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At",
            "description": "Creation datetime"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At",
            "description": "Update datetime"
          },
          "project_id": {
            "type": "string",
            "format": "uuid",
            "title": "Project Id",
            "description": "The ID of the project this retriever resides in."
          }
        },
        "type": "object",
        "required": ["name", "id", "project_id"],
        "title": "Retriever",
        "description": "An entity that retrieves context nodes from several sub RetrieverTools."
      },
      "RetrieverCreate": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 3000,
            "minLength": 1,
            "title": "Name",
            "description": "A name for the retriever tool. Will default to the pipeline name if not provided."
          },
          "pipelines": {
            "items": {
              "$ref": "#/components/schemas/RetrieverPipeline"
            },
            "type": "array",
            "title": "Pipelines",
            "description": "The pipelines this retriever uses."
          }
        },
        "type": "object",
        "required": ["name"],
        "title": "RetrieverCreate"
      },
      "RetrieverPipeline": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 3000,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "A name for the retriever tool. Will default to the pipeline name if not provided."
          },
          "description": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 15000
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "A description of the retriever tool."
          },
          "pipeline_id": {
            "type": "string",
            "format": "uuid",
            "title": "Pipeline Id",
            "description": "The ID of the pipeline this tool uses."
          },
          "preset_retrieval_parameters": {
            "$ref": "#/components/schemas/PresetRetrievalParams",
            "description": "Parameters for retrieval configuration."
          }
        },
        "type": "object",
        "required": ["name", "description", "pipeline_id"],
        "title": "RetrieverPipeline"
      },
      "RetrieverUpdate": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "A name for the retriever."
          },
          "pipelines": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/RetrieverPipeline"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Pipelines",
            "description": "The pipelines this retriever uses."
          }
        },
        "type": "object",
        "required": ["pipelines"],
        "title": "RetrieverUpdate"
      },
      "Role": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "Unique identifier"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At",
            "description": "Creation datetime"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At",
            "description": "Update datetime"
          },
          "name": {
            "type": "string",
            "maxLength": 3000,
            "minLength": 1,
            "title": "Name",
            "description": "A name for the role."
          },
          "organization_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id",
            "description": "The organization's ID."
          },
          "permissions": {
            "items": {
              "$ref": "#/components/schemas/Permission"
            },
            "type": "array",
            "title": "Permissions",
            "description": "The actual permissions of the role."
          }
        },
        "type": "object",
        "required": ["id", "name", "organization_id", "permissions"],
        "title": "Role",
        "description": "Schema for a role."
      },
      "SchemaRelaxMode": {
        "type": "string",
        "enum": ["FULL", "TOP_LEVEL", "LEAF"],
        "title": "SchemaRelaxMode"
      },
      "SemanticChunkingConfig": {
        "properties": {
          "mode": {
            "type": "string",
            "const": "semantic",
            "title": "Mode",
            "default": "semantic"
          },
          "buffer_size": {
            "type": "integer",
            "title": "Buffer Size",
            "default": 1
          },
          "breakpoint_percentile_threshold": {
            "type": "integer",
            "title": "Breakpoint Percentile Threshold",
            "default": 95
          }
        },
        "type": "object",
        "title": "SemanticChunkingConfig"
      },
      "SentenceChunkingConfig": {
        "properties": {
          "chunk_size": {
            "type": "integer",
            "exclusiveMinimum": 0,
            "title": "Chunk Size",
            "default": 1024
          },
          "chunk_overlap": {
            "type": "integer",
            "title": "Chunk Overlap",
            "default": 200,
            "gte": 0
          },
          "mode": {
            "type": "string",
            "const": "sentence",
            "title": "Mode",
            "default": "sentence"
          },
          "separator": {
            "type": "string",
            "title": "Separator",
            "default": " "
          },
          "paragraph_separator": {
            "type": "string",
            "title": "Paragraph Separator",
            "default": "\n\n\n"
          }
        },
        "type": "object",
        "title": "SentenceChunkingConfig"
      },
      "SentenceSplitter": {
        "properties": {
          "include_metadata": {
            "type": "boolean",
            "title": "Include Metadata",
            "description": "Whether or not to consider metadata when splitting.",
            "default": true
          },
          "include_prev_next_rel": {
            "type": "boolean",
            "title": "Include Prev Next Rel",
            "description": "Include prev/next node relationships.",
            "default": true
          },
          "callback_manager": {
            "title": "Callback Manager"
          },
          "id_func": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Id Func",
            "description": "Function to generate node IDs."
          },
          "chunk_size": {
            "type": "integer",
            "exclusiveMinimum": 0,
            "title": "Chunk Size",
            "description": "The token chunk size for each chunk.",
            "default": 1024
          },
          "chunk_overlap": {
            "type": "integer",
            "minimum": 0,
            "title": "Chunk Overlap",
            "description": "The token overlap of each chunk when splitting.",
            "default": 200
          },
          "separator": {
            "type": "string",
            "title": "Separator",
            "description": "Default separator for splitting into words",
            "default": " "
          },
          "paragraph_separator": {
            "type": "string",
            "title": "Paragraph Separator",
            "description": "Separator between paragraphs.",
            "default": "\n\n\n"
          },
          "secondary_chunking_regex": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Secondary Chunking Regex",
            "description": "Backup regex for splitting into sentences.",
            "default": "[^,.;。？！]+[,.;。？！]?"
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "SentenceSplitter"
          }
        },
        "type": "object",
        "title": "SentenceSplitter",
        "description": "Parse text with a preference for complete sentences.\n\nIn general, this class tries to keep sentences and paragraphs together. Therefore\ncompared to the original TokenTextSplitter, there are less likely to be\nhanging sentences or parts of sentences at the end of the node chunk."
      },
      "StatusEnum": {
        "type": "string",
        "enum": ["PENDING", "SUCCESS", "ERROR", "PARTIAL_SUCCESS", "CANCELLED"],
        "title": "StatusEnum",
        "description": "Enum for representing the status of a job"
      },
      "StructMode": {
        "type": "string",
        "enum": ["STRUCT_PARSE", "JSON_MODE", "FUNC_CALL", "UNSTRUCTURED"],
        "title": "StructMode"
      },
      "StructParseConf": {
        "properties": {
          "model": {
            "type": "string",
            "title": "Model",
            "description": "The model to use for the structured parsing.",
            "default": "gpt-4o"
          },
          "temperature": {
            "type": "number",
            "title": "Temperature",
            "description": "The temperature to use for the structured parsing.",
            "default": 0
          },
          "relaxation_mode": {
            "$ref": "#/components/schemas/SchemaRelaxMode",
            "description": "The relaxation mode to use for the structured parsing.",
            "default": "LEAF"
          },
          "struct_mode": {
            "$ref": "#/components/schemas/StructMode",
            "description": "The struct mode to use for the structured parsing.",
            "default": "STRUCT_PARSE"
          },
          "prompt_conf": {
            "$ref": "#/components/schemas/PromptConf",
            "description": "The prompt configuration for the structured parsing.",
            "default": {
              "system_prompt": "\nGiven a JSON schema, extract the data from the provided text according to the schema.\nOnly output the data as given in the text, nothing else.\n",
              "extraction_prompt": "The extracted data using the given JSON schema.",
              "error_handling_prompt": "If the text does not contain enough information to comply with the schema, explain the reason. Else, output null and fill out the 'extracted' field."
            }
          }
        },
        "type": "object",
        "title": "StructParseConf",
        "description": "Configuration for the structured parsing agent."
      },
      "SupportedLLMModel": {
        "properties": {
          "name": {
            "$ref": "#/components/schemas/SupportedLLMModelNames",
            "description": "The name of the supported LLM model."
          },
          "enabled": {
            "type": "boolean",
            "title": "Enabled",
            "description": "Whether the LLM model is enabled for use in LlamaCloud.",
            "default": true
          },
          "details": {
            "$ref": "#/components/schemas/LLMModelData",
            "description": "The details of the supported LLM model."
          }
        },
        "type": "object",
        "required": ["name", "details"],
        "title": "SupportedLLMModel",
        "description": "Response Schema for a supported eval LLM model."
      },
      "SupportedLLMModelNames": {
        "type": "string",
        "enum": [
          "GPT_3_5_TURBO",
          "GPT_4",
          "GPT_4_TURBO",
          "GPT_4O",
          "GPT_4O_MINI",
          "AZURE_OPENAI_GPT_3_5_TURBO",
          "AZURE_OPENAI_GPT_4O",
          "AZURE_OPENAI_GPT_4O_MINI",
          "AZURE_OPENAI_GPT_4",
          "CLAUDE_3_5_SONNET",
          "BEDROCK_CLAUDE_3_5_SONNET",
          "VERTEX_AI_CLAUDE_3_5_SONNET"
        ],
        "title": "SupportedLLMModelNames"
      },
      "TextBlock": {
        "properties": {
          "block_type": {
            "type": "string",
            "const": "text",
            "title": "Block Type",
            "default": "text"
          },
          "text": {
            "type": "string",
            "title": "Text"
          }
        },
        "type": "object",
        "required": ["text"],
        "title": "TextBlock"
      },
      "TextNode": {
        "properties": {
          "id_": {
            "type": "string",
            "title": "Id",
            "description": "Unique ID of the node."
          },
          "embedding": {
            "anyOf": [
              {
                "items": {
                  "type": "number"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Embedding",
            "description": "Embedding of the node."
          },
          "extra_info": {
            "type": "object",
            "title": "Extra Info",
            "description": "A flat dictionary of metadata fields"
          },
          "excluded_embed_metadata_keys": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Excluded Embed Metadata Keys",
            "description": "Metadata keys that are excluded from text for the embed model."
          },
          "excluded_llm_metadata_keys": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Excluded Llm Metadata Keys",
            "description": "Metadata keys that are excluded from text for the LLM."
          },
          "relationships": {
            "additionalProperties": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/RelatedNodeInfo"
                },
                {
                  "items": {
                    "$ref": "#/components/schemas/RelatedNodeInfo"
                  },
                  "type": "array"
                }
              ]
            },
            "propertyNames": {
              "$ref": "#/components/schemas/NodeRelationship"
            },
            "type": "object",
            "title": "Relationships",
            "description": "A mapping of relationships to other node information."
          },
          "metadata_template": {
            "type": "string",
            "title": "Metadata Template",
            "description": "Template for how metadata is formatted, with {key} and {value} placeholders.",
            "default": "{key}: {value}"
          },
          "metadata_seperator": {
            "type": "string",
            "title": "Metadata Seperator",
            "description": "Separator between metadata fields when converting to string.",
            "default": "\n"
          },
          "text": {
            "type": "string",
            "title": "Text",
            "description": "Text content of the node.",
            "default": ""
          },
          "mimetype": {
            "type": "string",
            "title": "Mimetype",
            "description": "MIME type of the node content.",
            "default": "text/plain"
          },
          "start_char_idx": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Start Char Idx",
            "description": "Start char index of the node."
          },
          "end_char_idx": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "End Char Idx",
            "description": "End char index of the node."
          },
          "text_template": {
            "type": "string",
            "title": "Text Template",
            "description": "Template for how text is formatted, with {content} and {metadata_str} placeholders.",
            "default": "{metadata_str}\n\n{content}"
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "TextNode"
          }
        },
        "type": "object",
        "title": "TextNode",
        "description": "Provided for backward compatibility.\n\nNote: we keep the field with the typo \"seperator\" to maintain backward compatibility for\nserialized objects."
      },
      "TextNodeWithScore": {
        "properties": {
          "node": {
            "$ref": "#/components/schemas/TextNode"
          },
          "score": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Score"
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "TextNodeWithScore"
          }
        },
        "type": "object",
        "required": ["node"],
        "title": "TextNodeWithScore",
        "description": "Same as NodeWithScore but type for node is a TextNode instead of BaseNode.\nFastAPI doesn't accept abstract classes like BaseNode."
      },
      "TokenChunkingConfig": {
        "properties": {
          "chunk_size": {
            "type": "integer",
            "exclusiveMinimum": 0,
            "title": "Chunk Size",
            "default": 1024
          },
          "chunk_overlap": {
            "type": "integer",
            "title": "Chunk Overlap",
            "default": 200,
            "gte": 0
          },
          "mode": {
            "type": "string",
            "const": "token",
            "title": "Mode",
            "default": "token"
          },
          "separator": {
            "type": "string",
            "title": "Separator",
            "default": " "
          }
        },
        "type": "object",
        "title": "TokenChunkingConfig"
      },
      "TokenTextSplitter": {
        "properties": {
          "include_metadata": {
            "type": "boolean",
            "title": "Include Metadata",
            "description": "Whether or not to consider metadata when splitting.",
            "default": true
          },
          "include_prev_next_rel": {
            "type": "boolean",
            "title": "Include Prev Next Rel",
            "description": "Include prev/next node relationships.",
            "default": true
          },
          "callback_manager": {
            "title": "Callback Manager"
          },
          "id_func": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Id Func",
            "description": "Function to generate node IDs."
          },
          "chunk_size": {
            "type": "integer",
            "exclusiveMinimum": 0,
            "title": "Chunk Size",
            "description": "The token chunk size for each chunk.",
            "default": 1024
          },
          "chunk_overlap": {
            "type": "integer",
            "minimum": 0,
            "title": "Chunk Overlap",
            "description": "The token overlap of each chunk when splitting.",
            "default": 20
          },
          "separator": {
            "type": "string",
            "title": "Separator",
            "description": "Default separator for splitting into words",
            "default": " "
          },
          "backup_separators": {
            "items": {},
            "type": "array",
            "title": "Backup Separators",
            "description": "Additional separators for splitting."
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "TokenTextSplitter"
          }
        },
        "type": "object",
        "title": "TokenTextSplitter",
        "description": "Implementation of splitting text that looks at word tokens."
      },
      "TransformationCategoryNames": {
        "type": "string",
        "enum": ["NODE_PARSER", "EMBEDDING"],
        "title": "TransformationCategoryNames"
      },
      "Usage": {
        "properties": {
          "total_users": {
            "type": "integer",
            "title": "Total Users",
            "default": 0
          },
          "total_indexes": {
            "type": "integer",
            "title": "Total Indexes",
            "default": 0
          },
          "total_indexed_pages": {
            "type": "integer",
            "title": "Total Indexed Pages",
            "default": 0
          },
          "extract_pages": {
            "type": "integer",
            "title": "Extract Pages",
            "default": 0
          },
          "parse_pages": {
            "type": "integer",
            "title": "Parse Pages",
            "default": 0
          },
          "index_pages": {
            "type": "integer",
            "title": "Index Pages",
            "default": 0
          },
          "credits": {
            "type": "integer",
            "title": "Credits",
            "default": 0
          }
        },
        "type": "object",
        "title": "Usage",
        "description": "Response model; use UsageSubmission for tracking"
      },
      "UsageMetricResponse": {
        "properties": {
          "feature_usage": {
            "type": "object",
            "title": "Feature Usage"
          },
          "day": {
            "type": "string",
            "title": "Day"
          },
          "source": {
            "type": "string",
            "title": "Source"
          },
          "job_id": {
            "type": "string",
            "title": "Job Id"
          }
        },
        "type": "object",
        "required": ["feature_usage", "day", "source", "job_id"],
        "title": "UsageMetricResponse"
      },
      "UserJobRecord": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The user id from who triggered the job"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the user"
          }
        },
        "type": "object",
        "required": ["id", "name"],
        "title": "UserJobRecord"
      },
      "UserOrganization": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "Unique identifier"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At",
            "description": "Creation datetime"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At",
            "description": "Update datetime"
          },
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email",
            "description": "The user's email address."
          },
          "user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id",
            "description": "The user's ID."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid",
            "title": "Organization Id",
            "description": "The organization's ID."
          },
          "pending": {
            "type": "boolean",
            "title": "Pending",
            "description": "Whether the user's membership is pending account signup.",
            "default": true
          },
          "invited_by_user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Invited By User Id",
            "description": "The user ID of the user who added the user to the organization."
          },
          "invited_by_user_email": {
            "anyOf": [
              {
                "type": "string",
                "format": "email"
              },
              {
                "type": "null"
              }
            ],
            "title": "Invited By User Email",
            "description": "The email address of the user who added the user to the organization."
          },
          "roles": {
            "items": {
              "$ref": "#/components/schemas/UserOrganizationRole"
            },
            "type": "array",
            "title": "Roles",
            "description": "The roles of the user in the organization."
          }
        },
        "type": "object",
        "required": ["id", "email", "organization_id", "roles"],
        "title": "UserOrganization",
        "description": "Schema for a user's membership to an organization."
      },
      "UserOrganizationCreate": {
        "properties": {
          "user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id",
            "description": "The user's ID."
          },
          "email": {
            "anyOf": [
              {
                "type": "string",
                "format": "email"
              },
              {
                "type": "null"
              }
            ],
            "title": "Email",
            "description": "The user's email address."
          },
          "project_ids": {
            "anyOf": [
              {
                "items": {
                  "type": "string",
                  "format": "uuid"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Project Ids",
            "description": "The project IDs to add the user to."
          },
          "role_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Role Id",
            "description": "The role ID to assign to the user."
          }
        },
        "type": "object",
        "required": ["project_ids"],
        "title": "UserOrganizationCreate",
        "description": "Schema for creating a user's membership to an organization."
      },
      "UserOrganizationDelete": {
        "properties": {
          "user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id",
            "description": "The user's ID."
          },
          "email": {
            "anyOf": [
              {
                "type": "string",
                "format": "email"
              },
              {
                "type": "null"
              }
            ],
            "title": "Email",
            "description": "The user's email address."
          }
        },
        "type": "object",
        "title": "UserOrganizationDelete",
        "description": "Schema for deleting a user's membership to an organization."
      },
      "UserOrganizationRole": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "Unique identifier"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At",
            "description": "Creation datetime"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At",
            "description": "Update datetime"
          },
          "user_id": {
            "type": "string",
            "title": "User Id",
            "description": "The user's ID."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid",
            "title": "Organization Id",
            "description": "The organization's ID."
          },
          "role_id": {
            "type": "string",
            "format": "uuid",
            "title": "Role Id",
            "description": "The role's ID."
          },
          "role": {
            "$ref": "#/components/schemas/Role",
            "description": "The role."
          }
        },
        "type": "object",
        "required": ["id", "user_id", "organization_id", "role_id", "role"],
        "title": "UserOrganizationRole",
        "description": "Schema for a user's role in an organization."
      },
      "UserOrganizationRoleCreate": {
        "properties": {
          "user_id": {
            "type": "string",
            "title": "User Id",
            "description": "The user's ID."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid",
            "title": "Organization Id",
            "description": "The organization's ID."
          },
          "role_id": {
            "type": "string",
            "format": "uuid",
            "title": "Role Id",
            "description": "The role's ID."
          }
        },
        "type": "object",
        "required": ["user_id", "organization_id", "role_id"],
        "title": "UserOrganizationRoleCreate",
        "description": "Schema for creating a user's role in an organization."
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": ["loc", "msg", "type"],
        "title": "ValidationError"
      },
      "VertexAIEmbeddingConfig": {
        "properties": {
          "type": {
            "type": "string",
            "const": "VERTEXAI_EMBEDDING",
            "title": "Type",
            "description": "Type of the embedding model.",
            "default": "VERTEXAI_EMBEDDING"
          },
          "component": {
            "$ref": "#/components/schemas/VertexTextEmbedding",
            "description": "Configuration for the VertexAI embedding model."
          }
        },
        "type": "object",
        "title": "VertexAIEmbeddingConfig"
      },
      "VertexEmbeddingMode": {
        "type": "string",
        "enum": [
          "default",
          "classification",
          "clustering",
          "similarity",
          "retrieval"
        ],
        "title": "VertexEmbeddingMode",
        "description": "Copied from llama_index.embeddings.vertex.base.VertexEmbeddingMode\nsince importing llama_index.embeddings.vertex.base incurs a lot of memory usage."
      },
      "VertexTextEmbedding": {
        "properties": {
          "model_name": {
            "type": "string",
            "title": "Model Name",
            "description": "The modelId of the VertexAI model to use.",
            "default": "textembedding-gecko@003"
          },
          "embed_batch_size": {
            "type": "integer",
            "maximum": 2048,
            "exclusiveMinimum": 0,
            "title": "Embed Batch Size",
            "description": "The batch size for embedding calls.",
            "default": 10
          },
          "num_workers": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Num Workers",
            "description": "The number of workers to use for async embedding calls."
          },
          "location": {
            "type": "string",
            "title": "Location",
            "description": "The default location to use when making API calls."
          },
          "project": {
            "type": "string",
            "title": "Project",
            "description": "The default GCP project to use when making Vertex API calls."
          },
          "embed_mode": {
            "$ref": "#/components/schemas/VertexEmbeddingMode",
            "description": "The embedding mode to use.",
            "default": "retrieval"
          },
          "additional_kwargs": {
            "type": "object",
            "title": "Additional Kwargs",
            "description": "Additional kwargs for the Vertex."
          },
          "client_email": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Email",
            "description": "The client email for the VertexAI credentials."
          },
          "token_uri": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Token Uri",
            "description": "The token URI for the VertexAI credentials."
          },
          "private_key_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Private Key Id",
            "description": "The private key ID for the VertexAI credentials."
          },
          "private_key": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Private Key",
            "description": "The private key for the VertexAI credentials."
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "VertexTextEmbedding"
          }
        },
        "type": "object",
        "required": [
          "location",
          "project",
          "client_email",
          "token_uri",
          "private_key_id",
          "private_key"
        ],
        "title": "VertexTextEmbedding"
      },
      "app__schema__chat__ChatMessage": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "index": {
            "type": "integer",
            "title": "Index",
            "description": "The index of the message in the chat."
          },
          "annotations": {
            "items": {
              "$ref": "#/components/schemas/MessageAnnotation"
            },
            "type": "array",
            "title": "Annotations",
            "description": "Retrieval annotations for the message."
          },
          "role": {
            "$ref": "#/components/schemas/MessageRole",
            "description": "The role of the message."
          },
          "content": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Content",
            "description": "Text content of the generation"
          },
          "additional_kwargs": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Additional Kwargs",
            "description": "Additional arguments passed to the model"
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "base_component"
          }
        },
        "type": "object",
        "required": ["id", "index", "role"],
        "title": "ChatMessage"
      },
      "llama_index__core__base__llms__types__ChatMessage": {
        "properties": {
          "role": {
            "$ref": "#/components/schemas/MessageRole",
            "default": "user"
          },
          "additional_kwargs": {
            "type": "object",
            "title": "Additional Kwargs"
          },
          "blocks": {
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/TextBlock"
                },
                {
                  "$ref": "#/components/schemas/ImageBlock"
                }
              ],
              "discriminator": {
                "propertyName": "block_type",
                "mapping": {
                  "image": "#/components/schemas/ImageBlock",
                  "text": "#/components/schemas/TextBlock"
                }
              }
            },
            "type": "array",
            "title": "Blocks"
          }
        },
        "type": "object",
        "title": "ChatMessage",
        "description": "Chat message."
      }
    },
    "securitySchemes": {
      "HTTPBearer": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}
