{
  "openapi": "3.1.0",
  "info": {
    "title": "LlamaCloud",
    "termsOfService": "https://www.llamaindex.ai/files/terms-of-service.pdf",
    "version": "0.1.0"
  },
  "servers": [
    {
      "url": "https://api.cloud.llamaindex.ai/",
      "description": "LlamaCloud Production Server"
    }
  ],
  "paths": {
    "/api/v1/data-sinks": {
      "get": {
        "tags": ["Data Sinks"],
        "summary": "List Data Sinks",
        "description": "List data sinks for a given project.\nIf project_id is not provided, uses the default project.",
        "operationId": "list_data_sinks_api_v1_data_sinks_get",
        "parameters": [
          {
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Id"
            },
            "name": "project_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DataSink"
                  },
                  "type": "array",
                  "title": "Response List Data Sinks Api V1 Data Sinks Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "put": {
        "tags": ["Data Sinks"],
        "summary": "Upsert Data Sink",
        "description": "Upserts a data sink.\nUpdates if a data sink with the same name and project_id already exists. Otherwise, creates a new data sink.",
        "operationId": "upsert_data_sink_api_v1_data_sinks_put",
        "parameters": [
          {
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Id"
            },
            "name": "project_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataSinkCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSink"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": ["Data Sinks"],
        "summary": "Create Data Sink",
        "description": "Create a new data sink.",
        "operationId": "create_data_sink_api_v1_data_sinks_post",
        "parameters": [
          {
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Id"
            },
            "name": "project_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataSinkCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSink"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/data-sinks/{data_sink_id}": {
      "get": {
        "tags": ["Data Sinks"],
        "summary": "Get Data Sink",
        "description": "Get a data sink by ID.",
        "operationId": "get_data_sink_api_v1_data_sinks__data_sink_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Data Sink Id"
            },
            "name": "data_sink_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSink"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "put": {
        "tags": ["Data Sinks"],
        "summary": "Update Data Sink",
        "description": "Update a data sink by ID.",
        "operationId": "update_data_sink_api_v1_data_sinks__data_sink_id__put",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Data Sink Id"
            },
            "name": "data_sink_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataSinkUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSink"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["Data Sinks"],
        "summary": "Delete Data Sink",
        "description": "Delete a data sink by ID.",
        "operationId": "delete_data_sink_api_v1_data_sinks__data_sink_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Data Sink Id"
            },
            "name": "data_sink_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/data-sources": {
      "get": {
        "tags": ["Data Sources"],
        "summary": "List Data Sources",
        "description": "List data sources for a given project.\nIf project_id is not provided, uses the default project.",
        "operationId": "list_data_sources_api_v1_data_sources_get",
        "parameters": [
          {
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Id"
            },
            "name": "project_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DataSource"
                  },
                  "type": "array",
                  "title": "Response List Data Sources Api V1 Data Sources Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "put": {
        "tags": ["Data Sources"],
        "summary": "Upsert Data Source",
        "description": "Upserts a data source.\nUpdates if a data source with the same name and project_id already exists. Otherwise, creates a new data source.",
        "operationId": "upsert_data_source_api_v1_data_sources_put",
        "parameters": [
          {
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Id"
            },
            "name": "project_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataSourceCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSource"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": ["Data Sources"],
        "summary": "Create Data Source",
        "description": "Create a new data source.",
        "operationId": "create_data_source_api_v1_data_sources_post",
        "parameters": [
          {
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Id"
            },
            "name": "project_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataSourceCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSource"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/data-sources/{data_source_id}": {
      "get": {
        "tags": ["Data Sources"],
        "summary": "Get Data Source",
        "description": "Get a data source by ID.",
        "operationId": "get_data_source_api_v1_data_sources__data_source_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Data Source Id"
            },
            "name": "data_source_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSource"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "put": {
        "tags": ["Data Sources"],
        "summary": "Update Data Source",
        "description": "Update a data source by ID.",
        "operationId": "update_data_source_api_v1_data_sources__data_source_id__put",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Data Source Id"
            },
            "name": "data_source_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataSourceUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSource"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["Data Sources"],
        "summary": "Delete Data Source",
        "description": "Delete a data source by ID.",
        "operationId": "delete_data_source_api_v1_data_sources__data_source_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Data Source Id"
            },
            "name": "data_source_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/projects": {
      "get": {
        "tags": ["Projects"],
        "summary": "List Projects",
        "description": "List projects or get one by name",
        "operationId": "list_projects_api_v1_projects_get",
        "parameters": [
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Project Name"
            },
            "name": "project_name",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Project"
                  },
                  "type": "array",
                  "title": "Response List Projects Api V1 Projects Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "put": {
        "tags": ["Projects"],
        "summary": "Upsert Project",
        "description": "Upsert a project.\nUpdates if a project with the same name already exists. Otherwise, creates a new project.",
        "operationId": "upsert_project_api_v1_projects_put",
        "parameters": [
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": ["Projects"],
        "summary": "Create Project",
        "description": "Create a new project.",
        "operationId": "create_project_api_v1_projects_post",
        "parameters": [
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/projects/{project_id}": {
      "get": {
        "tags": ["Projects"],
        "summary": "Get Project",
        "description": "Get a project by ID.",
        "operationId": "get_project_api_v1_projects__project_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Id"
            },
            "name": "project_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "put": {
        "tags": ["Projects"],
        "summary": "Update Existing Project",
        "description": "Update an existing project.",
        "operationId": "update_existing_project_api_v1_projects__project_id__put",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Id"
            },
            "name": "project_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["Projects"],
        "summary": "Delete Project",
        "description": "Delete a project by ID.",
        "operationId": "delete_project_api_v1_projects__project_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Id"
            },
            "name": "project_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/projects/{project_id}/eval/dataset": {
      "get": {
        "tags": ["Projects"],
        "summary": "List Datasets For Project",
        "description": "List eval datasets for a project.",
        "operationId": "list_datasets_for_project_api_v1_projects__project_id__eval_dataset_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Id"
            },
            "name": "project_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/EvalDataset"
                  },
                  "type": "array",
                  "title": "Response List Datasets For Project Api V1 Projects  Project Id  Eval Dataset Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": ["Projects"],
        "summary": "Create Eval Dataset For Project",
        "description": "Create a new eval dataset for a project.",
        "operationId": "create_eval_dataset_for_project_api_v1_projects__project_id__eval_dataset_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Id"
            },
            "name": "project_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EvalDatasetCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvalDataset"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/projects/{project_id}/localevalset": {
      "post": {
        "tags": ["Projects"],
        "summary": "Create Local Eval Set For Project",
        "description": "Create a new local eval set.",
        "operationId": "create_local_eval_set_for_project_api_v1_projects__project_id__localevalset_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Id"
            },
            "name": "project_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LocalEvalSetCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/LocalEvalResults"
                  },
                  "type": "array",
                  "title": "Response Create Local Eval Set For Project Api V1 Projects  Project Id  Localevalset Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/projects/{project_id}/localeval": {
      "get": {
        "tags": ["Projects"],
        "summary": "List Local Evals For Project",
        "description": "List local eval results for a project.",
        "operationId": "list_local_evals_for_project_api_v1_projects__project_id__localeval_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Id"
            },
            "name": "project_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/LocalEvalResults"
                  },
                  "type": "array",
                  "title": "Response List Local Evals For Project Api V1 Projects  Project Id  Localeval Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/projects/{project_id}/localevalsets": {
      "get": {
        "tags": ["Projects"],
        "summary": "List Local Eval Sets For Project",
        "description": "List local eval sets for a project.",
        "operationId": "list_local_eval_sets_for_project_api_v1_projects__project_id__localevalsets_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Id"
            },
            "name": "project_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/LocalEvalSets"
                  },
                  "type": "array",
                  "title": "Response List Local Eval Sets For Project Api V1 Projects  Project Id  Localevalsets Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/projects/{project_id}/localevalset/{local_eval_set_id}": {
      "delete": {
        "tags": ["Projects"],
        "summary": "Delete Local Eval Set",
        "description": "Delete a local eval set.",
        "operationId": "delete_local_eval_set_api_v1_projects__project_id__localevalset__local_eval_set_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Id"
            },
            "name": "project_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Local Eval Set Id"
            },
            "name": "local_eval_set_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/projects/{project_id}/prompts": {
      "get": {
        "tags": ["Projects"],
        "summary": "List Promptmixin Prompts",
        "description": "List PromptMixin prompt sets for a project.",
        "operationId": "list_promptmixin_prompts_api_v1_projects__project_id__prompts_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Id"
            },
            "name": "project_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/PromptMixinPrompts"
                  },
                  "type": "array",
                  "title": "Response List Promptmixin Prompts Api V1 Projects  Project Id  Prompts Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": ["Projects"],
        "summary": "Create Prompt Mixin Prompts",
        "description": "Create a new PromptMixin prompt set.",
        "operationId": "create_prompt_mixin_prompts_api_v1_projects__project_id__prompts_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Id"
            },
            "name": "project_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PromptMixinPrompts"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromptMixinPrompts"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/projects/{project_id}/prompts/{prompt_set_id}": {
      "put": {
        "tags": ["Projects"],
        "summary": "Update Promptmixin Prompts",
        "description": "Update a PromptMixin prompt set.",
        "operationId": "update_promptmixin_prompts_api_v1_projects__project_id__prompts__prompt_set_id__put",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Id"
            },
            "name": "project_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Prompt Set Id"
            },
            "name": "prompt_set_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PromptMixinPrompts"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromptMixinPrompts"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["Projects"],
        "summary": "Delete Prompt Mixin Prompts",
        "description": "Delete a PromptMixin prompt set.",
        "operationId": "delete_prompt_mixin_prompts_api_v1_projects__project_id__prompts__prompt_set_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Id"
            },
            "name": "project_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Prompt Set Id"
            },
            "name": "prompt_set_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/files/{id}": {
      "get": {
        "tags": ["Files"],
        "summary": "Get File",
        "description": "Read File metadata objects.",
        "operationId": "get_file_api_v1_files__id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            },
            "name": "id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Id"
            },
            "name": "project_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["Files"],
        "summary": "Delete File",
        "description": "Delete the file from S3.",
        "operationId": "delete_file_api_v1_files__id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            },
            "name": "id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Id"
            },
            "name": "project_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/files": {
      "get": {
        "tags": ["Files"],
        "summary": "List Files",
        "description": "Read File metadata objects.",
        "operationId": "list_files_api_v1_files_get",
        "parameters": [
          {
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Id"
            },
            "name": "project_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/File"
                  },
                  "type": "array",
                  "title": "Response List Files Api V1 Files Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "put": {
        "tags": ["Files"],
        "summary": "Generate Presigned Url",
        "description": "Create a presigned url for uploading a file.",
        "operationId": "generate_presigned_url_api_v1_files_put",
        "parameters": [
          {
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Id"
            },
            "name": "project_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PresignedUrl"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": ["Files"],
        "summary": "Upload File",
        "description": "Upload a file to S3.",
        "operationId": "upload_file_api_v1_files_post",
        "parameters": [
          {
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Id"
            },
            "name": "project_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_upload_file_api_v1_files_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/files/sync": {
      "put": {
        "tags": ["Files"],
        "summary": "Sync Files",
        "description": "Sync Files API against file contents uploaded via S3 presigned urls.",
        "operationId": "sync_files_api_v1_files_sync_put",
        "parameters": [
          {
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Id"
            },
            "name": "project_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/File"
                  },
                  "type": "array",
                  "title": "Response Sync Files Api V1 Files Sync Put"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/files/{id}/content": {
      "get": {
        "tags": ["Files"],
        "summary": "Read File Content",
        "description": "Returns a presigned url to read the file content.",
        "operationId": "read_file_content_api_v1_files__id__content_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            },
            "name": "id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Id"
            },
            "name": "project_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PresignedUrl"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/pipelines": {
      "get": {
        "tags": ["Pipelines"],
        "summary": "Search Pipelines",
        "description": "Search for pipelines by various parameters.",
        "operationId": "search_pipelines_api_v1_pipelines_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "Project Name"
            },
            "name": "project_name",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Pipeline Name"
            },
            "name": "pipeline_name",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PipelineType"
            },
            "name": "pipeline_type",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Pipeline"
                  },
                  "type": "array",
                  "title": "Response Search Pipelines Api V1 Pipelines Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "put": {
        "tags": ["Pipelines"],
        "summary": "Upsert Pipeline",
        "description": "Upsert a pipeline for a project.\nUpdates if a pipeline with the same name and project_id already exists. Otherwise, creates a new pipeline.",
        "operationId": "upsert_pipeline_api_v1_pipelines_put",
        "parameters": [
          {
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Id"
            },
            "name": "project_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PipelineCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pipeline"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": ["Pipelines"],
        "summary": "Create Pipeline",
        "description": "Create a new pipeline for a project.",
        "operationId": "create_pipeline_api_v1_pipelines_post",
        "parameters": [
          {
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Id"
            },
            "name": "project_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PipelineCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pipeline"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/pipelines/{pipeline_id}": {
      "get": {
        "tags": ["Pipelines"],
        "summary": "Get Pipeline",
        "description": "Get a pipeline by ID for a given project.",
        "operationId": "get_pipeline_api_v1_pipelines__pipeline_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Pipeline Id"
            },
            "name": "pipeline_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pipeline"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "put": {
        "tags": ["Pipelines"],
        "summary": "Update Existing Pipeline",
        "description": "Update an existing pipeline for a project.",
        "operationId": "update_existing_pipeline_api_v1_pipelines__pipeline_id__put",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Pipeline Id"
            },
            "name": "pipeline_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PipelineUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pipeline"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["Pipelines"],
        "summary": "Delete Pipeline",
        "description": "Delete a pipeline by ID.",
        "operationId": "delete_pipeline_api_v1_pipelines__pipeline_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Pipeline Id"
            },
            "name": "pipeline_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/pipelines/{pipeline_id}/status": {
      "get": {
        "tags": ["Pipelines"],
        "summary": "Get Pipeline Status",
        "description": "Get the status of a pipeline by ID.",
        "operationId": "get_pipeline_status_api_v1_pipelines__pipeline_id__status_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Pipeline Id"
            },
            "name": "pipeline_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagedIngestionStatusResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/pipelines/{pipeline_id}/sync": {
      "post": {
        "tags": ["Pipelines"],
        "summary": "Sync Pipeline",
        "description": "Run ingestion for the pipeline by incrementally updating the data-sink with upstream changes from data-sources & files.",
        "operationId": "sync_pipeline_api_v1_pipelines__pipeline_id__sync_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Pipeline Id"
            },
            "name": "pipeline_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pipeline"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/pipelines/{pipeline_id}/eval-datasets/{eval_dataset_id}/execute": {
      "get": {
        "tags": ["Pipelines"],
        "summary": "Get Eval Dataset Executions",
        "description": "Get the status of an EvalDatasetExecution.",
        "operationId": "get_eval_dataset_executions_api_v1_pipelines__pipeline_id__eval_datasets__eval_dataset_id__execute_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Pipeline Id"
            },
            "name": "pipeline_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Eval Dataset Id"
            },
            "name": "eval_dataset_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/EvalDatasetJobRecord"
                  },
                  "type": "array",
                  "title": "Response Get Eval Dataset Executions Api V1 Pipelines  Pipeline Id  Eval Datasets  Eval Dataset Id  Execute Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": ["Pipelines"],
        "summary": "Execute Eval Dataset",
        "description": "Execute a dataset.",
        "operationId": "execute_eval_dataset_api_v1_pipelines__pipeline_id__eval_datasets__eval_dataset_id__execute_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Pipeline Id"
            },
            "name": "pipeline_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Eval Dataset Id"
            },
            "name": "eval_dataset_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EvalExecutionCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvalDatasetJobRecord"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/pipelines/{pipeline_id}/eval-datasets/{eval_dataset_id}/execute/result": {
      "get": {
        "tags": ["Pipelines"],
        "summary": "Get Eval Dataset Execution Result",
        "description": "Get the result of an EvalDatasetExecution.\nIf eval_question_ids is specified, only the results for the specified\nquestions will be returned.\nIf any of the specified questions do not have a result, they will be ignored.",
        "operationId": "get_eval_dataset_execution_result_api_v1_pipelines__pipeline_id__eval_datasets__eval_dataset_id__execute_result_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Pipeline Id"
            },
            "name": "pipeline_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Eval Dataset Id"
            },
            "name": "eval_dataset_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/EvalQuestionResult"
                  },
                  "type": "array",
                  "title": "Response Get Eval Dataset Execution Result Api V1 Pipelines  Pipeline Id  Eval Datasets  Eval Dataset Id  Execute Result Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/pipelines/{pipeline_id}/eval-datasets/{eval_dataset_id}/execute/{eval_dataset_execution_id}": {
      "get": {
        "tags": ["Pipelines"],
        "summary": "Get Eval Dataset Execution",
        "description": "Get the status of an EvalDatasetExecution.",
        "operationId": "get_eval_dataset_execution_api_v1_pipelines__pipeline_id__eval_datasets__eval_dataset_id__execute__eval_dataset_execution_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Pipeline Id"
            },
            "name": "pipeline_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Eval Dataset Id"
            },
            "name": "eval_dataset_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Eval Dataset Execution Id"
            },
            "name": "eval_dataset_execution_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvalDatasetJobRecord"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/pipelines/{pipeline_id}/files": {
      "get": {
        "tags": ["Pipelines"],
        "summary": "List Pipeline Files",
        "description": "Get files for a pipeline.",
        "operationId": "list_pipeline_files_api_v1_pipelines__pipeline_id__files_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Pipeline Id"
            },
            "name": "pipeline_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/PipelineFile"
                  },
                  "type": "array",
                  "title": "Response List Pipeline Files Api V1 Pipelines  Pipeline Id  Files Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "put": {
        "tags": ["Pipelines"],
        "summary": "Add Files To Pipeline",
        "description": "Add files to a pipeline.",
        "operationId": "add_files_to_pipeline_api_v1_pipelines__pipeline_id__files_put",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Pipeline Id"
            },
            "name": "pipeline_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/PipelineFileCreate"
                },
                "type": "array",
                "title": "Pipeline File Creates"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/PipelineFile"
                  },
                  "type": "array",
                  "title": "Response Add Files To Pipeline Api V1 Pipelines  Pipeline Id  Files Put"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/pipelines/{pipeline_id}/files/{file_id}/status": {
      "get": {
        "tags": ["Pipelines"],
        "summary": "Get Pipeline File Status",
        "description": "Get status of a file for a pipeline.",
        "operationId": "get_pipeline_file_status_api_v1_pipelines__pipeline_id__files__file_id__status_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Pipeline Id"
            },
            "name": "pipeline_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "File Id"
            },
            "name": "file_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagedIngestionStatusResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/pipelines/{pipeline_id}/files/{file_id}": {
      "put": {
        "tags": ["Pipelines"],
        "summary": "Update Pipeline File",
        "description": "Update a file for a pipeline.",
        "operationId": "update_pipeline_file_api_v1_pipelines__pipeline_id__files__file_id__put",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Pipeline Id"
            },
            "name": "pipeline_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "File Id"
            },
            "name": "file_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PipelineFileUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFile"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["Pipelines"],
        "summary": "Delete Pipeline File",
        "description": "Delete a file from a pipeline.",
        "operationId": "delete_pipeline_file_api_v1_pipelines__pipeline_id__files__file_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Pipeline Id"
            },
            "name": "pipeline_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "File Id"
            },
            "name": "file_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/pipelines/{pipeline_id}/data-sources": {
      "get": {
        "tags": ["Pipelines"],
        "summary": "List Pipeline Data Sources",
        "description": "Get data sources for a pipeline.",
        "operationId": "list_pipeline_data_sources_api_v1_pipelines__pipeline_id__data_sources_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Pipeline Id"
            },
            "name": "pipeline_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/PipelineDataSource"
                  },
                  "type": "array",
                  "title": "Response List Pipeline Data Sources Api V1 Pipelines  Pipeline Id  Data Sources Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "put": {
        "tags": ["Pipelines"],
        "summary": "Add Data Sources To Pipeline",
        "description": "Add data sources to a pipeline.",
        "operationId": "add_data_sources_to_pipeline_api_v1_pipelines__pipeline_id__data_sources_put",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Pipeline Id"
            },
            "name": "pipeline_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/PipelineDataSourceCreate"
                },
                "type": "array",
                "title": "Pipeline Data Source Creates"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/PipelineDataSource"
                  },
                  "type": "array",
                  "title": "Response Add Data Sources To Pipeline Api V1 Pipelines  Pipeline Id  Data Sources Put"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/pipelines/{pipeline_id}/data-sources/{data_source_id}": {
      "delete": {
        "tags": ["Pipelines"],
        "summary": "Delete Pipeline Data Source",
        "description": "Delete a data source from a pipeline.",
        "operationId": "delete_pipeline_data_source_api_v1_pipelines__pipeline_id__data_sources__data_source_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Pipeline Id"
            },
            "name": "pipeline_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Data Source Id"
            },
            "name": "data_source_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/pipelines/{pipeline_id}/data-sources/{data_source_id}/sync": {
      "post": {
        "tags": ["Pipelines"],
        "summary": "Sync Pipeline Data Source",
        "description": "Run ingestion for the pipeline data source by incrementally updating the data-sink with upstream changes from data-source.",
        "operationId": "sync_pipeline_data_source_api_v1_pipelines__pipeline_id__data_sources__data_source_id__sync_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Pipeline Id"
            },
            "name": "pipeline_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Data Source Id"
            },
            "name": "data_source_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pipeline"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/pipelines/{pipeline_id}/retrieve": {
      "post": {
        "tags": ["Pipelines"],
        "summary": "Run Search",
        "description": "Get retrieval results for a managed pipeline and a query",
        "operationId": "run_search_api_v1_pipelines__pipeline_id__retrieve_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Pipeline Id"
            },
            "name": "pipeline_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RetrievalParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RetrieveResults"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/pipelines/{pipeline_id}/jobs": {
      "get": {
        "tags": ["Pipelines"],
        "summary": "List Pipeline Jobs",
        "description": "Get jobs for a pipeline.",
        "operationId": "list_pipeline_jobs_api_v1_pipelines__pipeline_id__jobs_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Pipeline Id"
            },
            "name": "pipeline_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/PipelineDeployment"
                  },
                  "type": "array",
                  "title": "Response List Pipeline Jobs Api V1 Pipelines  Pipeline Id  Jobs Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/pipelines/{pipeline_id}/jobs/{job_id}": {
      "get": {
        "tags": ["Pipelines"],
        "summary": "Get Pipeline Job",
        "description": "Get a job for a pipeline.",
        "operationId": "get_pipeline_job_api_v1_pipelines__pipeline_id__jobs__job_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Pipeline Id"
            },
            "name": "pipeline_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Job Id"
            },
            "name": "job_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineDeployment"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/pipelines/{pipeline_id}/documents": {
      "get": {
        "tags": ["Pipelines"],
        "summary": "List Pipeline Documents",
        "description": "Return a list of documents for a pipeline.",
        "operationId": "list_pipeline_documents_api_v1_pipelines__pipeline_id__documents_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Pipeline Id"
            },
            "name": "pipeline_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0.0,
              "title": "Skip",
              "default": 0
            },
            "name": "skip",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0.0,
              "title": "Limit",
              "default": 10
            },
            "name": "limit",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/CloudDocument"
                  },
                  "type": "array",
                  "title": "Response List Pipeline Documents Api V1 Pipelines  Pipeline Id  Documents Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "put": {
        "tags": ["Pipelines"],
        "summary": "Upsert Batch Pipeline Documents",
        "description": "Batch create or update a document for a pipeline.",
        "operationId": "upsert_batch_pipeline_documents_api_v1_pipelines__pipeline_id__documents_put",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Pipeline Id"
            },
            "name": "pipeline_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/CloudDocumentCreate"
                },
                "type": "array",
                "title": "Documents"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/CloudDocument"
                  },
                  "type": "array",
                  "title": "Response Upsert Batch Pipeline Documents Api V1 Pipelines  Pipeline Id  Documents Put"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": ["Pipelines"],
        "summary": "Create Batch Pipeline Documents",
        "description": "Batch create documents for a pipeline.",
        "operationId": "create_batch_pipeline_documents_api_v1_pipelines__pipeline_id__documents_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Pipeline Id"
            },
            "name": "pipeline_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/CloudDocumentCreate"
                },
                "type": "array",
                "title": "Documents"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/CloudDocument"
                  },
                  "type": "array",
                  "title": "Response Create Batch Pipeline Documents Api V1 Pipelines  Pipeline Id  Documents Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/pipelines/{pipeline_id}/documents/{document_id}": {
      "get": {
        "tags": ["Pipelines"],
        "summary": "Get Pipeline Document",
        "description": "Return a single document for a pipeline.",
        "operationId": "get_pipeline_document_api_v1_pipelines__pipeline_id__documents__document_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Pipeline Id"
            },
            "name": "pipeline_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "Document Id"
            },
            "name": "document_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CloudDocument"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["Pipelines"],
        "summary": "Delete Pipeline Document",
        "description": "Delete a document for a pipeline.",
        "operationId": "delete_pipeline_document_api_v1_pipelines__pipeline_id__documents__document_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Pipeline Id"
            },
            "name": "pipeline_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "Document Id"
            },
            "name": "document_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/pipelines/{pipeline_id}/documents/{document_id}/status": {
      "get": {
        "tags": ["Pipelines"],
        "summary": "Get Pipeline Document Status",
        "description": "Return a single document for a pipeline.",
        "operationId": "get_pipeline_document_status_api_v1_pipelines__pipeline_id__documents__document_id__status_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Pipeline Id"
            },
            "name": "pipeline_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "Document Id"
            },
            "name": "document_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagedIngestionStatusResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/evals/datasets/{dataset_id}": {
      "get": {
        "tags": ["Evals"],
        "summary": "Get Dataset",
        "description": "Get a dataset by ID.",
        "operationId": "get_dataset_api_v1_evals_datasets__dataset_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Dataset Id"
            },
            "name": "dataset_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvalDataset"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "put": {
        "tags": ["Evals"],
        "summary": "Update Dataset",
        "description": "Update a dataset.",
        "operationId": "update_dataset_api_v1_evals_datasets__dataset_id__put",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Dataset Id"
            },
            "name": "dataset_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EvalDatasetUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvalDataset"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["Evals"],
        "summary": "Delete Dataset",
        "description": "Delete a dataset.",
        "operationId": "delete_dataset_api_v1_evals_datasets__dataset_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Dataset Id"
            },
            "name": "dataset_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/evals/datasets/{dataset_id}/question": {
      "get": {
        "tags": ["Evals"],
        "summary": "List Questions",
        "description": "List questions for a dataset.",
        "operationId": "list_questions_api_v1_evals_datasets__dataset_id__question_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Dataset Id"
            },
            "name": "dataset_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/EvalQuestion"
                  },
                  "type": "array",
                  "title": "Response List Questions Api V1 Evals Datasets  Dataset Id  Question Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": ["Evals"],
        "summary": "Create Question",
        "description": "Create a new question.",
        "operationId": "create_question_api_v1_evals_datasets__dataset_id__question_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Dataset Id"
            },
            "name": "dataset_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EvalQuestionCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvalQuestion"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/evals/datasets/{dataset_id}/questions": {
      "post": {
        "tags": ["Evals"],
        "summary": "Create Questions",
        "description": "Create a new question.",
        "operationId": "create_questions_api_v1_evals_datasets__dataset_id__questions_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Dataset Id"
            },
            "name": "dataset_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/EvalQuestionCreate"
                },
                "type": "array",
                "title": "Payload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/EvalQuestion"
                  },
                  "type": "array",
                  "title": "Response Create Questions Api V1 Evals Datasets  Dataset Id  Questions Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/evals/questions/{question_id}": {
      "get": {
        "tags": ["Evals"],
        "summary": "Get Question",
        "description": "Get a question by ID.",
        "operationId": "get_question_api_v1_evals_questions__question_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Question Id"
            },
            "name": "question_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvalQuestion"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "put": {
        "tags": ["Evals"],
        "summary": "Replace Question",
        "description": "Replace a question.",
        "operationId": "replace_question_api_v1_evals_questions__question_id__put",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Question Id"
            },
            "name": "question_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EvalQuestionCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvalQuestion"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["Evals"],
        "summary": "Delete Question",
        "description": "Delete a question.",
        "operationId": "delete_question_api_v1_evals_questions__question_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Question Id"
            },
            "name": "question_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/evals/models": {
      "get": {
        "tags": ["Evals"],
        "summary": "List Supported Models",
        "description": "List supported models.",
        "operationId": "list_supported_models_api_v1_evals_models_get",
        "parameters": [
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/SupportedEvalLLMModel"
                  },
                  "type": "array",
                  "title": "Response List Supported Models Api V1 Evals Models Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/parsing/job/{job_id}/result/image/{name}": {
      "get": {
        "tags": ["Parsing"],
        "summary": "Get Job Image Result",
        "description": "Get a job by id",
        "operationId": "get_job_image_result_api_v1_parsing_job__job_id__result_image__name__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Job Id"
            },
            "name": "job_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "Name"
            },
            "name": "name",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "image/jpeg": {}
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/parsing/supported_file_extensions": {
      "get": {
        "tags": ["Parsing"],
        "summary": "Get Supported File Extensions",
        "description": "Get a list of supported file extensions",
        "operationId": "get_supported_file_extensions_api_v1_parsing_supported_file_extensions_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/LlamaParseSupportedFileExtensions"
                  },
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/parsing/upload": {
      "post": {
        "tags": ["Parsing"],
        "summary": "Upload File",
        "description": "Upload a file to s3 and create a job. return a job id",
        "operationId": "upload_file_api_v1_parsing_upload_post",
        "parameters": [
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_upload_file_api_v1_parsing_upload_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParsingJob"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/parsing/usage": {
      "get": {
        "tags": ["Parsing"],
        "summary": "Usage",
        "description": "Get parsing usage for user",
        "operationId": "usage_api_v1_parsing_usage_get",
        "parameters": [
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParsingUsage"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/parsing/job/{job_id}": {
      "get": {
        "tags": ["Parsing"],
        "summary": "Get Job",
        "description": "Get a job by id",
        "operationId": "get_job_api_v1_parsing_job__job_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Job Id"
            },
            "name": "job_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParsingJob"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/parsing/job/{job_id}/result/text": {
      "get": {
        "tags": ["Parsing"],
        "summary": "Get Job Text Result",
        "description": "Get a job by id",
        "operationId": "get_job_text_result_api_v1_parsing_job__job_id__result_text_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Job Id"
            },
            "name": "job_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParsingJobTextResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/parsing/job/{job_id}/result/raw/text": {
      "get": {
        "tags": ["Parsing"],
        "summary": "Get Job Raw Text Result",
        "description": "Get a job by id",
        "operationId": "get_job_raw_text_result_api_v1_parsing_job__job_id__result_raw_text_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Job Id"
            },
            "name": "job_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/parsing/job/{job_id}/result/markdown": {
      "get": {
        "tags": ["Parsing"],
        "summary": "Get Job Result",
        "description": "Get a job by id",
        "operationId": "get_job_result_api_v1_parsing_job__job_id__result_markdown_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Job Id"
            },
            "name": "job_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParsingJobMarkdownResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/parsing/job/{job_id}/result/raw/markdown": {
      "get": {
        "tags": ["Parsing"],
        "summary": "Get Job Raw Md Result",
        "description": "Get a job by id",
        "operationId": "get_job_raw_md_result_api_v1_parsing_job__job_id__result_raw_markdown_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Job Id"
            },
            "name": "job_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/parsing/job/{job_id}/result/json": {
      "get": {
        "tags": ["Parsing"],
        "summary": "Get Job Json Result",
        "description": "Get a job by id",
        "operationId": "get_job_json_result_api_v1_parsing_job__job_id__result_json_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Job Id"
            },
            "name": "job_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParsingJobJsonResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/parsing/job/{job_id}/result/raw/json": {
      "get": {
        "tags": ["Parsing"],
        "summary": "Get Job Json Raw Result",
        "description": "Get a job by id",
        "operationId": "get_job_json_raw_result_api_v1_parsing_job__job_id__result_raw_json_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Job Id"
            },
            "name": "job_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/parsing/history": {
      "get": {
        "tags": ["Parsing"],
        "summary": "Get Parsing History Result",
        "description": "Get parsing history for user",
        "operationId": "get_parsing_history_result_api_v1_parsing_history_get",
        "parameters": [
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ParsingHistoryItem"
                  },
                  "type": "array",
                  "title": "Response Get Parsing History Result Api V1 Parsing History Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/parsing/job/{job_id}/read/{filename}": {
      "get": {
        "tags": ["Parsing"],
        "summary": "Generate Presigned Url",
        "description": "Generate a presigned URL for a job",
        "operationId": "generate_presigned_url_api_v1_parsing_job__job_id__read__filename__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Job Id"
            },
            "name": "job_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "Filename"
            },
            "name": "filename",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Session"
            },
            "name": "session",
            "in": "cookie"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PresignedUrl"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/component-definition/configurable-transformations": {
      "get": {
        "tags": ["Component Definitions"],
        "summary": "List Transformation Definitions",
        "description": "List transformation component definitions.",
        "operationId": "list_transformation_definitions_api_v1_component_definition_configurable_transformations_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ConfigurableTransformationDefinition"
                  },
                  "type": "array",
                  "title": "Response List Transformation Definitions Api V1 Component Definition Configurable Transformations Get"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/component-definition/data-sources": {
      "get": {
        "tags": ["Component Definitions"],
        "summary": "List Data Source Definitions",
        "description": "List data source component definitions.",
        "operationId": "list_data_source_definitions_api_v1_component_definition_data_sources_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DataSourceDefinition"
                  },
                  "type": "array",
                  "title": "Response List Data Source Definitions Api V1 Component Definition Data Sources Get"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/component-definition/data-sinks": {
      "get": {
        "tags": ["Component Definitions"],
        "summary": "List Data Sink Definitions",
        "description": "List data sink component definitions.",
        "operationId": "list_data_sink_definitions_api_v1_component_definition_data_sinks_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DataSinkDefinition"
                  },
                  "type": "array",
                  "title": "Response List Data Sink Definitions Api V1 Component Definition Data Sinks Get"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AzureOpenAIEmbedding": {
        "properties": {
          "model_name": {
            "type": "string",
            "title": "Model Name",
            "description": "The name of the embedding model.",
            "default": "unknown"
          },
          "embed_batch_size": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "Embed Batch Size",
            "description": "The batch size for embedding calls.",
            "default": 10,
            "lte": 2048
          },
          "callback_manager": {
            "type": "object",
            "title": "Callback Manager",
            "default": {}
          },
          "num_workers": {
            "type": "integer",
            "title": "Num Workers",
            "description": "The number of workers to use for async embedding calls."
          },
          "additional_kwargs": {
            "type": "object",
            "title": "Additional Kwargs",
            "description": "Additional kwargs for the OpenAI API."
          },
          "api_key": {
            "type": "string",
            "title": "Api Key",
            "description": "The OpenAI API key."
          },
          "api_base": {
            "type": "string",
            "title": "Api Base",
            "description": "The base URL for Azure deployment.",
            "default": ""
          },
          "api_version": {
            "type": "string",
            "title": "Api Version",
            "description": "The version for Azure OpenAI API.",
            "default": ""
          },
          "max_retries": {
            "type": "integer",
            "title": "Max Retries",
            "description": "Maximum number of retries.",
            "default": 10,
            "gte": 0
          },
          "timeout": {
            "type": "number",
            "title": "Timeout",
            "description": "Timeout for each request.",
            "default": 60.0,
            "gte": 0
          },
          "default_headers": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Default Headers",
            "description": "The default headers for API requests."
          },
          "reuse_client": {
            "type": "boolean",
            "title": "Reuse Client",
            "description": "Reuse the OpenAI client between requests. When doing anything with large volumes of async API calls, setting this to false can improve stability.",
            "default": true
          },
          "dimensions": {
            "type": "integer",
            "title": "Dimensions",
            "description": "The number of dimensions on the output embedding vectors. Works only with v3 embedding models."
          },
          "azure_endpoint": {
            "type": "string",
            "title": "Azure Endpoint",
            "description": "The Azure endpoint to use."
          },
          "azure_deployment": {
            "type": "string",
            "title": "Azure Deployment",
            "description": "The Azure deployment to use."
          },
          "use_azure_ad": {
            "type": "boolean",
            "title": "Use Azure Ad",
            "description": "Indicates if Microsoft Entra ID (former Azure AD) is used for token authentication"
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "AzureOpenAIEmbedding"
          }
        },
        "type": "object",
        "required": ["api_key", "use_azure_ad"],
        "title": "AzureOpenAIEmbedding",
        "description": "OpenAI class for embeddings.\n\nArgs:\n    mode (str): Mode for embedding.\n        Defaults to OpenAIEmbeddingMode.TEXT_SEARCH_MODE.\n        Options are:\n\n        - OpenAIEmbeddingMode.SIMILARITY_MODE\n        - OpenAIEmbeddingMode.TEXT_SEARCH_MODE\n\n    model (str): Model for embedding.\n        Defaults to OpenAIEmbeddingModelType.TEXT_EMBED_ADA_002.\n        Options are:\n\n        - OpenAIEmbeddingModelType.DAVINCI\n        - OpenAIEmbeddingModelType.CURIE\n        - OpenAIEmbeddingModelType.BABBAGE\n        - OpenAIEmbeddingModelType.ADA\n        - OpenAIEmbeddingModelType.TEXT_EMBED_ADA_002"
      },
      "Base": {
        "properties": {},
        "type": "object",
        "title": "Base"
      },
      "BasePromptTemplate": {
        "properties": {
          "metadata": {
            "type": "object",
            "title": "Metadata"
          },
          "template_vars": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Template Vars"
          },
          "kwargs": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Kwargs"
          },
          "output_parser": {
            "type": "object",
            "title": "Output Parser",
            "default": {}
          },
          "template_var_mappings": {
            "type": "object",
            "title": "Template Var Mappings",
            "description": "Template variable mappings (Optional)."
          }
        },
        "type": "object",
        "required": ["metadata", "template_vars", "kwargs"],
        "title": "BasePromptTemplate",
        "description": "Chainable mixin.\n\nA module that can produce a `QueryComponent` from a set of inputs through\n`as_query_component`.\n\nIf plugged in directly into a `QueryPipeline`, the `ChainableMixin` will be\nconverted into a `QueryComponent` with default parameters."
      },
      "BedrockEmbedding": {
        "properties": {
          "model_name": {
            "type": "string",
            "title": "Model Name",
            "description": "The modelId of the Bedrock model to use."
          },
          "embed_batch_size": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "Embed Batch Size",
            "description": "The batch size for embedding calls.",
            "default": 10,
            "lte": 2048
          },
          "callback_manager": {
            "type": "object",
            "title": "Callback Manager",
            "default": {}
          },
          "num_workers": {
            "type": "integer",
            "title": "Num Workers",
            "description": "The number of workers to use for async embedding calls."
          },
          "profile_name": {
            "type": "string",
            "title": "Profile Name",
            "description": "The name of aws profile to use. If not given, then the default profile is used."
          },
          "aws_access_key_id": {
            "type": "string",
            "title": "Aws Access Key Id",
            "description": "AWS Access Key ID to use"
          },
          "aws_secret_access_key": {
            "type": "string",
            "title": "Aws Secret Access Key",
            "description": "AWS Secret Access Key to use"
          },
          "aws_session_token": {
            "type": "string",
            "title": "Aws Session Token",
            "description": "AWS Session Token to use"
          },
          "region_name": {
            "type": "string",
            "title": "Region Name",
            "description": "AWS region name to use. Uses region configured in AWS CLI if not passed"
          },
          "botocore_session": {
            "title": "Botocore Session",
            "description": "Use this Botocore session instead of creating a new default one."
          },
          "botocore_config": {
            "title": "Botocore Config",
            "description": "Custom configuration object to use instead of the default generated one."
          },
          "max_retries": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "Max Retries",
            "description": "The maximum number of API retries.",
            "default": 10
          },
          "timeout": {
            "type": "number",
            "title": "Timeout",
            "description": "The timeout for the Bedrock API request in seconds. It will be used for both connect and read timeouts.",
            "default": 60.0
          },
          "additional_kwargs": {
            "type": "object",
            "title": "Additional Kwargs",
            "description": "Additional kwargs for the bedrock client."
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "BedrockEmbedding"
          }
        },
        "type": "object",
        "required": ["model_name"],
        "title": "BedrockEmbedding",
        "description": "Base class for embeddings."
      },
      "Body_upload_file_api_v1_files_post": {
        "properties": {
          "upload_file": {
            "type": "string",
            "format": "binary",
            "title": "Upload File"
          }
        },
        "type": "object",
        "required": ["upload_file"],
        "title": "Body_upload_file_api_v1_files_post"
      },
      "Body_upload_file_api_v1_parsing_upload_post": {
        "properties": {
          "language": {
            "items": {
              "$ref": "#/components/schemas/ParserLanguages"
            },
            "type": "array",
            "default": ["en"]
          },
          "parsing_instruction": {
            "type": "string",
            "title": "Parsing Instruction",
            "default": ""
          },
          "skip_diagonal_text": {
            "type": "boolean",
            "title": "Skip Diagonal Text",
            "default": false
          },
          "invalidate_cache": {
            "type": "boolean",
            "title": "Invalidate Cache",
            "default": false
          },
          "do_not_cache": {
            "type": "boolean",
            "title": "Do Not Cache",
            "default": false
          },
          "gpt4o_mode": {
            "type": "boolean",
            "title": "Gpt4O Mode",
            "default": false
          },
          "fast_mode": {
            "type": "boolean",
            "title": "Fast Mode",
            "default": false
          },
          "gpt4o_api_key": {
            "type": "string",
            "title": "Gpt4O Api Key",
            "default": ""
          },
          "do_not_unroll_columns": {
            "type": "boolean",
            "title": "Do Not Unroll Columns",
            "default": false
          },
          "page_separator": {
            "type": "string",
            "title": "Page Separator"
          },
          "bounding_box": {
            "type": "string",
            "title": "Bounding Box",
            "default": ""
          },
          "target_pages": {
            "type": "string",
            "title": "Target Pages",
            "default": ""
          },
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File"
          }
        },
        "type": "object",
        "required": ["file"],
        "title": "Body_upload_file_api_v1_parsing_upload_post"
      },
      "ChatMessage": {
        "properties": {
          "role": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MessageRole"
              }
            ],
            "default": "user"
          },
          "content": {
            "title": "Content",
            "default": ""
          },
          "additional_kwargs": {
            "type": "object",
            "title": "Additional Kwargs"
          }
        },
        "type": "object",
        "title": "ChatMessage",
        "description": "Chat message."
      },
      "CloudAzStorageBlobDataSource": {
        "properties": {
          "container_name": {
            "type": "string",
            "title": "Container Name",
            "description": "The name of the Azure Storage Blob container to read from."
          },
          "account_url": {
            "type": "string",
            "title": "Account Url",
            "description": "The Azure Storage Blob account URL to use for authentication."
          },
          "blob": {
            "type": "string",
            "title": "Blob",
            "description": "The blob name to read from."
          },
          "prefix": {
            "type": "string",
            "title": "Prefix",
            "description": "The prefix of the Azure Storage Blob objects to read from.",
            "default": ""
          },
          "account_name": {
            "type": "string",
            "title": "Account Name",
            "description": "The Azure Storage Blob account name to use for authentication."
          },
          "account_key": {
            "type": "string",
            "title": "Account Key",
            "description": "The Azure Storage Blob account key to use for authentication."
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "CloudAzStorageBlobDataSource"
          }
        },
        "type": "object",
        "required": [
          "container_name",
          "account_url",
          "account_name",
          "account_key"
        ],
        "title": "CloudAzStorageBlobDataSource",
        "description": "Base component object to capture class names."
      },
      "CloudChromaVectorStore": {
        "properties": {
          "supports_nested_metadata_filters": {
            "type": "boolean",
            "const": false,
            "title": "Supports Nested Metadata Filters",
            "default": false
          },
          "collection_name": {
            "type": "string",
            "title": "Collection Name"
          },
          "host": {
            "type": "string",
            "title": "Host"
          },
          "port": {
            "type": "string",
            "title": "Port"
          },
          "ssl": {
            "type": "boolean",
            "title": "Ssl"
          },
          "headers": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Headers"
          },
          "persist_dir": {
            "type": "string",
            "title": "Persist Dir"
          },
          "collection_kwargs": {
            "type": "object",
            "title": "Collection Kwargs"
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "CloudChromaVectorStore"
          }
        },
        "type": "object",
        "required": ["ssl"],
        "title": "CloudChromaVectorStore",
        "description": "Base class for cloud vector stores."
      },
      "CloudDocument": {
        "properties": {
          "text": {
            "type": "string",
            "title": "Text"
          },
          "metadata": {
            "type": "object",
            "title": "Metadata"
          },
          "excluded_embed_metadata_keys": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Excluded Embed Metadata Keys"
          },
          "excluded_llm_metadata_keys": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Excluded Llm Metadata Keys"
          },
          "id": {
            "type": "string",
            "title": "Id"
          }
        },
        "type": "object",
        "required": ["text", "metadata", "id"],
        "title": "CloudDocument",
        "description": "Cloud document stored in S3."
      },
      "CloudDocumentCreate": {
        "properties": {
          "text": {
            "type": "string",
            "title": "Text"
          },
          "metadata": {
            "type": "object",
            "title": "Metadata"
          },
          "excluded_embed_metadata_keys": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Excluded Embed Metadata Keys"
          },
          "excluded_llm_metadata_keys": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Excluded Llm Metadata Keys"
          },
          "id": {
            "type": "string",
            "title": "Id"
          }
        },
        "type": "object",
        "required": ["text", "metadata"],
        "title": "CloudDocumentCreate",
        "description": "Create a new cloud document."
      },
      "CloudOneDriveDataSource": {
        "properties": {
          "user_principal_name": {
            "type": "string",
            "title": "User Principal Name",
            "description": "The user principal name to use for authentication."
          },
          "folder_path": {
            "type": "string",
            "title": "Folder Path",
            "description": "The path of the OneDrive folder to read from."
          },
          "folder_id": {
            "type": "string",
            "title": "Folder Id",
            "description": "The ID of the OneDrive folder to read from."
          },
          "client_id": {
            "type": "string",
            "title": "Client Id",
            "description": "The client ID to use for authentication."
          },
          "client_secret": {
            "type": "string",
            "title": "Client Secret",
            "description": "The client secret to use for authentication."
          },
          "tenant_id": {
            "type": "string",
            "title": "Tenant Id",
            "description": "The tenant ID to use for authentication."
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "CloudOneDriveDataSource"
          }
        },
        "type": "object",
        "required": [
          "user_principal_name",
          "client_id",
          "client_secret",
          "tenant_id"
        ],
        "title": "CloudOneDriveDataSource",
        "description": "Base component object to capture class names."
      },
      "CloudPineconeVectorStore": {
        "properties": {
          "supports_nested_metadata_filters": {
            "type": "boolean",
            "const": true,
            "title": "Supports Nested Metadata Filters",
            "default": true
          },
          "api_key": {
            "type": "string",
            "title": "Api Key"
          },
          "index_name": {
            "type": "string",
            "title": "Index Name"
          },
          "namespace": {
            "type": "string",
            "title": "Namespace"
          },
          "insert_kwargs": {
            "type": "object",
            "title": "Insert Kwargs"
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "CloudPineconeVectorStore"
          }
        },
        "type": "object",
        "required": ["api_key", "index_name"],
        "title": "CloudPineconeVectorStore",
        "description": "Cloud Pinecone Vector Store.\n\nThis class is used to store the configuration for a Pinecone vector store, so that it can be\ncreated and used in LlamaCloud.\n\nArgs:\n    api_key (str): API key for authenticating with Pinecone\n    index_name (str): name of the Pinecone index\n    namespace (optional[str]): namespace to use in the Pinecone index\n    insert_kwargs (optional[dict]): additional kwargs to pass during insertion"
      },
      "CloudPostgresVectorStore": {
        "properties": {
          "supports_nested_metadata_filters": {
            "type": "boolean",
            "const": false,
            "title": "Supports Nested Metadata Filters",
            "default": false
          },
          "connection_string": {
            "type": "string",
            "title": "Connection String"
          },
          "async_connection_string": {
            "type": "string",
            "title": "Async Connection String"
          },
          "table_name": {
            "type": "string",
            "title": "Table Name"
          },
          "schema_name": {
            "type": "string",
            "title": "Schema Name"
          },
          "embed_dim": {
            "type": "integer",
            "title": "Embed Dim"
          },
          "hybrid_search": {
            "type": "boolean",
            "title": "Hybrid Search"
          },
          "text_search_config": {
            "type": "string",
            "title": "Text Search Config"
          },
          "cache_ok": {
            "type": "boolean",
            "title": "Cache Ok"
          },
          "perform_setup": {
            "type": "boolean",
            "title": "Perform Setup"
          },
          "debug": {
            "type": "boolean",
            "title": "Debug"
          },
          "use_jsonb": {
            "type": "boolean",
            "title": "Use Jsonb"
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "CloudPostgresVectorStore"
          }
        },
        "type": "object",
        "required": [
          "connection_string",
          "async_connection_string",
          "table_name",
          "schema_name",
          "embed_dim",
          "hybrid_search",
          "text_search_config",
          "cache_ok",
          "perform_setup",
          "debug",
          "use_jsonb"
        ],
        "title": "CloudPostgresVectorStore",
        "description": "Base class for cloud vector stores."
      },
      "CloudQdrantVectorStore": {
        "properties": {
          "supports_nested_metadata_filters": {
            "type": "boolean",
            "const": true,
            "title": "Supports Nested Metadata Filters",
            "default": true
          },
          "collection_name": {
            "type": "string",
            "title": "Collection Name"
          },
          "url": {
            "type": "string",
            "title": "Url"
          },
          "api_key": {
            "type": "string",
            "title": "Api Key"
          },
          "max_retries": {
            "type": "integer",
            "title": "Max Retries",
            "default": 3
          },
          "client_kwargs": {
            "type": "object",
            "title": "Client Kwargs"
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "CloudQdrantVectorStore"
          }
        },
        "type": "object",
        "required": ["collection_name", "url", "api_key"],
        "title": "CloudQdrantVectorStore",
        "description": "Cloud Qdrant Vector Store.\n\nThis class is used to store the configuration for a Qdrant vector store, so that it can be\ncreated and used in LlamaCloud.\n\nArgs:\n    collection_name (str): name of the Qdrant collection\n    url (str): url of the Qdrant instance\n    api_key (str): API key for authenticating with Qdrant\n    max_retries (int): maximum number of retries in case of a failure. Defaults to 3\n    client_kwargs (dict): additional kwargs to pass to the Qdrant client"
      },
      "CloudS3DataSource": {
        "properties": {
          "bucket": {
            "type": "string",
            "title": "Bucket",
            "description": "The name of the S3 bucket to read from."
          },
          "prefix": {
            "type": "string",
            "title": "Prefix",
            "description": "The prefix of the S3 objects to read from."
          },
          "aws_access_id": {
            "type": "string",
            "title": "Aws Access Id",
            "description": "The AWS access ID to use for authentication."
          },
          "aws_access_secret": {
            "type": "string",
            "title": "Aws Access Secret",
            "description": "The AWS access secret to use for authentication."
          },
          "s3_endpoint_url": {
            "type": "string",
            "title": "S3 Endpoint Url",
            "description": "The S3 endpoint URL to use for authentication."
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "CloudS3DataSource"
          }
        },
        "type": "object",
        "required": ["bucket"],
        "title": "CloudS3DataSource",
        "description": "Base component object to capture class names."
      },
      "CloudSharepointDataSource": {
        "properties": {
          "site_name": {
            "type": "string",
            "title": "Site Name",
            "description": "The name of the SharePoint site to download from."
          },
          "folder_path": {
            "type": "string",
            "title": "Folder Path",
            "description": "The path of the Sharepoint folder to read from."
          },
          "folder_id": {
            "type": "string",
            "title": "Folder Id",
            "description": "The ID of the Sharepoint folder to read from."
          },
          "client_id": {
            "type": "string",
            "title": "Client Id",
            "description": "The client ID to use for authentication."
          },
          "client_secret": {
            "type": "string",
            "title": "Client Secret",
            "description": "The client secret to use for authentication."
          },
          "tenant_id": {
            "type": "string",
            "title": "Tenant Id",
            "description": "The tenant ID to use for authentication."
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "CloudSharepointDataSource"
          }
        },
        "type": "object",
        "required": ["site_name", "client_id", "client_secret", "tenant_id"],
        "title": "CloudSharepointDataSource",
        "description": "Base component object to capture class names."
      },
      "CloudWeaviateVectorStore": {
        "properties": {
          "supports_nested_metadata_filters": {
            "type": "boolean",
            "const": false,
            "title": "Supports Nested Metadata Filters",
            "default": false
          },
          "index_name": {
            "type": "string",
            "title": "Index Name"
          },
          "url": {
            "type": "string",
            "title": "Url"
          },
          "text_key": {
            "type": "string",
            "title": "Text Key"
          },
          "auth_config": {
            "type": "object",
            "title": "Auth Config"
          },
          "client_kwargs": {
            "type": "object",
            "title": "Client Kwargs"
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "CloudWeaviateVectorStore"
          }
        },
        "type": "object",
        "required": ["index_name", "text_key"],
        "title": "CloudWeaviateVectorStore",
        "description": "Base class for cloud vector stores."
      },
      "CodeSplitter": {
        "properties": {
          "include_metadata": {
            "type": "boolean",
            "title": "Include Metadata",
            "description": "Whether or not to consider metadata when splitting.",
            "default": true
          },
          "include_prev_next_rel": {
            "type": "boolean",
            "title": "Include Prev Next Rel",
            "description": "Include prev/next node relationships.",
            "default": true
          },
          "callback_manager": {
            "type": "object",
            "title": "Callback Manager",
            "default": {}
          },
          "language": {
            "type": "string",
            "title": "Language",
            "description": "The programming language of the code being split."
          },
          "chunk_lines": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "Chunk Lines",
            "description": "The number of lines to include in each chunk.",
            "default": 40
          },
          "chunk_lines_overlap": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "Chunk Lines Overlap",
            "description": "How many lines of code each chunk overlaps with.",
            "default": 15
          },
          "max_chars": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "Max Chars",
            "description": "Maximum number of characters per chunk.",
            "default": 1500
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "CodeSplitter"
          }
        },
        "type": "object",
        "required": ["language"],
        "title": "CodeSplitter",
        "description": "Split code using a AST parser.\n\nThank you to Kevin Lu / SweepAI for suggesting this elegant code splitting solution.\nhttps://docs.sweep.dev/blogs/chunking-2m-files"
      },
      "CohereEmbedding": {
        "properties": {
          "model_name": {
            "type": "string",
            "title": "Model Name",
            "description": "The name of the embedding model.",
            "default": "unknown"
          },
          "embed_batch_size": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "Embed Batch Size",
            "description": "The batch size for embedding calls.",
            "default": 10,
            "lte": 2048
          },
          "callback_manager": {
            "type": "object",
            "title": "Callback Manager",
            "default": {}
          },
          "num_workers": {
            "type": "integer",
            "title": "Num Workers",
            "description": "The number of workers to use for async embedding calls."
          },
          "api_key": {
            "type": "string",
            "title": "Api Key",
            "description": "The Cohere API key."
          },
          "truncate": {
            "type": "string",
            "title": "Truncate",
            "description": "Truncation type - START/ END/ NONE"
          },
          "input_type": {
            "type": "string",
            "title": "Input Type",
            "description": "Model Input type. If not provided, search_document and search_query are used when needed."
          },
          "embedding_type": {
            "type": "string",
            "title": "Embedding Type",
            "description": "Embedding type. If not provided float embedding_type is used when needed."
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "CohereEmbedding"
          }
        },
        "type": "object",
        "required": ["api_key", "truncate", "embedding_type"],
        "title": "CohereEmbedding",
        "description": "CohereEmbedding uses the Cohere API to generate embeddings for text."
      },
      "ConfigurableDataSinkNames": {
        "type": "string",
        "enum": ["CHROMA", "PINECONE", "POSTGRES", "QDRANT", "WEAVIATE"],
        "title": "ConfigurableDataSinkNames",
        "description": "An enumeration."
      },
      "ConfigurableDataSourceNames": {
        "type": "string",
        "enum": [
          "S3",
          "AZURE_STORAGE_BLOB",
          "MICROSOFT_ONEDRIVE",
          "MICROSOFT_SHAREPOINT"
        ],
        "title": "ConfigurableDataSourceNames",
        "description": "An enumeration."
      },
      "ConfigurableTransformationDefinition": {
        "properties": {
          "label": {
            "type": "string",
            "title": "Label",
            "description": "The label field will be used to display the name of the component in the UI"
          },
          "json_schema": {
            "type": "object",
            "title": "Json Schema",
            "description": "The json_schema field can be used by clients to determine how to construct the component"
          },
          "configurable_transformation_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ConfigurableTransformationNames"
              }
            ],
            "description": "The name field will act as the unique identifier of TransformationDefinition objects"
          },
          "transformation_category": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TransformationCategoryNames"
              }
            ],
            "description": "The transformation_category field will be used to group transformations in the UI"
          }
        },
        "type": "object",
        "required": [
          "label",
          "json_schema",
          "configurable_transformation_type",
          "transformation_category"
        ],
        "title": "ConfigurableTransformationDefinition",
        "description": "Schema for a transformation definition."
      },
      "ConfigurableTransformationNames": {
        "type": "string",
        "enum": [
          "CODE_NODE_PARSER",
          "SENTENCE_AWARE_NODE_PARSER",
          "TOKEN_AWARE_NODE_PARSER",
          "HTML_NODE_PARSER",
          "MARKDOWN_NODE_PARSER",
          "JSON_NODE_PARSER",
          "SIMPLE_FILE_NODE_PARSER",
          "MARKDOWN_ELEMENT_NODE_PARSER",
          "OPENAI_EMBEDDING",
          "AZURE_EMBEDDING",
          "COHERE_EMBEDDING",
          "BEDROCK_EMBEDDING",
          "HUGGINGFACE_API_EMBEDDING",
          "GEMINI_EMBEDDING"
        ],
        "title": "ConfigurableTransformationNames",
        "description": "An enumeration."
      },
      "ConfiguredTransformationItem": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "configurable_transformation_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ConfigurableTransformationNames"
              }
            ],
            "description": "Name for the type of transformation this is (e.g. SIMPLE_NODE_PARSER). Can also be an enum instance of llama_index.ingestion.transformations.ConfigurableTransformations. This will be converted to ConfigurableTransformationNames."
          },
          "component": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/CodeSplitter"
                  },
                  {
                    "$ref": "#/components/schemas/SentenceSplitter"
                  },
                  {
                    "$ref": "#/components/schemas/TokenTextSplitter"
                  },
                  {
                    "$ref": "#/components/schemas/HTMLNodeParser"
                  },
                  {
                    "$ref": "#/components/schemas/MarkdownNodeParser"
                  },
                  {
                    "$ref": "#/components/schemas/JSONNodeParser"
                  },
                  {
                    "$ref": "#/components/schemas/SimpleFileNodeParser"
                  },
                  {
                    "$ref": "#/components/schemas/MarkdownElementNodeParser"
                  },
                  {
                    "$ref": "#/components/schemas/OpenAIEmbedding"
                  },
                  {
                    "$ref": "#/components/schemas/AzureOpenAIEmbedding"
                  },
                  {
                    "$ref": "#/components/schemas/CohereEmbedding"
                  },
                  {
                    "$ref": "#/components/schemas/BedrockEmbedding"
                  },
                  {
                    "$ref": "#/components/schemas/HuggingFaceInferenceAPIEmbedding"
                  },
                  {
                    "$ref": "#/components/schemas/GeminiEmbedding"
                  }
                ]
              }
            ],
            "title": "Component",
            "description": "Component that implements the transformation"
          }
        },
        "type": "object",
        "required": ["configurable_transformation_type", "component"],
        "title": "ConfiguredTransformationItem",
        "description": "Configured transformations for pipelines.\n\nSimilar to ConfigurableTransformation but includes a few\nmore fields that are useful to the platform."
      },
      "DataSink": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "Unique identifier"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation datetime"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Update datetime"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the data sink."
          },
          "sink_type": {
            "$ref": "#/components/schemas/ConfigurableDataSinkNames"
          },
          "component": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/CloudChromaVectorStore"
                  },
                  {
                    "$ref": "#/components/schemas/CloudPineconeVectorStore"
                  },
                  {
                    "$ref": "#/components/schemas/CloudPostgresVectorStore"
                  },
                  {
                    "$ref": "#/components/schemas/CloudQdrantVectorStore"
                  },
                  {
                    "$ref": "#/components/schemas/CloudWeaviateVectorStore"
                  }
                ]
              }
            ],
            "title": "Component"
          },
          "project_id": {
            "type": "string",
            "format": "uuid",
            "title": "Project Id"
          }
        },
        "type": "object",
        "required": ["id", "name", "sink_type", "component", "project_id"],
        "title": "DataSink",
        "description": "Schema for a data sink."
      },
      "DataSinkCreate": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the data sink."
          },
          "sink_type": {
            "$ref": "#/components/schemas/ConfigurableDataSinkNames"
          },
          "component": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/CloudChromaVectorStore"
                  },
                  {
                    "$ref": "#/components/schemas/CloudPineconeVectorStore"
                  },
                  {
                    "$ref": "#/components/schemas/CloudPostgresVectorStore"
                  },
                  {
                    "$ref": "#/components/schemas/CloudQdrantVectorStore"
                  },
                  {
                    "$ref": "#/components/schemas/CloudWeaviateVectorStore"
                  }
                ]
              }
            ],
            "title": "Component"
          }
        },
        "type": "object",
        "required": ["name", "sink_type", "component"],
        "title": "DataSinkCreate",
        "description": "Schema for creating a data sink."
      },
      "DataSinkDefinition": {
        "properties": {
          "label": {
            "type": "string",
            "title": "Label",
            "description": "The label field will be used to display the name of the component in the UI"
          },
          "json_schema": {
            "type": "object",
            "title": "Json Schema",
            "description": "The json_schema field can be used by clients to determine how to construct the component"
          },
          "sink_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ConfigurableDataSinkNames"
              }
            ],
            "description": "The name field will act as the unique identifier of DataSinkDefinition objects"
          }
        },
        "type": "object",
        "required": ["label", "json_schema", "sink_type"],
        "title": "DataSinkDefinition",
        "description": "Schema for a data sink definition."
      },
      "DataSinkUpdate": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the data sink."
          },
          "sink_type": {
            "$ref": "#/components/schemas/ConfigurableDataSinkNames"
          },
          "component": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/CloudChromaVectorStore"
                  },
                  {
                    "$ref": "#/components/schemas/CloudPineconeVectorStore"
                  },
                  {
                    "$ref": "#/components/schemas/CloudPostgresVectorStore"
                  },
                  {
                    "$ref": "#/components/schemas/CloudQdrantVectorStore"
                  },
                  {
                    "$ref": "#/components/schemas/CloudWeaviateVectorStore"
                  }
                ]
              }
            ],
            "title": "Component"
          }
        },
        "type": "object",
        "required": ["sink_type"],
        "title": "DataSinkUpdate",
        "description": "Schema for updating a data sink."
      },
      "DataSource": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "Unique identifier"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation datetime"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Update datetime"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the data source."
          },
          "source_type": {
            "$ref": "#/components/schemas/ConfigurableDataSourceNames"
          },
          "custom_metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "items": {},
                  "type": "array"
                },
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Custom Metadata",
            "description": "Custom metadata that will be present on all data loaded from the data source"
          },
          "component": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/CloudS3DataSource"
                  },
                  {
                    "$ref": "#/components/schemas/CloudAzStorageBlobDataSource"
                  },
                  {
                    "$ref": "#/components/schemas/CloudOneDriveDataSource"
                  },
                  {
                    "$ref": "#/components/schemas/CloudSharepointDataSource"
                  }
                ]
              }
            ],
            "title": "Component"
          },
          "project_id": {
            "type": "string",
            "format": "uuid",
            "title": "Project Id"
          }
        },
        "type": "object",
        "required": ["id", "name", "source_type", "component", "project_id"],
        "title": "DataSource",
        "description": "Schema for a data source."
      },
      "DataSourceCreate": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the data source."
          },
          "source_type": {
            "$ref": "#/components/schemas/ConfigurableDataSourceNames"
          },
          "custom_metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "items": {},
                  "type": "array"
                },
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Custom Metadata",
            "description": "Custom metadata that will be present on all data loaded from the data source"
          },
          "component": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/CloudS3DataSource"
                  },
                  {
                    "$ref": "#/components/schemas/CloudAzStorageBlobDataSource"
                  },
                  {
                    "$ref": "#/components/schemas/CloudOneDriveDataSource"
                  },
                  {
                    "$ref": "#/components/schemas/CloudSharepointDataSource"
                  }
                ]
              }
            ],
            "title": "Component"
          }
        },
        "type": "object",
        "required": ["name", "source_type", "component"],
        "title": "DataSourceCreate",
        "description": "Schema for creating a data source."
      },
      "DataSourceDefinition": {
        "properties": {
          "label": {
            "type": "string",
            "title": "Label",
            "description": "The label field will be used to display the name of the component in the UI"
          },
          "json_schema": {
            "type": "object",
            "title": "Json Schema",
            "description": "The json_schema field can be used by clients to determine how to construct the component"
          },
          "source_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ConfigurableDataSourceNames"
              }
            ],
            "description": "The name field will act as the unique identifier of DataSourceDefinition objects"
          }
        },
        "type": "object",
        "required": ["label", "json_schema", "source_type"],
        "title": "DataSourceDefinition",
        "description": "Schema for a data source definition."
      },
      "DataSourceUpdate": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the data source."
          },
          "source_type": {
            "$ref": "#/components/schemas/ConfigurableDataSourceNames"
          },
          "custom_metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "items": {},
                  "type": "array"
                },
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Custom Metadata",
            "description": "Custom metadata that will be present on all data loaded from the data source"
          },
          "component": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/CloudS3DataSource"
                  },
                  {
                    "$ref": "#/components/schemas/CloudAzStorageBlobDataSource"
                  },
                  {
                    "$ref": "#/components/schemas/CloudOneDriveDataSource"
                  },
                  {
                    "$ref": "#/components/schemas/CloudSharepointDataSource"
                  }
                ]
              }
            ],
            "title": "Component"
          }
        },
        "type": "object",
        "required": ["source_type"],
        "title": "DataSourceUpdate",
        "description": "Schema for updating a data source."
      },
      "EvalDataset": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "Unique identifier"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation datetime"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Update datetime"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the EvalDataset."
          },
          "project_id": {
            "type": "string",
            "format": "uuid",
            "title": "Project Id"
          }
        },
        "type": "object",
        "required": ["id", "name", "project_id"],
        "title": "EvalDataset",
        "description": "Schema for an eval dataset.\nIncludes the other DB fields like id, created_at, & updated_at."
      },
      "EvalDatasetCreate": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the EvalDataset."
          }
        },
        "type": "object",
        "required": ["name"],
        "title": "EvalDatasetCreate",
        "description": "Schema for creating an eval dataset."
      },
      "EvalDatasetJobParams": {
        "properties": {
          "eval_question_ids": {
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "type": "array",
            "title": "Eval Question Ids",
            "description": "The IDs for the EvalQuestions this execution ran against."
          },
          "eval_execution_params": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EvalExecutionParams"
              }
            ],
            "title": "Eval Execution Params",
            "description": "The parameters for the eval execution."
          }
        },
        "type": "object",
        "required": ["eval_question_ids", "eval_execution_params"],
        "title": "EvalDatasetJobParams",
        "description": "Schema for the parameters of an eval dataset job."
      },
      "EvalDatasetJobRecord": {
        "properties": {
          "job_name": {
            "type": "string",
            "enum": ["eval_dataset_job"],
            "title": "Job Name"
          },
          "partitions": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string"
                }
              ]
            },
            "type": "object",
            "title": "Partitions",
            "description": "The partitions for this execution. Used for determining where to save job output."
          },
          "parameters": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EvalDatasetJobParams"
              }
            ],
            "title": "Parameters",
            "description": "Additional input parameters for the eval execution."
          },
          "session_id": {
            "type": "string",
            "format": "uuid",
            "title": "Session Id",
            "description": "The upstream request ID that created this job. Used for tracking the job across services."
          },
          "correlation_id": {
            "type": "string",
            "format": "uuid",
            "title": "Correlation Id",
            "description": "The correlation ID for this job. Used for tracking the job across services."
          },
          "parent_job_execution_id": {
            "type": "string",
            "format": "uuid",
            "title": "Parent Job Execution Id",
            "description": "The ID of the parent job execution."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation datetime"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "Unique identifier"
          },
          "status": {
            "$ref": "#/components/schemas/StatusEnum"
          },
          "error_message": {
            "type": "string",
            "title": "Error Message"
          },
          "attempts": {
            "type": "integer",
            "title": "Attempts",
            "description": "The number of times this job has been attempted",
            "default": 0
          },
          "started_at": {
            "type": "string",
            "format": "date-time",
            "title": "Started At"
          },
          "ended_at": {
            "type": "string",
            "format": "date-time",
            "title": "Ended At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Update datetime"
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Base"
              }
            ],
            "title": "Data",
            "description": "Additional metadata for the job execution."
          }
        },
        "type": "object",
        "required": ["job_name", "partitions", "status"],
        "title": "EvalDatasetJobRecord",
        "description": "Schema for job that evaluates an EvalDataset against a pipeline."
      },
      "EvalDatasetUpdate": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the EvalDataset."
          }
        },
        "type": "object",
        "required": ["name"],
        "title": "EvalDatasetUpdate",
        "description": "Schema for updating an eval dataset.\nOnly the name can be updated."
      },
      "EvalExecutionCreate": {
        "properties": {
          "eval_question_ids": {
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "type": "array",
            "title": "Eval Question Ids"
          },
          "params": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EvalExecutionParamsOverride"
              }
            ],
            "title": "Params",
            "description": "The parameters for the eval execution that will override the ones set in the pipeline."
          }
        },
        "type": "object",
        "required": ["eval_question_ids"],
        "title": "EvalExecutionCreate",
        "description": "Schema for creating an eval execution for a given set of questions on a pipeline."
      },
      "EvalExecutionParams": {
        "properties": {
          "llm_model": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SupportedEvalLLMModelNames"
              }
            ],
            "description": "The LLM model to use within eval execution.",
            "default": "GPT_3_5_TURBO"
          },
          "qa_prompt_tmpl": {
            "type": "string",
            "title": "Qa Prompt Tmpl",
            "description": "The template to use for the question answering prompt.",
            "default": "Context information is below.\n---------------------\n{context_str}\n---------------------\nGiven the context information and not prior knowledge, answer the query.\nQuery: {query_str}\nAnswer: "
          }
        },
        "type": "object",
        "title": "EvalExecutionParams",
        "description": "Schema for the params for an eval execution."
      },
      "EvalExecutionParamsOverride": {
        "properties": {
          "llm_model": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SupportedEvalLLMModelNames"
              }
            ],
            "description": "The LLM model to use within eval execution."
          },
          "qa_prompt_tmpl": {
            "type": "string",
            "title": "Qa Prompt Tmpl",
            "description": "The template to use for the question answering prompt."
          }
        },
        "type": "object",
        "title": "EvalExecutionParamsOverride",
        "description": "Schema for the params override for an eval execution."
      },
      "EvalLLMModelData": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the LLM model."
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "The description of the LLM model."
          }
        },
        "type": "object",
        "required": ["name", "description"],
        "title": "EvalLLMModelData",
        "description": "Schema for an eval LLM model."
      },
      "EvalQuestion": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "Unique identifier"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation datetime"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Update datetime"
          },
          "content": {
            "type": "string",
            "maxLength": 1000,
            "minLength": 1,
            "title": "Content",
            "description": "The content of the question."
          },
          "eval_dataset_id": {
            "type": "string",
            "format": "uuid",
            "title": "Eval Dataset Id"
          },
          "eval_dataset_index": {
            "type": "integer",
            "title": "Eval Dataset Index",
            "description": "The index at which this question is positioned relative to the other questions in the linked EvalDataset. Client is responsible for setting this correctly.",
            "min": 0
          }
        },
        "type": "object",
        "required": ["id", "content", "eval_dataset_id", "eval_dataset_index"],
        "title": "EvalQuestion",
        "description": "Base schema model containing common database fields."
      },
      "EvalQuestionCreate": {
        "properties": {
          "content": {
            "type": "string",
            "maxLength": 1000,
            "minLength": 1,
            "title": "Content",
            "description": "The content of the question."
          }
        },
        "type": "object",
        "required": ["content"],
        "title": "EvalQuestionCreate"
      },
      "EvalQuestionResult": {
        "properties": {
          "eval_question_id": {
            "type": "string",
            "format": "uuid",
            "title": "Eval Question Id",
            "description": "The ID of the question that was executed."
          },
          "pipeline_id": {
            "type": "string",
            "format": "uuid",
            "title": "Pipeline Id",
            "description": "The ID of the pipeline that the question was executed against."
          },
          "source_nodes": {
            "items": {
              "$ref": "#/components/schemas/TextNode"
            },
            "type": "array",
            "title": "Source Nodes",
            "description": "The nodes retrieved by the pipeline for the given question."
          },
          "answer": {
            "type": "string",
            "title": "Answer",
            "description": "The answer to the question."
          },
          "eval_metrics": {
            "additionalProperties": {
              "$ref": "#/components/schemas/MetricResult"
            },
            "type": "object",
            "title": "Eval Metrics",
            "description": "The eval metrics for the question."
          },
          "eval_dataset_execution_id": {
            "type": "string",
            "format": "uuid",
            "title": "Eval Dataset Execution Id",
            "description": "The ID of the EvalDatasetJobRecord that this result was generated from."
          },
          "eval_dataset_execution_params": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EvalExecutionParams"
              }
            ],
            "title": "Eval Dataset Execution Params",
            "description": "The EvalExecutionParams that were used when this result was generated."
          },
          "eval_finished_at": {
            "type": "string",
            "format": "date-time",
            "title": "Eval Finished At",
            "description": "The timestamp when the eval finished."
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "EvalQuestionResult"
          }
        },
        "type": "object",
        "required": [
          "eval_question_id",
          "pipeline_id",
          "source_nodes",
          "answer",
          "eval_metrics",
          "eval_dataset_execution_id",
          "eval_dataset_execution_params",
          "eval_finished_at"
        ],
        "title": "EvalQuestionResult",
        "description": "Schema for the result of an eval question job."
      },
      "File": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "Unique identifier"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation datetime"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Update datetime"
          },
          "name": {
            "type": "string",
            "maxLength": 3000,
            "minLength": 1,
            "title": "Name"
          },
          "file_size": {
            "type": "integer",
            "minimum": 0.0,
            "title": "File Size",
            "description": "Size of the file in bytes"
          },
          "file_type": {
            "type": "string",
            "maxLength": 3000,
            "minLength": 1,
            "title": "File Type",
            "description": "File type (e.g. pdf, docx, etc.)"
          },
          "project_id": {
            "type": "string",
            "format": "uuid",
            "title": "Project Id",
            "description": "The ID of the project that the file belongs to"
          },
          "last_modified_at": {
            "type": "string",
            "format": "date-time",
            "title": "Last Modified At",
            "description": "The last modified time of the file"
          },
          "resource_info": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "items": {},
                  "type": "array"
                },
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Resource Info",
            "description": "Resource information for the file"
          },
          "data_source_id": {
            "type": "string",
            "format": "uuid",
            "title": "Data Source Id",
            "description": "The ID of the data source that the file belongs to"
          }
        },
        "type": "object",
        "required": ["id", "name", "project_id"],
        "title": "File",
        "description": "Schema for a file."
      },
      "FileCreate": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 3000,
            "minLength": 1,
            "title": "Name"
          },
          "file_size": {
            "type": "integer",
            "minimum": 0.0,
            "title": "File Size",
            "description": "Size of the file in bytes"
          },
          "last_modified_at": {
            "type": "string",
            "format": "date-time",
            "title": "Last Modified At",
            "description": "The last modified time of the file"
          },
          "resource_info": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "items": {},
                  "type": "array"
                },
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Resource Info",
            "description": "Resource information for the file"
          },
          "data_source_id": {
            "type": "string",
            "format": "uuid",
            "title": "Data Source Id",
            "description": "The ID of the data source that the file belongs to"
          }
        },
        "type": "object",
        "required": ["name"],
        "title": "FileCreate"
      },
      "FilterCondition": {
        "type": "string",
        "enum": ["and", "or"],
        "title": "FilterCondition",
        "description": "Vector store filter conditions to combine different filters."
      },
      "FilterOperator": {
        "type": "string",
        "enum": [
          "==",
          ">",
          "<",
          "!=",
          ">=",
          "<=",
          "in",
          "nin",
          "any",
          "all",
          "text_match",
          "contains"
        ],
        "title": "FilterOperator",
        "description": "Vector store filter operator."
      },
      "GeminiEmbedding": {
        "properties": {
          "model_name": {
            "type": "string",
            "title": "Model Name",
            "description": "The name of the embedding model.",
            "default": "unknown"
          },
          "embed_batch_size": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "Embed Batch Size",
            "description": "The batch size for embedding calls.",
            "default": 10,
            "lte": 2048
          },
          "callback_manager": {
            "type": "object",
            "title": "Callback Manager",
            "default": {}
          },
          "num_workers": {
            "type": "integer",
            "title": "Num Workers",
            "description": "The number of workers to use for async embedding calls."
          },
          "title": {
            "type": "string",
            "title": "Title",
            "description": "Title is only applicable for retrieval_document tasks, and is used to represent a document title. For other tasks, title is invalid.",
            "default": ""
          },
          "task_type": {
            "type": "string",
            "title": "Task Type",
            "description": "The task for embedding model.",
            "default": "retrieval_document"
          },
          "api_key": {
            "type": "string",
            "title": "Api Key",
            "description": "API key to access the model. Defaults to None."
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "GeminiEmbedding"
          }
        },
        "type": "object",
        "title": "GeminiEmbedding",
        "description": "Google Gemini embeddings.\n\nArgs:\n    model_name (str): Model for embedding.\n        Defaults to \"models/embedding-001\".\n\n    api_key (Optional[str]): API key to access the model. Defaults to None.\n    api_base (Optional[str]): API base to access the model. Defaults to Official Base.\n    transport (Optional[str]): Transport to access the model."
      },
      "HTMLNodeParser": {
        "properties": {
          "include_metadata": {
            "type": "boolean",
            "title": "Include Metadata",
            "description": "Whether or not to consider metadata when splitting.",
            "default": true
          },
          "include_prev_next_rel": {
            "type": "boolean",
            "title": "Include Prev Next Rel",
            "description": "Include prev/next node relationships.",
            "default": true
          },
          "callback_manager": {
            "type": "object",
            "title": "Callback Manager",
            "default": {}
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags",
            "description": "HTML tags to extract text from.",
            "default": [
              "p",
              "h1",
              "h2",
              "h3",
              "h4",
              "h5",
              "h6",
              "li",
              "b",
              "i",
              "u",
              "section"
            ]
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "HTMLNodeParser"
          }
        },
        "type": "object",
        "title": "HTMLNodeParser",
        "description": "HTML node parser.\n\nSplits a document into Nodes using custom HTML splitting logic.\n\nArgs:\n    include_metadata (bool): whether to include metadata in nodes\n    include_prev_next_rel (bool): whether to include prev/next relationships"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "HuggingFaceInferenceAPIEmbedding": {
        "properties": {
          "model_name": {
            "type": "string",
            "title": "Model Name",
            "description": "Hugging Face model name. If None, the task will be used."
          },
          "embed_batch_size": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "Embed Batch Size",
            "description": "The batch size for embedding calls.",
            "default": 10,
            "lte": 2048
          },
          "callback_manager": {
            "type": "object",
            "title": "Callback Manager",
            "default": {}
          },
          "num_workers": {
            "type": "integer",
            "title": "Num Workers",
            "description": "The number of workers to use for async embedding calls."
          },
          "pooling": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Pooling"
              }
            ],
            "description": "Pooling strategy. If None, the model's default pooling is used.",
            "default": "cls"
          },
          "query_instruction": {
            "type": "string",
            "title": "Query Instruction",
            "description": "Instruction to prepend during query embedding."
          },
          "text_instruction": {
            "type": "string",
            "title": "Text Instruction",
            "description": "Instruction to prepend during text embedding."
          },
          "token": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "boolean"
              }
            ],
            "title": "Token",
            "description": "Hugging Face token. Will default to the locally saved token. Pass token=False if you don\u2019t want to send your token to the server."
          },
          "timeout": {
            "type": "number",
            "title": "Timeout",
            "description": "The maximum number of seconds to wait for a response from the server. Loading a new model in Inference API can take up to several minutes. Defaults to None, meaning it will loop until the server is available."
          },
          "headers": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Headers",
            "description": "Additional headers to send to the server. By default only the authorization and user-agent headers are sent. Values in this dictionary will override the default values."
          },
          "cookies": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Cookies",
            "description": "Additional cookies to send to the server."
          },
          "task": {
            "type": "string",
            "title": "Task",
            "description": "Optional task to pick Hugging Face's recommended model, used when model_name is left as default of None."
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "HuggingFaceInferenceAPIEmbedding"
          }
        },
        "type": "object",
        "title": "HuggingFaceInferenceAPIEmbedding",
        "description": "Wrapper on the Hugging Face's Inference API for embeddings.\n\nOverview of the design:\n- Uses the feature extraction task: https://huggingface.co/tasks/feature-extraction"
      },
      "JSONNodeParser": {
        "properties": {
          "include_metadata": {
            "type": "boolean",
            "title": "Include Metadata",
            "description": "Whether or not to consider metadata when splitting.",
            "default": true
          },
          "include_prev_next_rel": {
            "type": "boolean",
            "title": "Include Prev Next Rel",
            "description": "Include prev/next node relationships.",
            "default": true
          },
          "callback_manager": {
            "type": "object",
            "title": "Callback Manager",
            "default": {}
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "JSONNodeParser"
          }
        },
        "type": "object",
        "title": "JSONNodeParser",
        "description": "JSON node parser.\n\nSplits a document into Nodes using custom JSON splitting logic.\n\nArgs:\n    include_metadata (bool): whether to include metadata in nodes\n    include_prev_next_rel (bool): whether to include prev/next relationships"
      },
      "LLM": {
        "properties": {
          "callback_manager": {
            "type": "object",
            "title": "Callback Manager",
            "default": {}
          },
          "system_prompt": {
            "type": "string",
            "title": "System Prompt",
            "description": "System prompt for LLM calls."
          },
          "output_parser": {
            "type": "object",
            "title": "Output Parser",
            "description": "Output parser to parse, validate, and correct errors programmatically.",
            "default": {}
          },
          "pydantic_program_mode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PydanticProgramMode"
              }
            ],
            "default": "default"
          },
          "query_wrapper_prompt": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BasePromptTemplate"
              }
            ],
            "title": "Query Wrapper Prompt",
            "description": "Query wrapper prompt for LLM calls."
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "base_component"
          }
        },
        "type": "object",
        "title": "LLM",
        "description": "The LLM class is the main class for interacting with language models.\n\nAttributes:\n    system_prompt (Optional[str]):\n        System prompt for LLM calls.\n    messages_to_prompt (Callable):\n        Function to convert a list of messages to an LLM prompt.\n    completion_to_prompt (Callable):\n        Function to convert a completion to an LLM prompt.\n    output_parser (Optional[BaseOutputParser]):\n        Output parser to parse, validate, and correct errors programmatically.\n    pydantic_program_mode (PydanticProgramMode):\n        Pydantic program mode to use for structured prediction."
      },
      "LlamaParseParameters": {
        "properties": {
          "languages": {
            "items": {
              "$ref": "#/components/schemas/ParserLanguages"
            },
            "type": "array",
            "minItems": 1
          },
          "parsing_instruction": {
            "type": "string",
            "title": "Parsing Instruction",
            "default": ""
          },
          "disable_ocr": {
            "type": "boolean",
            "title": "Disable Ocr",
            "default": false
          },
          "invalidate_cache": {
            "type": "boolean",
            "title": "Invalidate Cache",
            "default": false
          },
          "do_not_cache": {
            "type": "boolean",
            "title": "Do Not Cache",
            "default": false
          },
          "fast_mode": {
            "type": "boolean",
            "title": "Fast Mode",
            "default": false
          },
          "skip_diagonal_text": {
            "type": "boolean",
            "title": "Skip Diagonal Text",
            "default": false
          },
          "gpt4o_mode": {
            "type": "boolean",
            "title": "Gpt4O Mode",
            "default": false
          },
          "gpt4o_api_key": {
            "type": "string",
            "title": "Gpt4O Api Key",
            "default": ""
          },
          "do_not_unroll_columns": {
            "type": "boolean",
            "title": "Do Not Unroll Columns",
            "default": false
          },
          "page_separator": {
            "type": "string",
            "title": "Page Separator"
          },
          "bounding_box": {
            "type": "string",
            "title": "Bounding Box",
            "default": ""
          },
          "target_pages": {
            "type": "string",
            "title": "Target Pages",
            "default": ""
          }
        },
        "type": "object",
        "title": "LlamaParseParameters",
        "description": "Settings that can be configured for how to use LlamaParse to parse files witin a LlamaCloud pipeline."
      },
      "LlamaParseSupportedFileExtensions": {
        "type": "string",
        "enum": [
          ".pdf",
          ".doc",
          ".docx",
          ".docm",
          ".dot",
          ".dotx",
          ".dotm",
          ".rtf",
          ".wps",
          ".wpd",
          ".sxw",
          ".stw",
          ".sxg",
          ".pages",
          ".mw",
          ".mcw",
          ".uot",
          ".uof",
          ".uos",
          ".uop",
          ".ppt",
          ".pptx",
          ".pot",
          ".pptm",
          ".potx",
          ".potm",
          ".key",
          ".odp",
          ".odg",
          ".otp",
          ".fopd",
          ".sxi",
          ".sti",
          ".epub",
          ".html",
          ".htm",
          ".xls",
          ".xlsx",
          ".xlsm",
          ".xlsb",
          ".xlw",
          ".csv",
          ".dif",
          ".sylk",
          ".slk",
          ".prn",
          ".numbers",
          ".et",
          ".ods",
          ".fods",
          ".uos1",
          ".uos2",
          ".dbf",
          ".wk1",
          ".wk2",
          ".wk3",
          ".wk4",
          ".wks",
          ".wq1",
          ".wq2",
          ".wb1",
          ".wb2",
          ".wb3",
          ".qpw",
          ".xlr",
          ".eth",
          ".tsv"
        ],
        "title": "LlamaParseSupportedFileExtensions",
        "description": "An enumeration."
      },
      "LocalEval": {
        "properties": {
          "query": {
            "type": "string",
            "title": "Query",
            "description": "Query string"
          },
          "contexts": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Contexts",
            "description": "Context strings"
          },
          "response": {
            "type": "string",
            "title": "Response",
            "description": "Response string"
          },
          "passing": {
            "type": "boolean",
            "title": "Passing",
            "description": "Binary evaluation result (passing or not)"
          },
          "feedback": {
            "type": "string",
            "title": "Feedback",
            "description": "Feedback or reasoning for the response"
          },
          "score": {
            "type": "number",
            "title": "Score",
            "description": "Score for the response"
          },
          "pairwise_source": {
            "type": "string",
            "title": "Pairwise Source",
            "description": "Used only for pairwise and specifies whether it is from original order of presented answers or flipped order"
          },
          "invalid_result": {
            "type": "boolean",
            "title": "Invalid Result",
            "description": "Whether the evaluation result is an invalid one.",
            "default": false
          },
          "invalid_reason": {
            "type": "string",
            "title": "Invalid Reason",
            "description": "Reason for invalid evaluation."
          }
        },
        "type": "object",
        "title": "LocalEval",
        "description": "Evaluation result, EvaluationResult from llama_index.\n\nOutput of an BaseEvaluator."
      },
      "LocalEvalResults": {
        "properties": {
          "project_id": {
            "type": "string",
            "format": "uuid",
            "title": "Project Id",
            "description": "The ID of the project."
          },
          "eval_set_id": {
            "type": "string",
            "format": "uuid",
            "title": "Eval Set Id",
            "description": "The ID of the local eval result set."
          },
          "app_name": {
            "type": "string",
            "title": "App Name",
            "description": "The name of the app."
          },
          "eval_name": {
            "type": "string",
            "title": "Eval Name",
            "description": "The name of the eval."
          },
          "result": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LocalEval"
              }
            ],
            "title": "Result",
            "description": "The eval results."
          }
        },
        "type": "object",
        "required": ["project_id", "app_name", "eval_name", "result"],
        "title": "LocalEvalResults",
        "description": "Schema for the result of a local evaluation."
      },
      "LocalEvalSetCreate": {
        "properties": {
          "app_name": {
            "type": "string",
            "title": "App Name",
            "description": "The name of the app."
          },
          "results": {
            "additionalProperties": {
              "items": {
                "$ref": "#/components/schemas/LocalEval"
              },
              "type": "array"
            },
            "type": "object",
            "title": "Results",
            "description": "The eval results."
          }
        },
        "type": "object",
        "required": ["app_name", "results"],
        "title": "LocalEvalSetCreate",
        "description": "Schema for creating a local eval set."
      },
      "LocalEvalSets": {
        "properties": {
          "eval_set_id": {
            "type": "string",
            "format": "uuid",
            "title": "Eval Set Id",
            "description": "The ID of the eval set."
          },
          "app_name": {
            "type": "string",
            "title": "App Name",
            "description": "The name of the app."
          },
          "upload_time": {
            "type": "string",
            "format": "date-time",
            "title": "Upload Time",
            "description": "The time of the upload."
          }
        },
        "type": "object",
        "required": ["eval_set_id", "app_name", "upload_time"],
        "title": "LocalEvalSets"
      },
      "ManagedIngestionStatus": {
        "type": "string",
        "enum": [
          "NOT_STARTED",
          "IN_PROGRESS",
          "SUCCESS",
          "ERROR",
          "PARTIAL_SUCCESS"
        ],
        "title": "ManagedIngestionStatus",
        "description": "Status of managed ingestion with partial Updates."
      },
      "ManagedIngestionStatusResponse": {
        "properties": {
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ManagedIngestionStatus"
              }
            ],
            "description": "Status of the ingestion."
          }
        },
        "type": "object",
        "required": ["status"],
        "title": "ManagedIngestionStatusResponse"
      },
      "MarkdownElementNodeParser": {
        "properties": {
          "include_metadata": {
            "type": "boolean",
            "title": "Include Metadata",
            "description": "Whether or not to consider metadata when splitting.",
            "default": true
          },
          "include_prev_next_rel": {
            "type": "boolean",
            "title": "Include Prev Next Rel",
            "description": "Include prev/next node relationships.",
            "default": true
          },
          "callback_manager": {
            "type": "object",
            "title": "Callback Manager",
            "default": {}
          },
          "llm": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LLM"
              }
            ],
            "title": "Llm",
            "description": "LLM model to use for summarization."
          },
          "summary_query_str": {
            "type": "string",
            "title": "Summary Query Str",
            "description": "Query string to use for summarization.",
            "default": "What is this table about? Give a very concise summary (imagine you are adding a new caption and summary for this table), and output the real/existing table title/caption if context provided.and output the real/existing table id if context provided.and also output whether or not the table should be kept."
          },
          "num_workers": {
            "type": "integer",
            "title": "Num Workers",
            "description": "Num of workers for async jobs.",
            "default": 4
          },
          "show_progress": {
            "type": "boolean",
            "title": "Show Progress",
            "description": "Whether to show progress.",
            "default": true
          },
          "nested_node_parser": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NodeParser"
              }
            ],
            "title": "Nested Node Parser",
            "description": "Other types of node parsers to handle some types of nodes."
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "MarkdownElementNodeParser"
          }
        },
        "type": "object",
        "title": "MarkdownElementNodeParser",
        "description": "Markdown element node parser.\n\nSplits a markdown document into Text Nodes and Index Nodes corresponding to embedded objects\n(e.g. tables)."
      },
      "MarkdownNodeParser": {
        "properties": {
          "include_metadata": {
            "type": "boolean",
            "title": "Include Metadata",
            "description": "Whether or not to consider metadata when splitting.",
            "default": true
          },
          "include_prev_next_rel": {
            "type": "boolean",
            "title": "Include Prev Next Rel",
            "description": "Include prev/next node relationships.",
            "default": true
          },
          "callback_manager": {
            "type": "object",
            "title": "Callback Manager",
            "default": {}
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "MarkdownNodeParser"
          }
        },
        "type": "object",
        "title": "MarkdownNodeParser",
        "description": "Markdown node parser.\n\nSplits a document into Nodes using custom Markdown splitting logic.\n\nArgs:\n    include_metadata (bool): whether to include metadata in nodes\n    include_prev_next_rel (bool): whether to include prev/next relationships"
      },
      "MessageRole": {
        "type": "string",
        "enum": [
          "system",
          "user",
          "assistant",
          "function",
          "tool",
          "chatbot",
          "model"
        ],
        "title": "MessageRole",
        "description": "Message role."
      },
      "MetadataFilter": {
        "properties": {
          "key": {
            "type": "string",
            "title": "Key"
          },
          "value": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "items": {
                  "type": "number"
                },
                "type": "array"
              },
              {
                "items": {
                  "type": "integer"
                },
                "type": "array"
              }
            ],
            "title": "Value"
          },
          "operator": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FilterOperator"
              }
            ],
            "default": "=="
          }
        },
        "type": "object",
        "required": ["key", "value"],
        "title": "MetadataFilter",
        "description": "Comprehensive metadata filter for vector stores to support more operators.\n\nValue uses Strict* types, as int, float and str are compatible types and were all\nconverted to string before.\n\nSee: https://docs.pydantic.dev/latest/usage/types/#strict-types"
      },
      "MetadataFilters": {
        "properties": {
          "filters": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/MetadataFilter"
                },
                {
                  "$ref": "#/components/schemas/MetadataFilters"
                }
              ]
            },
            "type": "array",
            "title": "Filters"
          },
          "condition": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FilterCondition"
              }
            ],
            "default": "and"
          }
        },
        "type": "object",
        "required": ["filters"],
        "title": "MetadataFilters",
        "description": "Metadata filters for vector stores."
      },
      "MetricResult": {
        "properties": {
          "passing": {
            "type": "boolean",
            "title": "Passing",
            "description": "Whether the metric passed or not."
          },
          "score": {
            "type": "number",
            "title": "Score",
            "description": "The score for the metric."
          },
          "feedback": {
            "type": "string",
            "title": "Feedback",
            "description": "The reasoning for the metric."
          }
        },
        "type": "object",
        "title": "MetricResult"
      },
      "NodeParser": {
        "properties": {
          "include_metadata": {
            "type": "boolean",
            "title": "Include Metadata",
            "description": "Whether or not to consider metadata when splitting.",
            "default": true
          },
          "include_prev_next_rel": {
            "type": "boolean",
            "title": "Include Prev Next Rel",
            "description": "Include prev/next node relationships.",
            "default": true
          },
          "callback_manager": {
            "type": "object",
            "title": "Callback Manager",
            "default": {}
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "base_component"
          }
        },
        "type": "object",
        "title": "NodeParser",
        "description": "Base interface for node parser."
      },
      "ObjectType": {
        "type": "string",
        "enum": ["1", "2", "3", "4"],
        "title": "ObjectType",
        "description": "An enumeration."
      },
      "OpenAIEmbedding": {
        "properties": {
          "model_name": {
            "type": "string",
            "title": "Model Name",
            "description": "The name of the embedding model.",
            "default": "unknown"
          },
          "embed_batch_size": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "Embed Batch Size",
            "description": "The batch size for embedding calls.",
            "default": 10,
            "lte": 2048
          },
          "callback_manager": {
            "type": "object",
            "title": "Callback Manager",
            "default": {}
          },
          "num_workers": {
            "type": "integer",
            "title": "Num Workers",
            "description": "The number of workers to use for async embedding calls."
          },
          "additional_kwargs": {
            "type": "object",
            "title": "Additional Kwargs",
            "description": "Additional kwargs for the OpenAI API."
          },
          "api_key": {
            "type": "string",
            "title": "Api Key",
            "description": "The OpenAI API key."
          },
          "api_base": {
            "type": "string",
            "title": "Api Base",
            "description": "The base URL for OpenAI API.",
            "default": "https://api.openai.com/v1"
          },
          "api_version": {
            "type": "string",
            "title": "Api Version",
            "description": "The version for OpenAI API.",
            "default": ""
          },
          "max_retries": {
            "type": "integer",
            "title": "Max Retries",
            "description": "Maximum number of retries.",
            "default": 10,
            "gte": 0
          },
          "timeout": {
            "type": "number",
            "title": "Timeout",
            "description": "Timeout for each request.",
            "default": 60.0,
            "gte": 0
          },
          "default_headers": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Default Headers",
            "description": "The default headers for API requests."
          },
          "reuse_client": {
            "type": "boolean",
            "title": "Reuse Client",
            "description": "Reuse the OpenAI client between requests. When doing anything with large volumes of async API calls, setting this to false can improve stability.",
            "default": true
          },
          "dimensions": {
            "type": "integer",
            "title": "Dimensions",
            "description": "The number of dimensions on the output embedding vectors. Works only with v3 embedding models."
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "OpenAIEmbedding"
          }
        },
        "type": "object",
        "required": ["api_key"],
        "title": "OpenAIEmbedding",
        "description": "OpenAI class for embeddings.\n\nArgs:\n    mode (str): Mode for embedding.\n        Defaults to OpenAIEmbeddingMode.TEXT_SEARCH_MODE.\n        Options are:\n\n        - OpenAIEmbeddingMode.SIMILARITY_MODE\n        - OpenAIEmbeddingMode.TEXT_SEARCH_MODE\n\n    model (str): Model for embedding.\n        Defaults to OpenAIEmbeddingModelType.TEXT_EMBED_ADA_002.\n        Options are:\n\n        - OpenAIEmbeddingModelType.DAVINCI\n        - OpenAIEmbeddingModelType.CURIE\n        - OpenAIEmbeddingModelType.BABBAGE\n        - OpenAIEmbeddingModelType.ADA\n        - OpenAIEmbeddingModelType.TEXT_EMBED_ADA_002"
      },
      "ParserLanguages": {
        "type": "string",
        "enum": [
          "af",
          "az",
          "bs",
          "cs",
          "cy",
          "da",
          "de",
          "en",
          "es",
          "et",
          "fr",
          "ga",
          "hr",
          "hu",
          "id",
          "is",
          "it",
          "ku",
          "la",
          "lt",
          "lv",
          "mi",
          "ms",
          "mt",
          "nl",
          "no",
          "oc",
          "pi",
          "pl",
          "pt",
          "ro",
          "rs_latin",
          "sk",
          "sl",
          "sq",
          "sv",
          "sw",
          "tl",
          "tr",
          "uz",
          "vi",
          "ar",
          "fa",
          "ug",
          "ur",
          "bn",
          "as",
          "mni",
          "ru",
          "rs_cyrillic",
          "be",
          "bg",
          "uk",
          "mn",
          "abq",
          "ady",
          "kbd",
          "ava",
          "dar",
          "inh",
          "che",
          "lbe",
          "lez",
          "tab",
          "tjk",
          "hi",
          "mr",
          "ne",
          "bh",
          "mai",
          "ang",
          "bho",
          "mah",
          "sck",
          "new",
          "gom",
          "sa",
          "bgc",
          "th",
          "ch_sim",
          "ch_tra",
          "ja",
          "ko",
          "ta",
          "te",
          "kn"
        ],
        "title": "ParserLanguages",
        "description": "Enum for representing the languages supported by the parser"
      },
      "ParsingHistoryItem": {
        "properties": {
          "user_id": {
            "type": "string",
            "title": "User Id"
          },
          "day": {
            "type": "string",
            "title": "Day"
          },
          "job_id": {
            "type": "string",
            "title": "Job Id"
          },
          "file_name": {
            "type": "string",
            "title": "File Name"
          },
          "original_file_name": {
            "type": "string",
            "title": "Original File Name"
          },
          "expired": {
            "type": "boolean",
            "title": "Expired",
            "default": false
          },
          "pages": {
            "type": "number",
            "title": "Pages"
          },
          "images": {
            "type": "number",
            "title": "Images"
          },
          "time": {
            "type": "number",
            "title": "Time"
          }
        },
        "type": "object",
        "required": [
          "user_id",
          "day",
          "job_id",
          "file_name",
          "original_file_name"
        ],
        "title": "ParsingHistoryItem"
      },
      "ParsingJob": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "status": {
            "$ref": "#/components/schemas/StatusEnum"
          }
        },
        "type": "object",
        "required": ["id", "status"],
        "title": "ParsingJob"
      },
      "ParsingJobJsonResult": {
        "properties": {
          "pages": {
            "title": "Pages",
            "description": "The json result of the parsing job"
          },
          "job_metadata": {
            "title": "Job Metadata",
            "description": "Parsing job metadata , including usage"
          }
        },
        "type": "object",
        "title": "ParsingJobJsonResult"
      },
      "ParsingJobMarkdownResult": {
        "properties": {
          "markdown": {
            "type": "string",
            "title": "Markdown",
            "description": "The markdown result of the parsing job"
          },
          "job_metadata": {
            "title": "Job Metadata",
            "description": "Parsing job metadata , including usage"
          }
        },
        "type": "object",
        "required": ["markdown"],
        "title": "ParsingJobMarkdownResult"
      },
      "ParsingJobTextResult": {
        "properties": {
          "text": {
            "type": "string",
            "title": "Text",
            "description": "The text result of the parsing job"
          },
          "job_metadata": {
            "title": "Job Metadata",
            "description": "Parsing job metadata , including usage"
          }
        },
        "type": "object",
        "required": ["text"],
        "title": "ParsingJobTextResult"
      },
      "ParsingUsage": {
        "properties": {
          "usage_pdf_pages": {
            "type": "integer",
            "title": "Usage Pdf Pages"
          },
          "max_pdf_pages": {
            "type": "integer",
            "title": "Max Pdf Pages"
          }
        },
        "type": "object",
        "required": ["usage_pdf_pages", "max_pdf_pages"],
        "title": "ParsingUsage"
      },
      "Pipeline": {
        "properties": {
          "configured_transformations": {
            "items": {
              "$ref": "#/components/schemas/ConfiguredTransformationItem"
            },
            "type": "array",
            "title": "Configured Transformations"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "Unique identifier"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation datetime"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Update datetime"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "project_id": {
            "type": "string",
            "format": "uuid",
            "title": "Project Id"
          },
          "pipeline_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PipelineType"
              }
            ],
            "description": "Type of pipeline. Either PLAYGROUND or MANAGED.",
            "default": "MANAGED"
          },
          "managed_pipeline_id": {
            "type": "string",
            "format": "uuid",
            "title": "Managed Pipeline Id",
            "description": "The ID of the ManagedPipeline this playground pipeline is linked to."
          },
          "preset_retrieval_parameters": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PresetRetrievalParams"
              }
            ],
            "title": "Preset Retrieval Parameters",
            "description": "Preset retrieval parameters for the pipeline."
          },
          "eval_parameters": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EvalExecutionParams"
              }
            ],
            "title": "Eval Parameters",
            "description": "Eval parameters for the pipeline."
          },
          "llama_parse_enabled": {
            "type": "boolean",
            "title": "Llama Parse Enabled",
            "description": "Whether to use LlamaParse during pipeline execution.",
            "default": true
          },
          "llama_parse_parameters": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LlamaParseParameters"
              }
            ],
            "title": "Llama Parse Parameters",
            "description": "Settings that can be configured for how to use LlamaParse to parse files within a LlamaCloud pipeline."
          },
          "data_sink": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DataSink"
              }
            ],
            "title": "Data Sink",
            "description": "The data sink for the pipeline. If None, the pipeline will use the fully managed data sink."
          }
        },
        "type": "object",
        "required": ["configured_transformations", "id", "name", "project_id"],
        "title": "Pipeline",
        "description": "Schema for a pipeline."
      },
      "PipelineCreate": {
        "properties": {
          "configured_transformations": {
            "items": {
              "$ref": "#/components/schemas/ConfiguredTransformationItem"
            },
            "type": "array",
            "title": "Configured Transformations",
            "description": "List of configured transformations."
          },
          "data_sink_id": {
            "type": "string",
            "format": "uuid",
            "title": "Data Sink Id",
            "description": "Data sink ID. When provided instead of data_sink, the data sink will be looked up by ID."
          },
          "data_sink": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DataSinkCreate"
              }
            ],
            "title": "Data Sink",
            "description": "Data sink. When provided instead of data_sink_id, the data sink will be created."
          },
          "preset_retrieval_parameters": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PresetRetrievalParams"
              }
            ],
            "title": "Preset Retrieval Parameters",
            "description": "Preset retrieval parameters for the pipeline."
          },
          "eval_parameters": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EvalExecutionParams"
              }
            ],
            "title": "Eval Parameters",
            "description": "Eval parameters for the pipeline."
          },
          "llama_parse_enabled": {
            "type": "boolean",
            "title": "Llama Parse Enabled",
            "description": "Whether to use LlamaParse during pipeline execution.",
            "default": true
          },
          "llama_parse_parameters": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LlamaParseParameters"
              }
            ],
            "title": "Llama Parse Parameters",
            "description": "Settings that can be configured for how to use LlamaParse to parse files within a LlamaCloud pipeline."
          },
          "name": {
            "type": "string",
            "maxLength": 3000,
            "minLength": 1,
            "title": "Name"
          },
          "pipeline_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PipelineType"
              }
            ],
            "description": "Type of pipeline. Either PLAYGROUND or MANAGED.",
            "default": "MANAGED"
          },
          "managed_pipeline_id": {
            "type": "string",
            "format": "uuid",
            "title": "Managed Pipeline Id",
            "description": "The ID of the ManagedPipeline this playground pipeline is linked to."
          }
        },
        "type": "object",
        "required": ["name"],
        "title": "PipelineCreate",
        "description": "Schema for creating a pipeline."
      },
      "PipelineDataSource": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "Unique identifier"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation datetime"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Update datetime"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the data source."
          },
          "source_type": {
            "$ref": "#/components/schemas/ConfigurableDataSourceNames"
          },
          "custom_metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "items": {},
                  "type": "array"
                },
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Custom Metadata",
            "description": "Custom metadata that will be present on all data loaded from the data source"
          },
          "component": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/CloudS3DataSource"
                  },
                  {
                    "$ref": "#/components/schemas/CloudAzStorageBlobDataSource"
                  },
                  {
                    "$ref": "#/components/schemas/CloudOneDriveDataSource"
                  },
                  {
                    "$ref": "#/components/schemas/CloudSharepointDataSource"
                  }
                ]
              }
            ],
            "title": "Component"
          },
          "project_id": {
            "type": "string",
            "format": "uuid",
            "title": "Project Id"
          },
          "data_source_id": {
            "type": "string",
            "format": "uuid",
            "title": "Data Source Id",
            "description": "The ID of the data source."
          },
          "pipeline_id": {
            "type": "string",
            "format": "uuid",
            "title": "Pipeline Id",
            "description": "The ID of the pipeline."
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "source_type",
          "component",
          "project_id",
          "data_source_id",
          "pipeline_id"
        ],
        "title": "PipelineDataSource",
        "description": "Schema for a data source in a pipeline."
      },
      "PipelineDataSourceCreate": {
        "properties": {
          "data_source_id": {
            "type": "string",
            "format": "uuid",
            "title": "Data Source Id",
            "description": "The ID of the data source."
          }
        },
        "type": "object",
        "required": ["data_source_id"],
        "title": "PipelineDataSourceCreate",
        "description": "Schema for creating an association between a data source and a pipeline."
      },
      "PipelineDeployment": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "Unique identifier"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation datetime"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Update datetime"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ManagedIngestionStatus"
              }
            ],
            "description": "Status of the pipeline deployment."
          },
          "started_at": {
            "type": "string",
            "format": "date-time",
            "title": "Started At",
            "description": "Time the pipeline deployment started."
          },
          "ended_at": {
            "type": "string",
            "format": "date-time",
            "title": "Ended At",
            "description": "Time the pipeline deployment finished."
          }
        },
        "type": "object",
        "required": ["id", "status"],
        "title": "PipelineDeployment",
        "description": "Base schema model containing common database fields."
      },
      "PipelineFile": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "Unique identifier"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation datetime"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Update datetime"
          },
          "name": {
            "type": "string",
            "maxLength": 3000,
            "minLength": 1,
            "title": "Name"
          },
          "file_size": {
            "type": "integer",
            "minimum": 0.0,
            "title": "File Size",
            "description": "Size of the file in bytes"
          },
          "file_type": {
            "type": "string",
            "maxLength": 3000,
            "minLength": 1,
            "title": "File Type",
            "description": "File type (e.g. pdf, docx, etc.)"
          },
          "project_id": {
            "type": "string",
            "format": "uuid",
            "title": "Project Id",
            "description": "The ID of the project that the file belongs to"
          },
          "last_modified_at": {
            "type": "string",
            "format": "date-time",
            "title": "Last Modified At",
            "description": "The last modified time of the file"
          },
          "resource_info": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "items": {},
                  "type": "array"
                },
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Resource Info",
            "description": "Resource information for the file"
          },
          "data_source_id": {
            "type": "string",
            "format": "uuid",
            "title": "Data Source Id",
            "description": "The ID of the data source that the file belongs to"
          },
          "file_id": {
            "type": "string",
            "format": "uuid",
            "title": "File Id",
            "description": "The ID of the file"
          },
          "pipeline_id": {
            "type": "string",
            "format": "uuid",
            "title": "Pipeline Id",
            "description": "The ID of the pipeline that the file is associated with"
          },
          "custom_metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "items": {},
                  "type": "array"
                },
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Custom Metadata",
            "description": "Custom metadata for the file"
          }
        },
        "type": "object",
        "required": ["id", "project_id", "pipeline_id"],
        "title": "PipelineFile",
        "description": "Schema for a file that is associated with a pipeline."
      },
      "PipelineFileCreate": {
        "properties": {
          "file_id": {
            "type": "string",
            "format": "uuid",
            "title": "File Id",
            "description": "The ID of the file"
          },
          "custom_metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "items": {},
                  "type": "array"
                },
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Custom Metadata",
            "description": "Custom metadata for the file"
          }
        },
        "type": "object",
        "required": ["file_id"],
        "title": "PipelineFileCreate",
        "description": "Schema for creating a file that is associated with a pipeline."
      },
      "PipelineFileUpdate": {
        "properties": {
          "custom_metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "items": {},
                  "type": "array"
                },
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Custom Metadata",
            "description": "Custom metadata for the file"
          }
        },
        "type": "object",
        "title": "PipelineFileUpdate",
        "description": "Schema for updating a file that is associated with a pipeline."
      },
      "PipelineType": {
        "type": "string",
        "enum": ["PLAYGROUND", "MANAGED"],
        "title": "PipelineType",
        "description": "Enum for representing the type of a pipeline"
      },
      "PipelineUpdate": {
        "properties": {
          "configured_transformations": {
            "items": {
              "$ref": "#/components/schemas/ConfiguredTransformationItem"
            },
            "type": "array",
            "title": "Configured Transformations"
          },
          "data_sink_id": {
            "type": "string",
            "format": "uuid",
            "title": "Data Sink Id",
            "description": "Data sink ID. When provided instead of data_sink, the data sink will be looked up by ID."
          },
          "data_sink": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DataSinkCreate"
              }
            ],
            "title": "Data Sink",
            "description": "Data sink. When provided instead of data_sink_id, the data sink will be created."
          },
          "preset_retrieval_parameters": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PresetRetrievalParams"
              }
            ],
            "title": "Preset Retrieval Parameters",
            "description": "Preset retrieval parameters for the pipeline."
          },
          "eval_parameters": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EvalExecutionParams"
              }
            ],
            "title": "Eval Parameters",
            "description": "Eval parameters for the pipeline."
          },
          "llama_parse_enabled": {
            "type": "boolean",
            "title": "Llama Parse Enabled",
            "description": "Whether to use LlamaParse during pipeline execution."
          },
          "llama_parse_parameters": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LlamaParseParameters"
              }
            ],
            "title": "Llama Parse Parameters",
            "description": "Settings that can be configured for how to use LlamaParse to parse files within a LlamaCloud pipeline."
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "managed_pipeline_id": {
            "type": "string",
            "format": "uuid",
            "title": "Managed Pipeline Id",
            "description": "The ID of the ManagedPipeline this playground pipeline is linked to."
          }
        },
        "type": "object",
        "title": "PipelineUpdate",
        "description": "Schema for updating a pipeline."
      },
      "Pooling": {
        "type": "string",
        "enum": ["cls", "mean", "last"],
        "title": "Pooling",
        "description": "Enum of possible pooling choices with pooling behaviors."
      },
      "PresetRetrievalParams": {
        "properties": {
          "dense_similarity_top_k": {
            "type": "integer",
            "maximum": 100.0,
            "minimum": 1.0,
            "title": "Dense Similarity Top K",
            "description": "Number of nodes for dense retrieval.",
            "default": 30
          },
          "sparse_similarity_top_k": {
            "type": "integer",
            "maximum": 100.0,
            "minimum": 1.0,
            "title": "Sparse Similarity Top K",
            "description": "Number of nodes for sparse retrieval.",
            "default": 30
          },
          "enable_reranking": {
            "type": "boolean",
            "title": "Enable Reranking",
            "description": "Enable reranking for retrieval",
            "default": true
          },
          "rerank_top_n": {
            "type": "integer",
            "maximum": 100.0,
            "minimum": 1.0,
            "title": "Rerank Top N",
            "description": "Number of reranked nodes for returning.",
            "default": 3
          },
          "alpha": {
            "type": "number",
            "maximum": 1.0,
            "minimum": 0.0,
            "title": "Alpha",
            "description": "Alpha value for hybrid retrieval to determine the weights between dense and sparse retrieval. 0 is sparse retrieval and 1 is dense retrieval.",
            "default": 0.5
          },
          "search_filters": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetadataFilters"
              }
            ],
            "title": "Search Filters",
            "description": "Search filters for retrieval."
          }
        },
        "type": "object",
        "title": "PresetRetrievalParams",
        "description": "Schema for the search params for an retrieval execution that can be preset for a pipeline."
      },
      "PresignedUrl": {
        "properties": {
          "url": {
            "type": "string",
            "maxLength": 65536,
            "minLength": 1,
            "format": "uri",
            "title": "Url",
            "description": "A presigned URL for IO operations against a private file"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "title": "Expires At",
            "description": "The time at which the presigned URL expires"
          },
          "form_fields": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Form Fields",
            "description": "Form fields for a presigned POST request"
          }
        },
        "type": "object",
        "required": ["url", "expires_at"],
        "title": "PresignedUrl",
        "description": "Schema for a presigned URL."
      },
      "Project": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 3000,
            "minLength": 1,
            "title": "Name"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "Unique identifier"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation datetime"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Update datetime"
          },
          "ad_hoc_eval_dataset_id": {
            "type": "string",
            "format": "uuid",
            "title": "Ad Hoc Eval Dataset Id"
          },
          "user_id": {
            "type": "string",
            "title": "User Id",
            "description": "The user ID of the project owner."
          },
          "is_default": {
            "type": "boolean",
            "title": "Is Default",
            "description": "Whether this project is the default project for the user.",
            "default": false
          }
        },
        "type": "object",
        "required": ["name", "id", "user_id"],
        "title": "Project",
        "description": "Schema for a project."
      },
      "ProjectCreate": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 3000,
            "minLength": 1,
            "title": "Name"
          }
        },
        "type": "object",
        "required": ["name"],
        "title": "ProjectCreate",
        "description": "Schema for creating a project."
      },
      "ProjectUpdate": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 3000,
            "minLength": 1,
            "title": "Name"
          }
        },
        "type": "object",
        "required": ["name"],
        "title": "ProjectUpdate",
        "description": "Schema for updating a project."
      },
      "PromptMixinPrompts": {
        "properties": {
          "project_id": {
            "type": "string",
            "format": "uuid",
            "title": "Project Id",
            "description": "The ID of the project."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "The ID of the prompt set."
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the prompt set."
          },
          "prompts": {
            "items": {
              "$ref": "#/components/schemas/PromptSpec"
            },
            "type": "array",
            "title": "Prompts",
            "description": "The prompts."
          }
        },
        "type": "object",
        "required": ["project_id", "name", "prompts"],
        "title": "PromptMixinPrompts",
        "description": "Schema for the prompts derived from the PromptMixin."
      },
      "PromptSpec": {
        "properties": {
          "prompt_key": {
            "type": "string",
            "title": "Prompt Key",
            "description": "The key of the prompt in the PromptMixin."
          },
          "prompt_class": {
            "type": "string",
            "title": "Prompt Class",
            "description": "The class of the prompt (PromptTemplate or ChatPromptTemplate)."
          },
          "prompt_type": {
            "type": "string",
            "title": "Prompt Type",
            "description": "The type of prompt."
          },
          "template": {
            "type": "string",
            "title": "Template",
            "description": "The template of the prompt."
          },
          "message_templates": {
            "items": {
              "$ref": "#/components/schemas/ChatMessage"
            },
            "type": "array",
            "title": "Message Templates",
            "description": "The chat message templates of the prompt."
          }
        },
        "type": "object",
        "required": ["prompt_key", "prompt_class", "prompt_type"],
        "title": "PromptSpec"
      },
      "PydanticProgramMode": {
        "type": "string",
        "enum": [
          "default",
          "openai",
          "llm",
          "function",
          "guidance",
          "lm-format-enforcer"
        ],
        "title": "PydanticProgramMode",
        "description": "Pydantic program mode."
      },
      "RelatedNodeInfo": {
        "properties": {
          "node_id": {
            "type": "string",
            "title": "Node Id"
          },
          "node_type": {
            "$ref": "#/components/schemas/ObjectType"
          },
          "metadata": {
            "type": "object",
            "title": "Metadata"
          },
          "hash": {
            "type": "string",
            "title": "Hash"
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "RelatedNodeInfo"
          }
        },
        "type": "object",
        "required": ["node_id"],
        "title": "RelatedNodeInfo",
        "description": "Base component object to capture class names."
      },
      "RetrievalParams": {
        "properties": {
          "dense_similarity_top_k": {
            "type": "integer",
            "maximum": 100.0,
            "minimum": 1.0,
            "title": "Dense Similarity Top K",
            "description": "Number of nodes for dense retrieval.",
            "default": 30
          },
          "sparse_similarity_top_k": {
            "type": "integer",
            "maximum": 100.0,
            "minimum": 1.0,
            "title": "Sparse Similarity Top K",
            "description": "Number of nodes for sparse retrieval.",
            "default": 30
          },
          "enable_reranking": {
            "type": "boolean",
            "title": "Enable Reranking",
            "description": "Enable reranking for retrieval",
            "default": true
          },
          "rerank_top_n": {
            "type": "integer",
            "maximum": 100.0,
            "minimum": 1.0,
            "title": "Rerank Top N",
            "description": "Number of reranked nodes for returning.",
            "default": 3
          },
          "alpha": {
            "type": "number",
            "maximum": 1.0,
            "minimum": 0.0,
            "title": "Alpha",
            "description": "Alpha value for hybrid retrieval to determine the weights between dense and sparse retrieval. 0 is sparse retrieval and 1 is dense retrieval.",
            "default": 0.5
          },
          "search_filters": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetadataFilters"
              }
            ],
            "title": "Search Filters",
            "description": "Search filters for retrieval."
          },
          "query": {
            "type": "string",
            "title": "Query",
            "description": "The query to retrieve against."
          }
        },
        "type": "object",
        "required": ["query"],
        "title": "RetrievalParams",
        "description": "Schema for the search params for an retrieval execution."
      },
      "RetrieveResults": {
        "properties": {
          "pipeline_id": {
            "type": "string",
            "format": "uuid",
            "title": "Pipeline Id",
            "description": "The ID of the pipeline that the query was retrieved against."
          },
          "retrieval_nodes": {
            "items": {
              "$ref": "#/components/schemas/TextNodeWithScore"
            },
            "type": "array",
            "title": "Retrieval Nodes",
            "description": "The nodes retrieved by the pipeline for the given query."
          },
          "retrieval_latency": {
            "additionalProperties": {
              "type": "number"
            },
            "type": "object",
            "title": "Retrieval Latency",
            "description": "The end-to-end latency for retrieval and reranking."
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "RetrieveResults"
          }
        },
        "type": "object",
        "required": ["pipeline_id", "retrieval_nodes", "retrieval_latency"],
        "title": "RetrieveResults",
        "description": "Schema for the result of an retrieval execution."
      },
      "SentenceSplitter": {
        "properties": {
          "include_metadata": {
            "type": "boolean",
            "title": "Include Metadata",
            "description": "Whether or not to consider metadata when splitting.",
            "default": true
          },
          "include_prev_next_rel": {
            "type": "boolean",
            "title": "Include Prev Next Rel",
            "description": "Include prev/next node relationships.",
            "default": true
          },
          "callback_manager": {
            "type": "object",
            "title": "Callback Manager",
            "default": {}
          },
          "chunk_size": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "Chunk Size",
            "description": "The token chunk size for each chunk.",
            "default": 1024
          },
          "chunk_overlap": {
            "type": "integer",
            "title": "Chunk Overlap",
            "description": "The token overlap of each chunk when splitting.",
            "default": 200,
            "gte": 0
          },
          "separator": {
            "type": "string",
            "title": "Separator",
            "description": "Default separator for splitting into words",
            "default": " "
          },
          "paragraph_separator": {
            "type": "string",
            "title": "Paragraph Separator",
            "description": "Separator between paragraphs.",
            "default": "\n\n\n"
          },
          "secondary_chunking_regex": {
            "type": "string",
            "title": "Secondary Chunking Regex",
            "description": "Backup regex for splitting into sentences.",
            "default": "[^,.;\u3002\uff1f\uff01]+[,.;\u3002\uff1f\uff01]?"
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "SentenceSplitter"
          }
        },
        "type": "object",
        "title": "SentenceSplitter",
        "description": "Parse text with a preference for complete sentences.\n\nIn general, this class tries to keep sentences and paragraphs together. Therefore\ncompared to the original TokenTextSplitter, there are less likely to be\nhanging sentences or parts of sentences at the end of the node chunk."
      },
      "SimpleFileNodeParser": {
        "properties": {
          "include_metadata": {
            "type": "boolean",
            "title": "Include Metadata",
            "description": "Whether or not to consider metadata when splitting.",
            "default": true
          },
          "include_prev_next_rel": {
            "type": "boolean",
            "title": "Include Prev Next Rel",
            "description": "Include prev/next node relationships.",
            "default": true
          },
          "callback_manager": {
            "type": "object",
            "title": "Callback Manager",
            "default": {}
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "SimpleFileNodeParser"
          }
        },
        "type": "object",
        "title": "SimpleFileNodeParser",
        "description": "Simple file node parser.\n\nSplits a document loaded from a file into Nodes using logic based on the file type\nautomatically detects the NodeParser to use based on file type\n\nArgs:\n    include_metadata (bool): whether to include metadata in nodes\n    include_prev_next_rel (bool): whether to include prev/next relationships"
      },
      "StatusEnum": {
        "type": "string",
        "enum": ["PENDING", "SUCCESS", "ERROR", "PARTIAL_SUCCESS"],
        "title": "StatusEnum",
        "description": "Enum for representing the status of a job"
      },
      "SupportedEvalLLMModel": {
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SupportedEvalLLMModelNames"
              }
            ],
            "description": "The name of the supported eval LLM model."
          },
          "details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EvalLLMModelData"
              }
            ],
            "title": "Details",
            "description": "The details of the supported eval LLM model."
          }
        },
        "type": "object",
        "required": ["name", "details"],
        "title": "SupportedEvalLLMModel",
        "description": "Response Schema for a supported eval LLM model."
      },
      "SupportedEvalLLMModelNames": {
        "type": "string",
        "enum": ["GPT_3_5_TURBO", "GPT_4", "GPT_4_TURBO"],
        "title": "SupportedEvalLLMModelNames",
        "description": "An enumeration."
      },
      "TextNode": {
        "properties": {
          "id_": {
            "type": "string",
            "title": "Id ",
            "description": "Unique ID of the node."
          },
          "embedding": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Embedding",
            "description": "Embedding of the node."
          },
          "extra_info": {
            "type": "object",
            "title": "Extra Info",
            "description": "A flat dictionary of metadata fields"
          },
          "excluded_embed_metadata_keys": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Excluded Embed Metadata Keys",
            "description": "Metadata keys that are excluded from text for the embed model."
          },
          "excluded_llm_metadata_keys": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Excluded Llm Metadata Keys",
            "description": "Metadata keys that are excluded from text for the LLM."
          },
          "relationships": {
            "additionalProperties": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/RelatedNodeInfo"
                },
                {
                  "items": {
                    "$ref": "#/components/schemas/RelatedNodeInfo"
                  },
                  "type": "array"
                }
              ]
            },
            "type": "object",
            "title": "Relationships",
            "description": "A mapping of relationships to other node information."
          },
          "text": {
            "type": "string",
            "title": "Text",
            "description": "Text content of the node.",
            "default": ""
          },
          "mimetype": {
            "type": "string",
            "title": "Mimetype",
            "description": "MIME type of the node content.",
            "default": "text/plain"
          },
          "start_char_idx": {
            "type": "integer",
            "title": "Start Char Idx",
            "description": "Start char index of the node."
          },
          "end_char_idx": {
            "type": "integer",
            "title": "End Char Idx",
            "description": "End char index of the node."
          },
          "text_template": {
            "type": "string",
            "title": "Text Template",
            "description": "Template for how text is formatted, with {content} and {metadata_str} placeholders.",
            "default": "{metadata_str}\n\n{content}"
          },
          "metadata_template": {
            "type": "string",
            "title": "Metadata Template",
            "description": "Template for how metadata is formatted, with {key} and {value} placeholders.",
            "default": "{key}: {value}"
          },
          "metadata_seperator": {
            "type": "string",
            "title": "Metadata Seperator",
            "description": "Separator between metadata fields when converting to string.",
            "default": "\n"
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "TextNode"
          }
        },
        "type": "object",
        "title": "TextNode",
        "description": "Base node Object.\n\nGeneric abstract interface for retrievable nodes"
      },
      "TextNodeWithScore": {
        "properties": {
          "node": {
            "$ref": "#/components/schemas/TextNode"
          },
          "score": {
            "type": "number",
            "title": "Score"
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "NodeWithScore"
          }
        },
        "type": "object",
        "required": ["node"],
        "title": "TextNodeWithScore",
        "description": "Same as NodeWithScore but type for node is a TextNode instead of BaseNode.\nFastAPI doesn't accept abstract classes like BaseNode."
      },
      "TokenTextSplitter": {
        "properties": {
          "include_metadata": {
            "type": "boolean",
            "title": "Include Metadata",
            "description": "Whether or not to consider metadata when splitting.",
            "default": true
          },
          "include_prev_next_rel": {
            "type": "boolean",
            "title": "Include Prev Next Rel",
            "description": "Include prev/next node relationships.",
            "default": true
          },
          "callback_manager": {
            "type": "object",
            "title": "Callback Manager",
            "default": {}
          },
          "chunk_size": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "Chunk Size",
            "description": "The token chunk size for each chunk.",
            "default": 1024
          },
          "chunk_overlap": {
            "type": "integer",
            "title": "Chunk Overlap",
            "description": "The token overlap of each chunk when splitting.",
            "default": 20,
            "gte": 0
          },
          "separator": {
            "type": "string",
            "title": "Separator",
            "description": "Default separator for splitting into words",
            "default": " "
          },
          "backup_separators": {
            "items": {},
            "type": "array",
            "title": "Backup Separators",
            "description": "Additional separators for splitting."
          },
          "class_name": {
            "type": "string",
            "title": "Class Name",
            "default": "TokenTextSplitter"
          }
        },
        "type": "object",
        "title": "TokenTextSplitter",
        "description": "Implementation of splitting text that looks at word tokens."
      },
      "TransformationCategoryNames": {
        "type": "string",
        "enum": ["NODE_PARSER", "EMBEDDING"],
        "title": "TransformationCategoryNames",
        "description": "An enumeration."
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": ["loc", "msg", "type"],
        "title": "ValidationError"
      }
    },
    "securitySchemes": {
      "HTTPBearer": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}
